{"version":3,"file":"static/js/582.110b2150.chunk.js","mappings":"6IAEe,SAASA,EAAMC,GAAyB,IAAxB,UAAEC,EAAS,OAAEC,GAAQF,EAChD,OACIG,EAAAA,EAAAA,KAAA,WAASC,UAAU,4CACfC,MAAO,CAACC,gBAAgB,QAADC,OAAUL,EAAO,kBAAiB,OAAMM,UAC/DL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBI,UAChCL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWI,UACtBC,EAAAA,EAAAA,MAAA,OAAKL,UAAU,4BAA2BI,SAAA,EACtCL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYI,UACvBL,EAAAA,EAAAA,KAAA,MAAAK,SAAKP,OAETQ,EAAAA,EAAAA,MAAA,MAAIL,UAAU,aAAYI,SAAA,EACtBL,EAAAA,EAAAA,KAAA,MAAAK,UAAIL,EAAAA,EAAAA,KAAA,KAAGO,KAAK,aAAYF,SAAC,YACzBL,EAAAA,EAAAA,KAAA,MAAIC,UAAU,SAAQI,SAAEP,eAOpD,C,oGChBA,MAiEA,EAjEoBD,IAAiB,IAAhB,OAAEE,GAAQF,EAC3B,MAAOW,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,KACxCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAClCK,EAAOC,IAAYN,EAAAA,EAAAA,WAAS,GAC7BO,GAAWC,EAAAA,EAAAA,MAgCjB,OA9BAC,EAAAA,EAAAA,YAAU,KACmBC,WACrB,IACIJ,EAAS,IACT,MAAMK,QAAiBC,MAAM,uDAADlB,OAAwDa,EAASM,SAASC,MAAM,KAAK,IAAM,CACnHC,OAAO,QAELC,QAAaL,EAASK,OAM5B,GALoB,IAAhBA,EAAKC,SACLf,GAAW,GACXI,EAAS,kCACTF,GAAY,KAEXO,EAASO,GAEV,MADAhB,GAAW,GACLiB,MAAM,gBAEZR,EAASO,IACThB,GAAW,GACXH,EAAeiB,EAAK,KAEpBd,GAAW,EAEnB,CAAE,MAAOG,GAET,GAGJe,EAAkB,GACpB,KAEExB,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAA1B,SAAA,CAEQM,IAAWX,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6BAA4BI,UAACL,EAAAA,EAAAA,KAAA,OAAMC,UAAU,+BAA+B+B,KAAK,aAG3GxB,IACIF,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAA1B,SAAA,EACIL,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CAACE,UAAS,UAAAM,OAAYI,EAAYyB,MAAQlC,OAAQA,KACzDO,EAAAA,EAAAA,MAAA,OAAKL,UAAU,wBAAuBI,SAAA,EAClCL,EAAAA,EAAAA,KAAA,MAAIC,UAAU,KAAII,SAAC,iBACnBL,EAAAA,EAAAA,KAAA,OAAKkC,IAAK1B,EAAY2B,MAAOC,IAAK5B,EAAYyB,QAC9C3B,EAAAA,EAAAA,MAAA,MAAIL,UAAU,KAAII,SAAA,CAAC,SAAOG,EAAYyB,SACtC3B,EAAAA,EAAAA,MAAA,MAAIL,UAAU,KAAII,SAAA,CAAC,UAAQG,EAAY6B,UACvC/B,EAAAA,EAAAA,MAAA,MAAIL,UAAU,KAAII,SAAA,CAAC,UAAQG,EAAY8B,UACvChC,EAAAA,EAAAA,MAAA,MAAIL,UAAU,KAAII,SAAA,CAAC,UAAQG,EAAY+B,eAOnD1B,IAAab,EAAAA,EAAAA,KAACwC,EAAAA,EAAQ,MAE3B,C","sources":["components/header/Header.jsx","pages/certificates/certificate/Certificate.js"],"sourcesContent":["import React from 'react'\r\n\r\nexport default function Header({ headerFor ,images }) {\r\n    return (\r\n        <section className=\"page-header-section service-title style-1\"\r\n            style={{backgroundImage: `url('${images['pageheader.jpg']}')`}}>\r\n            <div className=\"page-header-content\">\r\n                <div className=\"container\">\r\n                    <div className=\"page-header-content-inner\">\r\n                        <div className=\"page-title\">\r\n                            <h2>{headerFor}</h2>\r\n                        </div>\r\n                        <ol className=\"breadcrumb\">\r\n                            <li><a href=\"index.html\">Home</a></li>\r\n                            <li className=\"active\">{headerFor}</li>\r\n                        </ol>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Route, Routes, useLocation } from 'react-router-dom'\r\nimport Header from '../../../components/header/Header'\r\nimport NotFound from '../../404/404'\r\n\r\nconst Certificate = ({ images }) => {\r\n    const [certificate, setCertificate] = useState('')\r\n    const [loading, setLoading] = useState(true)\r\n    const [notFound, setNotFound] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const location = useLocation()\r\n\r\n    useEffect(() => {\r\n        const fetchCertificate = async () => {\r\n            try {\r\n                setError('')\r\n                const response = await fetch(`http://localhost:4001/certificates?certificate_code=${location.pathname.split('/')[2]}`, {\r\n                    method:\"GET\"\r\n                })\r\n                const json = await response.json()\r\n                if (json.length === 0) {\r\n                    setLoading(false)\r\n                    setError('Error Getting this Certificate')\r\n                    setNotFound(true)\r\n                }\r\n                if (!response.ok) {\r\n                    setLoading(false)\r\n                    throw Error('Server error')\r\n                }\r\n                if (response.ok) {\r\n                    setLoading(false)\r\n                    setCertificate(json[0])\r\n                } else {\r\n                    setLoading(false)\r\n                }\r\n            } catch (error) {\r\n                \r\n            }\r\n        }\r\n\r\n        fetchCertificate()\r\n    },[])\r\n    return (\r\n        <>\r\n            {\r\n                loading && <div className='container text-center py-5'><div  className=\"spinner-border text-success \" role=\"status\"></div></div>\r\n            }\r\n            {\r\n                certificate && (\r\n                    <>\r\n                        <Header headerFor={`Doctor ${certificate.name}`} images={images} />\r\n                        <div className='text-center container'>\r\n                            <h1 className='h1'>Certificate</h1>\r\n                            <img src={certificate.image} alt={certificate.name} />\r\n                            <h1 className='h1'>Name: {certificate.name}</h1>\r\n                            <h1 className='h1'>Major: {certificate.major}</h1>\r\n                            <h1 className='h1'>Grade: {certificate.grade}</h1>\r\n                            <h1 className='h1'>About: {certificate.about}</h1>\r\n                        </div>\r\n                    </>\r\n                    \r\n                )\r\n            }\r\n            {\r\n                notFound && (<NotFound />)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Certificate"],"names":["Header","_ref","headerFor","images","_jsx","className","style","backgroundImage","concat","children","_jsxs","href","certificate","setCertificate","useState","loading","setLoading","notFound","setNotFound","error","setError","location","useLocation","useEffect","async","response","fetch","pathname","split","method","json","length","ok","Error","fetchCertificate","_Fragment","role","name","src","image","alt","major","grade","about","NotFound"],"sourceRoot":""}