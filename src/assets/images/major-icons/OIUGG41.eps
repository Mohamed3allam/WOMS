%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1406.i043.005.S.m004.c10.medical icons flat.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: ivan
%%CreationDate: 6/8/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">blank template 450x450 RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-06-08T09:53:35+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2014-06-08T09:53:35+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2014-06-08T09:53:35+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qYquRHc0RSx8AK4CaSI&#xA;k8l31e4/30//AAJwcQ72Xhy7i76vcf76f/gTjxDvXw5dxd9XuP8AfT/8CceId6+HLuLvq9x/vp/+&#xA;BOPEO9fDl3F31e4/30//AAJx4h3r4cu4qeSYOxVesUjiqIWHiATirf1ef/fb/wDAnFbd9Xn/AN9v&#xA;/wACcVt31ef/AH2//AnFbd9Xn/32/wDwJxW2jDMoqY2AHUkHFbWYq7FVdLK8dQ6QSMp3DBGIP0gY&#xA;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&#xA;f//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:13af988f-f885-8342-a5a8-04cb4ae4adea</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:13af988f-f885-8342-a5a8-04cb4ae4adea</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:C5545C0062EEE31191DED358D4C3E82D</stRef:instanceID>
            <stRef:documentID>xmp.did:C5545C0062EEE31191DED358D4C3E82D</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9B7A6DD708ECE311B525BAE621EE4B8E</stEvt:instanceID>
                  <stEvt:when>2014-06-04T21:24:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C5545C0062EEE31191DED358D4C3E82D</stEvt:instanceID>
                  <stEvt:when>2014-06-07T21:54:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:13af988f-f885-8342-a5a8-04cb4ae4adea</stEvt:instanceID>
                  <stEvt:when>2014-06-08T09:53:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
326.9 423.81 mo
326.9 430.742 321.281 436.362 314.348 436.362 cv
245.348 436.362 li
238.415 436.362 232.795 430.742 232.795 423.81 cv
232.795 354.809 li
232.795 347.877 238.415 342.257 245.348 342.257 cv
314.348 342.257 li
321.281 342.257 326.9 347.877 326.9 354.809 cv
326.9 423.81 li
cp
.737255 .384314 .65098 rgb
f
326.9 423.81 mo
326.9 386.356 li
326.847 386.301 302.965 362.419 302.96 362.414 cv
301.269 360.71 298.62 359.606 295.629 359.606 cv
290.526 359.606 286.387 362.811 286.387 366.766 cv
286.387 377.401 li
286.293 377.316 271.485 362.505 271.396 362.416 cv
269.706 360.711 267.055 359.606 264.064 359.606 cv
258.961 359.606 254.822 362.811 254.822 366.766 cv
254.822 373.286 254.822 405.309 254.822 411.853 cv
254.822 413.602 255.634 415.204 256.978 416.447 cv
257.031 416.501 276.893 436.362 276.893 436.362 cv
314.348 436.362 li
321.281 436.362 326.9 430.742 326.9 423.81 cv
cp
.521569 .262745 .458824 rgb
f
272.714 411.457 mo
272.714 415.341 268.842 418.491 264.064 418.491 cv
259.288 418.491 255.416 415.341 255.416 411.457 cv
255.416 389.31 li
269.026 389.31 li
269.026 370.173 li
269.026 369.133 269.492 368.29 270.065 368.29 cv
270.637 368.29 271.101 369.133 271.101 370.173 cv
271.101 389.31 li
272.714 389.31 li
272.714 411.457 li
cp
264.064 359.606 mo
258.961 359.606 254.822 362.811 254.822 366.766 cv
254.822 389.31 li
254.822 411.853 li
254.822 415.808 258.961 419.013 264.064 419.013 cv
269.17 419.013 273.309 415.808 273.309 411.853 cv
273.309 389.31 li
273.309 366.766 li
273.309 362.811 269.17 359.606 264.064 359.606 cv
cp
1 1 1 rgb
f
267.973 415.007 mo
267.399 415.007 269.026 414.273 269.026 407.211 cv
269.026 389.31 li
271.101 389.31 li
271.101 407.76 li
271.101 412.966 268.545 415.007 267.973 415.007 cv
cp
f
304.279 389.308 mo
302.667 389.308 li
302.667 408.446 li
302.667 409.486 302.202 410.329 301.63 410.329 cv
301.057 410.329 300.591 409.486 300.591 408.446 cv
300.591 389.308 li
286.981 389.308 li
286.981 367.162 li
286.981 363.278 290.853 360.128 295.629 360.128 cv
300.407 360.128 304.279 363.278 304.279 367.162 cv
304.279 389.308 li
cp
304.873 411.853 mo
304.873 389.308 li
304.873 366.766 li
304.873 362.811 300.735 359.606 295.629 359.606 cv
290.526 359.606 286.387 362.811 286.387 366.766 cv
286.387 389.308 li
286.387 411.853 li
286.387 415.808 290.526 419.013 295.629 419.013 cv
300.735 419.013 304.873 415.808 304.873 411.853 cv
cp
f
299.538 363.612 mo
298.963 363.612 300.591 364.346 300.591 371.408 cv
300.591 389.308 li
302.667 389.308 li
302.667 370.859 li
302.667 365.653 300.11 363.612 299.538 363.612 cv
cp
f
107.508 95.1908 mo
107.508 102.123 101.888 107.743 94.9562 107.743 cv
25.9555 107.743 li
19.0232 107.743 13.4033 102.123 13.4033 95.1908 cv
13.4033 26.1902 li
13.4033 19.2578 19.0232 13.638 25.9555 13.638 cv
94.9562 13.638 li
101.888 13.638 107.508 19.2578 107.508 26.1902 cv
107.508 95.1908 li
cp
.827451 .207843 .0470588 rgb
f
107.508 95.1908 mo
107.508 57.637 li
107.504 57.6331 107.501 57.6284 107.496 57.625 cv
107.449 57.5644 75.7454 25.8602 75.6791 25.8078 cv
75.3847 25.4302 74.872 25.1833 74.2739 25.1833 cv
46.6368 25.1833 li
45.699 25.1833 44.9669 25.7867 44.9669 26.5563 cv
44.9669 28.6172 li
44.9669 29.0131 45.1619 29.3628 45.4771 29.6112 cv
45.5372 29.6881 47.1325 31.2792 47.1902 31.3244 cv
47.1902 84.1798 li
47.1902 87.1953 48.4317 89.9476 50.4643 92.0595 cv
50.4643 92.0595 66.1266 107.722 66.1281 107.723 cv
66.1343 107.73 66.1416 107.736 66.1478 107.743 cv
94.9562 107.743 li
101.888 107.743 107.508 102.123 107.508 95.1908 cv
cp
.619608 .14902 .00784314 rgb
f
60.4554 94.3837 mo
53.9525 94.3837 48.6795 89.6334 48.6795 83.7762 cv
48.6795 57.05 li
72.2312 57.05 li
72.2312 83.7762 li
72.2312 89.6334 66.9582 94.3837 60.4554 94.3837 cv
cp
74.2739 25.1833 mo
46.6368 25.1833 li
45.699 25.1833 44.9669 25.7867 44.9669 26.5563 cv
44.9669 28.6172 li
44.9669 29.3878 45.699 29.9912 46.6368 29.9912 cv
47.1902 29.9912 li
47.1902 84.1798 li
47.1902 90.8065 53.1425 96.1977 60.4554 96.1977 cv
67.7711 96.1977 73.7185 90.8065 73.7185 84.1798 cv
73.7185 29.9912 li
74.2739 29.9912 li
75.2117 29.9912 75.9448 29.3878 75.9448 28.6172 cv
75.9448 26.5563 li
75.9448 25.7867 75.2117 25.1833 74.2739 25.1833 cv
cp
1 1 1 rgb
f
66.5134 61.2093 mo
54.3945 61.2093 li
54.3945 61.7781 li
66.5134 61.7781 li
66.5134 61.2093 li
cp
f
66.5134 65.511 mo
54.3945 65.511 li
54.3945 66.0798 li
66.5134 66.0798 li
66.5134 65.511 li
cp
f
50.3888 70.3814 mo
70.5191 70.3814 li
70.5191 69.8145 li
50.3888 69.8145 li
50.3888 70.3814 li
cp
f
54.3945 74.6829 mo
66.5134 74.6829 li
66.5134 74.1161 li
54.3945 74.1161 li
54.3945 74.6829 li
cp
f
54.3945 78.9856 mo
66.5134 78.9856 li
66.5134 78.4177 li
54.3945 78.4177 li
54.3945 78.9856 li
cp
f
107.508 423.81 mo
107.508 430.742 101.888 436.362 94.9562 436.362 cv
25.9555 436.362 li
19.0232 436.362 13.4033 430.742 13.4033 423.81 cv
13.4033 354.809 li
13.4033 347.877 19.0232 342.257 25.9555 342.257 cv
94.9562 342.257 li
101.888 342.257 107.508 347.877 107.508 354.809 cv
107.508 423.81 li
cp
.490196 .54902 .67451 rgb
f
107.508 423.81 mo
107.508 385.963 li
107.142 385.584 80.7307 359.216 80.3502 358.803 cv
79.373 357.761 78.1302 357.092 76.6433 356.8 cv
76.6433 357.604 li
75.7685 356.625 li
75.3236 356.624 li
75.3236 356.624 72.8879 355.793 72.2715 355.84 cv
71.6552 355.889 71.574 357.344 71.5735 357.882 cv
71.574 358.377 71.6471 359.625 72.1308 359.873 cv
72.1842 359.965 80.6274 368.402 80.6658 368.426 cv
80.6577 368.899 80.6427 369.381 80.6115 369.885 cv
80.576 370.461 80.5187 371.023 80.4453 371.576 cv
80.4314 371.566 80.4141 371.565 80.3997 371.557 cv
80.3382 371.451 65.1192 356.208 64.9804 356.138 cv
64.8838 355.97 64.7594 355.854 64.5956 355.84 cv
63.9797 355.793 61.5425 356.624 61.5425 356.624 cv
61.0987 356.625 li
61.0982 357.808 li
61.0102 357.827 60.2233 357.071 60.2233 356.801 cv
58.7369 357.091 57.4946 357.762 56.5169 358.803 cv
54.4608 360.991 53.6215 364.663 53.9539 370.027 cv
54.1038 372.458 54.5621 374.691 55.2506 376.696 cv
55.3558 376.661 56.1475 377.408 56.1538 377.426 cv
54.9801 377.848 li
56.0644 380.607 57.5897 382.91 59.3447 384.7 cv
59.3456 384.701 66.5272 391.883 66.5878 391.945 cv
66.5878 392.915 li
68.0564 394.14 li
68.0564 394.169 li
66.6992 394.169 li
66.5162 397.23 66.2021 400.045 65.7635 402.617 cv
65.7298 402.582 59.8645 396.721 59.7871 396.649 cv
58.7691 395.567 57.3283 394.889 55.7262 394.889 cv
53.2914 394.888 51.228 396.45 50.4638 398.624 cv
46.7857 398.624 li
46.7857 400.422 li
46.7454 400.432 45.4804 398.913 45.4804 398.913 cv
40.1465 399.953 36.9195 405.263 36.4611 409.953 cv
36.0942 413.71 37.2284 417.939 40.205 420.933 cv
40.3425 421.071 55.471 436.198 55.6282 436.356 cv
55.6301 436.358 55.632 436.36 55.634 436.362 cv
94.9562 436.362 li
101.888 436.362 107.508 430.742 107.508 423.81 cv
cp
.372549 .419608 .517647 rgb
f
57.4581 375.96 mo
56.8187 374.127 56.3921 372.089 56.2551 369.886 cv
55.9731 365.321 56.6442 362.035 58.1989 360.384 cv
58.7739 359.771 59.3764 359.267 60.2228 359.045 cv
60.2233 356.801 li
58.7369 357.091 57.4946 357.762 56.5169 358.803 cv
54.4608 360.991 53.6215 364.663 53.9539 370.027 cv
54.1038 372.458 54.5621 374.691 55.2506 376.696 cv
57.4581 375.96 li
cp
1 1 1 rgb
f
68.4331 385.4 mo
64.7031 385.4 60.5711 382.055 58.3968 376.619 cv
54.9801 377.848 li
57.7487 384.893 63.3691 389.014 68.4331 389.013 cv
68.4331 385.4 li
cp
f
68.4331 385.4 mo
72.1644 385.4 76.2941 382.055 78.4703 376.62 cv
81.8875 377.848 li
79.1184 384.893 73.499 389.014 68.4331 389.013 cv
68.4331 385.4 li
cp
f
50.8077 424.899 mo
54.3143 424.898 57.4216 423.796 60.0845 421.609 cv
65.7278 416.969 68.9784 407.754 69.7753 394.169 cv
66.6992 394.169 li
65.9484 406.723 63.027 415.21 58.1312 419.233 cv
55.3174 421.547 51.8195 422.311 47.7326 421.506 cv
41.4243 420.263 39.0631 414.959 39.5238 410.252 cv
39.8625 406.763 41.826 403.251 45.4867 402.12 cv
45.4804 398.913 li
40.1465 399.953 36.9195 405.263 36.4611 409.953 cv
35.8857 415.846 38.9833 422.918 47.1383 424.525 cv
48.4047 424.774 49.6322 424.899 50.8077 424.899 cv
cp
f
66.5878 392.915 mo
70.2812 392.915 li
70.2808 387.006 li
66.5878 387.006 li
66.5878 392.915 li
cp
f
61.5425 356.624 mo
61.5425 356.624 63.9797 355.793 64.5956 355.84 cv
65.2114 355.889 65.2935 357.344 65.2931 357.882 cv
65.2935 358.423 65.2119 359.877 64.5956 359.927 cv
63.9797 359.975 61.543 359.143 61.543 359.143 cv
61.543 359.143 li
61.0982 359.143 li
61.0987 356.625 li
61.5425 356.624 li
cp
f
79.4085 375.96 mo
80.0494 374.126 80.476 372.088 80.6115 369.885 cv
80.8935 365.321 80.2224 362.035 78.6688 360.383 cv
78.0922 359.77 77.4922 359.267 76.6438 359.046 cv
76.6433 356.8 li
78.1302 357.092 79.373 357.761 80.3502 358.803 cv
82.4063 360.991 83.2451 364.663 82.9136 370.027 cv
82.7628 372.458 82.3055 374.691 81.6166 376.696 cv
79.4085 375.96 li
cp
f
75.3236 356.624 mo
75.3236 356.624 72.8879 355.793 72.2715 355.84 cv
71.6552 355.889 71.574 357.344 71.5735 357.882 cv
71.574 358.423 71.6552 359.878 72.2715 359.927 cv
72.8879 359.975 75.3236 359.143 75.3236 359.143 cv
75.3236 359.143 li
75.7685 359.143 li
75.7685 356.625 li
75.3236 356.624 li
cp
f
51.4904 400.471 mo
51.49 402.81 53.3856 404.709 55.7267 404.709 cv
58.0657 404.709 59.962 402.811 59.961 400.471 cv
59.962 398.131 58.0644 396.234 55.7267 396.235 cv
53.3861 396.234 51.4904 398.132 51.4904 400.471 cv
cp
46.7857 398.624 mo
50.4638 398.624 li
51.228 396.45 53.2914 394.888 55.7262 394.889 cv
58.808 394.889 61.3085 397.387 61.3085 400.471 cv
61.3085 403.556 58.808 406.054 55.7267 406.052 cv
53.2919 406.052 51.228 404.492 50.4643 402.319 cv
46.7862 402.319 li
46.7857 398.624 li
cp
f
52.6174 400.47 mo
52.6194 402.187 54.0092 403.58 55.7267 403.58 cv
57.4426 403.58 58.8321 402.187 58.834 400.47 cv
58.8344 398.755 57.4423 397.363 55.7262 397.363 cv
54.0092 397.363 52.6184 398.755 52.6174 400.47 cv
cp
f
217.205 423.81 mo
217.205 430.742 211.585 436.362 204.652 436.362 cv
135.652 436.362 li
128.719 436.362 123.1 430.742 123.1 423.81 cv
123.1 354.809 li
123.1 347.877 128.719 342.257 135.652 342.257 cv
204.652 342.257 li
211.585 342.257 217.205 347.877 217.205 354.809 cv
217.205 423.81 li
cp
.654902 .835294 .101961 rgb
f
217.205 423.81 mo
217.205 390.548 li
217.066 390.41 200.837 374.169 200.693 374.036 cv
199.926 373.204 198.837 372.675 197.617 372.675 cv
196.681 372.675 li
196.68 372.674 192.838 368.866 192.838 368.866 cv
192.708 368.654 192.485 368.504 192.218 368.504 cv
188.756 368.504 li
188.755 368.503 181.975 361.758 181.975 361.758 cv
181.846 361.546 181.622 361.396 181.356 361.396 cv
158.954 361.396 li
158.548 361.396 158.218 361.725 158.218 362.132 cv
158.218 363.875 li
158.218 364.142 158.367 364.365 158.579 364.494 cv
158.633 364.583 159.543 365.483 159.635 365.586 cv
159.635 371.284 li
161.103 372.675 li
158.921 372.675 li
158.889 372.638 155.16 368.916 155.077 368.866 cv
154.948 368.653 154.725 368.504 154.458 368.504 cv
148.083 368.504 li
147.677 368.504 147.347 368.833 147.347 369.24 cv
147.347 370.547 li
147.347 370.815 147.497 371.037 147.71 371.167 cv
147.785 371.29 149.1 372.588 149.178 372.635 cv
149.186 372.649 149.196 372.662 149.205 372.675 cv
142.688 372.675 li
140.371 372.675 138.493 374.553 138.493 376.87 cv
138.493 410.201 li
138.493 411.421 139.023 412.51 139.856 413.277 cv
140.216 413.669 162.654 436.071 162.94 436.362 cv
204.652 436.362 li
211.585 436.362 217.205 430.742 217.205 423.81 cv
cp
.490196 .647059 .0705882 rgb
f
155.194 370.547 mo
155.194 370.954 154.864 371.283 154.458 371.283 cv
148.083 371.283 li
147.677 371.283 147.347 370.954 147.347 370.547 cv
147.347 369.24 li
147.347 368.833 147.677 368.504 148.083 368.504 cv
154.458 368.504 li
154.864 368.504 155.194 368.833 155.194 369.24 cv
155.194 370.547 li
cp
1 1 1 rgb
f
185.109 370.547 mo
185.109 370.954 185.438 371.283 185.845 371.283 cv
192.218 371.283 li
192.625 371.283 192.954 370.954 192.954 370.547 cv
192.954 369.239 li
192.954 368.833 192.625 368.504 192.218 368.504 cv
185.845 368.504 li
185.438 368.504 185.109 368.833 185.109 369.239 cv
185.109 370.547 li
cp
f
189.033 416.798 mo
189.033 417.033 189.223 417.223 189.458 417.223 cv
193.148 417.223 li
193.383 417.223 193.574 417.033 193.574 416.798 cv
193.574 416.041 li
193.574 415.805 193.383 415.615 193.148 415.615 cv
189.458 415.615 li
189.223 415.615 189.033 415.805 189.033 416.041 cv
189.033 416.798 li
cp
f
151.273 416.798 mo
151.273 417.033 151.082 417.223 150.847 417.223 cv
147.157 417.223 li
146.922 417.223 146.731 417.033 146.731 416.798 cv
146.731 416.041 li
146.731 415.805 146.922 415.615 147.157 415.615 cv
150.847 415.615 li
151.082 415.615 151.273 415.805 151.273 416.041 cv
151.273 416.798 li
cp
f
161.162 364.625 mo
159.635 364.625 li
159.635 371.284 li
161.162 371.284 li
161.162 364.625 li
cp
f
181.356 364.612 mo
181.762 364.612 182.091 364.282 182.091 363.875 cv
182.091 362.132 li
182.091 361.725 181.762 361.396 181.356 361.396 cv
158.954 361.396 li
158.548 361.396 158.218 361.725 158.218 362.132 cv
158.218 363.875 li
158.218 364.282 158.548 364.612 158.954 364.612 cv
181.356 364.612 li
cp
f
179.141 364.625 mo
180.666 364.625 li
180.666 371.284 li
179.141 371.284 li
179.141 364.625 li
cp
f
181.191 389.95 mo
173.738 389.95 li
173.738 382.498 li
173.738 381.719 173.105 381.087 172.327 381.087 cv
167.979 381.087 li
167.202 381.087 166.57 381.719 166.57 382.498 cv
166.57 389.95 li
159.115 389.95 li
158.335 389.95 157.703 390.583 157.703 391.361 cv
157.703 395.708 li
157.703 396.488 158.335 397.118 159.115 397.118 cv
166.57 397.118 li
166.57 404.573 li
166.57 405.353 167.202 405.984 167.979 405.984 cv
172.327 405.984 li
173.105 405.984 173.738 405.353 173.738 404.573 cv
173.738 397.118 li
181.191 397.118 li
181.971 397.118 182.601 396.488 182.601 395.708 cv
182.601 391.361 li
182.601 390.583 181.971 389.95 181.191 389.95 cv
cp
201.812 410.201 mo
201.812 412.517 199.934 414.396 197.617 414.396 cv
142.688 414.396 li
140.371 414.396 138.493 412.517 138.493 410.201 cv
138.493 376.87 li
138.493 374.553 140.371 372.675 142.688 372.675 cv
197.617 372.675 li
199.934 372.675 201.812 374.553 201.812 376.87 cv
201.812 410.201 li
cp
f
436.597 204.73 mo
436.597 211.663 430.977 217.283 424.044 217.283 cv
355.044 217.283 li
348.112 217.283 342.492 211.663 342.492 204.73 cv
342.492 135.729 li
342.492 128.797 348.112 123.177 355.044 123.177 cv
424.044 123.177 li
430.977 123.177 436.597 128.797 436.597 135.729 cv
436.597 204.73 li
cp
.654902 .835294 .101961 rgb
f
365.286 194.021 mo
362.385 197.133 361.024 198.634 362.189 199.798 cv
362.34 199.948 379.529 217.148 379.693 217.283 cv
388.549 217.283 li
388.541 217.275 365.286 194.021 365.286 194.021 cv
cp
.490196 .647059 .0705882 rgb
f
436.597 204.73 mo
436.597 168.209 li
435.302 166.914 411.623 143.235 410.622 142.235 cv
386.312 166.545 li
381.001 171.855 380.442 175.308 376.119 181.303 cv
372.559 186.24 369.519 189.538 366.079 193.228 cv
372.146 199.298 389.112 216.262 390.132 217.283 cv
424.044 217.283 li
430.977 217.283 436.597 211.663 436.597 204.73 cv
cp
f
436.597 159.411 mo
436.352 159.151 419.327 142.13 419.593 142.397 cv
417.071 139.874 413.336 139.518 411.253 141.603 cv
421.965 152.316 422.945 153.297 436.597 166.948 cv
436.597 159.411 li
cp
f
395.116 166.873 mo
395.906 167.663 395.906 168.944 395.116 169.736 cv
394.325 170.524 393.045 170.525 392.255 169.736 cv
391.465 168.943 391.463 167.663 392.255 166.873 cv
393.045 166.083 394.325 166.083 395.116 166.873 cv
cp
1 1 1 rgb
f
363.236 198.338 mo
363.405 198.507 363.68 198.507 363.849 198.338 cv
366.554 195.632 li
365.89 194.967 li
363.235 197.62 li
363.14 197.715 363.087 197.844 363.087 197.979 cv
363.087 198.113 363.14 198.242 363.236 198.338 cv
cp
365.286 194.021 mo
367.968 196.704 li
364.856 199.604 363.354 200.963 362.189 199.798 cv
361.024 198.634 362.385 197.133 365.286 194.021 cv
cp
f
410.832 143.576 mo
387.088 167.32 li
381.776 172.631 381.218 176.081 376.894 182.08 cv
373.334 187.017 370.456 190.151 367.018 193.84 cv
367.683 194.505 li
371.119 190.815 374 187.681 377.56 182.743 cv
381.883 176.747 382.443 173.297 387.752 167.985 cv
411.499 144.24 li
410.832 143.576 li
cp
391.58 166.2 mo
390.418 167.362 390.418 169.246 391.58 170.408 cv
392.741 171.571 394.628 171.571 395.789 170.408 cv
396.95 169.246 396.95 167.361 395.79 166.2 cv
394.628 165.036 392.741 165.038 391.58 166.2 cv
cp
409.276 148.505 mo
396.034 161.744 li
400.244 165.954 li
413.486 152.713 li
409.276 148.505 li
cp
410.622 142.235 mo
419.753 151.366 li
395.444 175.675 li
390.133 180.988 386.682 181.545 380.684 185.87 cv
375.747 189.43 372.449 192.471 368.76 195.911 cv
366.079 193.228 li
369.519 189.538 372.559 186.24 376.119 181.303 cv
380.442 175.308 381.001 171.855 386.312 166.545 cv
410.622 142.235 li
cp
f
414.203 140.871 mo
413.452 140.871 412.18 142.229 412.18 142.229 cv
412.847 142.893 li
412.847 142.893 414.956 140.871 414.203 140.871 cv
cp
419.593 142.397 mo
422.117 144.917 422.468 148.651 420.385 150.735 cv
411.253 141.603 li
413.336 139.518 417.071 139.874 419.593 142.397 cv
cp
f
399.635 159.342 mo
398.589 160.387 li
398.606 160.633 li
398.853 160.648 li
399.897 159.602 li
399.885 159.355 li
399.635 159.342 li
cp
f
401.271 160.381 mo
400.228 159.336 li
399.983 159.352 li
399.964 159.596 li
401.012 160.641 li
401.258 160.625 li
401.271 160.381 li
cp
f
401.017 160.721 mo
399.97 161.767 li
399.987 162.014 li
400.232 162.029 li
401.279 160.985 li
401.262 160.737 li
401.017 160.721 li
cp
f
403.274 158.464 mo
402.229 159.51 li
402.245 159.754 li
402.492 159.772 li
403.537 158.725 li
403.52 158.48 li
403.274 158.464 li
cp
f
404.646 159.832 mo
403.601 160.878 li
403.614 161.122 li
403.86 161.14 li
404.906 160.095 li
404.889 159.847 li
404.646 159.832 li
cp
f
402.385 162.091 mo
401.341 163.137 li
401.357 163.382 li
401.602 163.397 li
402.648 162.352 li
402.633 162.106 li
402.385 162.091 li
cp
f
402.653 161.762 mo
401.607 160.716 li
401.364 160.732 li
401.346 160.977 li
402.391 162.023 li
402.637 162.008 li
402.653 161.762 li
cp
f
401.895 157.083 mo
400.848 158.129 li
400.865 158.374 li
401.11 158.388 li
402.155 157.345 li
402.141 157.098 li
401.895 157.083 li
cp
f
402.149 159.504 mo
401.104 158.457 li
400.857 158.473 li
400.842 158.719 li
401.888 159.763 li
402.134 159.749 li
402.149 159.504 li
cp
f
404.913 159.504 mo
403.867 158.457 li
403.621 158.473 li
403.604 158.719 li
404.649 159.765 li
404.894 159.749 li
404.913 159.504 li
cp
f
403.531 160.884 mo
402.484 159.838 li
402.24 159.856 li
402.223 160.1 li
403.269 161.145 li
403.515 161.13 li
403.531 160.884 li
cp
f
410.667 153.811 mo
409.623 154.855 li
409.638 155.1 li
409.884 155.116 li
410.927 154.072 li
410.912 153.826 li
410.667 153.811 li
cp
f
407.917 151.06 mo
406.872 152.104 li
406.887 152.349 li
407.133 152.367 li
408.179 151.322 li
408.163 151.076 li
407.917 151.06 li
cp
f
408.172 153.481 mo
407.128 152.434 li
406.881 152.45 li
406.865 152.696 li
407.91 153.742 li
408.156 153.726 li
408.172 153.481 li
cp
f
409.553 154.863 mo
408.509 153.817 li
408.262 153.831 li
408.248 154.077 li
409.293 155.124 li
409.538 155.108 li
409.553 154.863 li
cp
f
404.452 154.525 mo
403.407 155.572 li
403.421 155.817 li
403.667 155.832 li
404.714 154.786 li
404.697 154.541 li
404.452 154.525 li
cp
f
406.089 155.565 mo
405.042 154.52 li
404.796 154.536 li
404.782 154.782 li
405.828 155.825 li
406.072 155.811 li
406.089 155.565 li
cp
f
407.469 156.946 mo
406.424 155.9 li
406.179 155.916 li
406.163 156.16 li
407.21 157.207 li
407.455 157.19 li
407.469 156.946 li
cp
f
405.732 158.681 mo
405.609 158.557 li
405.364 158.572 li
405.348 158.819 li
405.473 158.944 li
405.719 158.927 li
405.732 158.681 li
cp
f
406.426 153.03 mo
406.305 152.904 li
406.057 152.92 li
406.041 153.166 li
406.166 153.29 li
406.41 153.274 li
406.426 153.03 li
cp
f
217.205 314.27 mo
217.205 321.202 211.585 326.822 204.652 326.822 cv
135.652 326.822 li
128.719 326.822 123.1 321.202 123.1 314.27 cv
123.1 245.27 li
123.1 238.337 128.719 232.717 135.652 232.717 cv
204.652 232.717 li
211.585 232.717 217.205 238.337 217.205 245.27 cv
217.205 314.27 li
cp
.956863 .670588 .466667 rgb
f
204.652 326.822 mo
180.086 326.822 li
180.086 326.822 170.173 317.658 170.172 317.658 cv
166.979 313.448 li
167.59 313.179 168.224 312.863 168.833 312.497 cv
168.766 312.428 167.238 310.902 167.196 310.855 cv
166.337 310.021 165.894 309.039 165.894 307.913 cv
165.894 306.39 166.536 305.176 167.582 304.233 cv
167.49 304.142 166.602 303.256 166.501 303.148 cv
165.695 302.437 165.341 301.567 165.345 300.421 cv
165.345 299.125 165.838 298.121 166.842 297.339 cv
166.751 297.248 165.491 296.002 165.404 295.901 cv
164.615 295.132 164.232 294.173 164.213 292.919 cv
164.181 290.848 165.142 289.692 166.635 288.782 cv
166.571 288.721 164.527 286.68 164.435 286.582 cv
163.302 285.508 162.782 284.217 162.782 282.54 cv
162.782 281.75 162.932 281.04 163.219 280.396 cv
163.081 280.246 157.71 274.893 157.54 274.708 cv
156.998 274.202 156.605 273.608 156.402 272.905 cv
156.177 272.69 139.764 256.291 139.593 256.093 cv
139.117 255.674 138.958 255.284 139.177 255.066 cv
139.215 255.028 139.349 254.982 139.557 254.93 cv
139.455 254.828 134.642 250.016 134.546 249.909 cv
134.044 249.45 133.853 249.064 134.023 248.882 cv
134.288 248.602 139.203 248.596 143.952 248.632 cv
144.137 249.096 146.803 251.659 147.467 251.998 cv
147.461 251.992 147.457 251.988 147.453 251.982 cv
146.638 251.204 144.956 249.67 144.541 248.638 cv
147.965 248.638 153.009 248.75 153.2 248.663 cv
153.567 248.5 156.638 247.084 159.427 247.518 cv
160.928 247.753 161.974 248.297 162.62 248.994 cv
162.699 249.063 168.025 254.393 168.124 254.488 cv
168.12 254.068 168.121 253.817 168.129 253.777 cv
168.189 253.438 168.427 252.91 168.767 252.448 cv
167.408 251.102 li
166.951 250.544 166.679 249.843 166.679 249.078 cv
166.679 247.278 168.185 245.817 170.044 245.817 cv
170.846 245.817 171.584 246.09 172.16 246.546 cv
172.16 246.546 176.912 251.299 176.914 251.301 cv
176.706 249.617 177.933 247.979 180.881 247.518 cv
183.668 247.084 186.738 248.5 187.104 248.663 cv
187.295 248.75 192.341 248.638 195.765 248.638 cv
195.633 248.962 196.054 249.406 196.351 248.632 cv
201.103 248.596 206.016 248.602 206.281 248.882 cv
205.138 247.673 217.205 259.855 217.205 259.855 cv
217.205 314.27 li
217.205 321.202 211.585 326.822 204.652 326.822 cv
cp
.815686 .509804 .321569 rgb
f
201.129 255.066 mo
200.928 254.866 198.285 254.476 195.135 254.074 cv
195.002 254.215 li
193.755 255.545 190.607 256.586 187.789 256.617 cv
189.644 257.151 191.749 257.633 193.686 257.785 cv
198.739 258.175 201.822 255.758 201.129 255.066 cv
cp
1 1 1 rgb
f
183.77 252.747 mo
183.77 252.747 189.645 253.371 194.508 253.984 cv
193.196 255.379 189.556 256.519 186.475 256.259 cv
184.044 255.5 182.259 254.743 182.259 254.743 cv
183.77 252.747 li
cp
f
194.93 260.124 mo
194.837 259.943 192.952 259.213 190.67 258.387 cv
190.475 258.5 li
189.588 259.017 188.089 259.324 186.471 259.324 cv
186.47 259.324 li
185.702 259.324 184.96 259.253 184.275 259.121 cv
185.516 259.813 186.942 260.497 188.341 260.921 cv
192.141 262.076 195.259 260.766 194.93 260.124 cv
cp
f
182.182 255.422 mo
182.182 255.422 186.55 256.894 190.134 258.185 cv
188.7 259.019 185.532 259.265 183.221 258.546 cv
181.566 257.557 180.409 256.678 180.409 256.678 cv
182.182 255.422 li
cp
f
185.337 261.016 mo
185.145 261.077 li
184.688 261.225 184.111 261.304 183.475 261.304 cv
183.475 261.304 li
182.28 261.304 181.027 261.037 180.024 260.595 cv
180.753 261.356 181.626 262.136 182.564 262.705 cv
185.154 264.273 188.066 263.687 188.032 263.099 cv
188.02 262.935 186.82 262.049 185.337 261.016 cv
cp
f
179.432 257.022 mo
179.432 257.022 182.36 258.946 184.732 260.593 cv
183.313 261.054 180.732 260.752 179.161 259.782 cv
178.202 258.696 177.599 257.781 177.599 257.781 cv
179.432 257.022 li
cp
f
179.877 262.299 mo
179.715 262.315 li
179.604 262.324 179.492 262.33 179.375 262.33 cv
178.244 262.33 176.661 261.826 175.632 260.962 cv
175.94 261.723 176.354 262.52 176.9 263.156 cv
178.434 264.938 181.064 264.982 181.261 264.488 cv
181.317 264.351 180.687 263.416 179.877 262.299 cv
cp
f
176.604 257.962 mo
176.604 257.962 178.277 260.101 179.598 261.907 cv
178.249 262.032 176.235 261.308 175.314 260.212 cv
174.942 259.13 174.796 258.258 174.796 258.258 cv
176.604 257.962 li
cp
f
175.226 263.637 mo
175.103 263.591 li
175.019 263.56 174.936 263.523 174.85 263.483 cv
174.028 263.089 173.014 262.169 172.51 261.181 cv
172.52 261.842 172.594 262.566 172.813 263.222 cv
173.427 265.055 175.332 266.008 175.614 265.718 cv
175.693 265.637 175.5 264.732 175.226 263.637 cv
cp
f
174.048 259.184 mo
174.048 259.184 174.657 261.329 175.112 263.106 cv
174.089 262.726 172.83 261.494 172.47 260.374 cv
172.505 259.455 172.644 258.767 172.644 258.767 cv
174.048 259.184 li
cp
f
206.281 248.882 mo
206.016 248.602 201.103 248.596 196.351 248.632 cv
196.311 248.736 li
195.794 250.026 194.085 251.786 190.944 252.77 cv
193.863 252.843 197.095 252.827 199.199 252.52 cv
204.107 251.813 206.793 249.428 206.281 248.882 cv
cp
f
170.154 258.535 mo
177.222 258.535 178.169 253.627 178.169 253.627 cv
175.914 251.455 176.521 248.2 180.881 247.518 cv
183.668 247.084 186.738 248.5 187.104 248.663 cv
187.295 248.75 192.341 248.638 195.765 248.638 cv
195.343 249.684 193.661 251.776 189.744 252.741 cv
186.733 252.578 183.991 252.453 183.991 252.453 cv
183.991 252.453 181.539 260.443 170.154 260.443 cv
170.154 258.535 li
cp
f
139.177 255.066 mo
139.376 254.866 142.02 254.476 145.169 254.074 cv
145.301 254.215 li
146.551 255.545 149.698 256.586 152.517 256.617 cv
150.66 257.151 148.556 257.633 146.621 257.785 cv
141.567 258.175 138.485 255.758 139.177 255.066 cv
cp
f
156.534 252.747 mo
156.534 252.747 150.66 253.371 145.797 253.984 cv
147.108 255.379 150.749 256.519 153.831 256.259 cv
156.261 255.5 158.047 254.743 158.047 254.743 cv
156.534 252.747 li
cp
f
145.375 260.124 mo
145.469 259.943 147.354 259.213 149.635 258.387 cv
149.831 258.5 li
150.718 259.017 152.215 259.324 153.835 259.324 cv
153.835 259.324 li
154.601 259.324 155.345 259.253 156.03 259.121 cv
154.789 259.813 153.363 260.497 151.965 260.921 cv
148.162 262.076 145.048 260.766 145.375 260.124 cv
cp
f
158.122 255.422 mo
158.122 255.422 153.754 256.894 150.171 258.185 cv
151.605 259.019 154.771 259.265 157.083 258.546 cv
158.739 257.557 159.896 256.678 159.896 256.678 cv
158.122 255.422 li
cp
f
154.966 261.016 mo
155.16 261.077 li
155.616 261.225 156.193 261.304 156.83 261.304 cv
156.83 261.304 li
158.025 261.304 159.279 261.037 160.281 260.595 cv
159.549 261.356 158.679 262.136 157.743 262.705 cv
155.151 264.273 152.24 263.687 152.273 263.099 cv
152.284 262.935 153.483 262.049 154.966 261.016 cv
cp
f
160.873 257.022 mo
160.873 257.022 157.945 258.946 155.571 260.593 cv
156.992 261.054 159.572 260.752 161.142 259.782 cv
162.103 258.696 162.707 257.781 162.707 257.781 cv
160.873 257.022 li
cp
f
160.427 262.299 mo
160.591 262.315 li
160.701 262.324 160.814 262.33 160.931 262.33 cv
162.06 262.33 163.644 261.826 164.673 260.962 cv
164.364 261.723 163.951 262.52 163.405 263.156 cv
161.872 264.938 159.24 264.982 159.041 264.488 cv
158.987 264.351 159.619 263.416 160.427 262.299 cv
cp
f
163.7 257.962 mo
163.7 257.962 162.028 260.101 160.705 261.907 cv
162.055 262.032 164.069 261.308 164.991 260.212 cv
165.363 259.13 165.509 258.258 165.509 258.258 cv
163.7 257.962 li
cp
f
165.079 263.637 mo
165.202 263.591 li
165.286 263.56 165.37 263.523 165.455 263.483 cv
166.279 263.089 167.289 262.169 167.795 261.181 cv
167.786 261.842 167.71 262.566 167.491 263.222 cv
166.88 265.055 164.976 266.008 164.69 265.718 cv
164.611 265.637 164.807 264.732 165.079 263.637 cv
cp
f
166.256 259.184 mo
166.256 259.184 165.645 261.329 165.193 263.106 cv
166.215 262.726 167.477 261.494 167.836 260.374 cv
167.801 259.455 167.661 258.767 167.661 258.767 cv
166.256 259.184 li
cp
f
134.023 248.882 mo
134.288 248.602 139.203 248.596 143.952 248.632 cv
143.994 248.736 li
144.513 250.026 146.22 251.786 149.36 252.77 cv
146.441 252.843 143.209 252.827 141.106 252.52 cv
136.2 251.813 133.511 249.428 134.023 248.882 cv
cp
f
170.154 258.535 mo
163.082 258.535 162.135 253.627 162.135 253.627 cv
164.389 251.455 163.784 248.2 159.427 247.518 cv
156.638 247.084 153.567 248.5 153.2 248.663 cv
153.009 248.75 147.965 248.638 144.541 248.638 cv
144.962 249.684 146.643 251.776 150.56 252.741 cv
153.573 252.578 156.313 252.453 156.313 252.453 cv
156.313 252.453 158.766 260.443 170.154 260.443 cv
170.154 258.535 li
cp
f
172.217 253.777 mo
172.09 253.068 171.195 251.513 170.172 251.513 cv
169.149 251.513 168.256 253.068 168.129 253.777 cv
168.001 254.486 169.662 317.658 170.172 317.658 cv
170.683 317.658 172.346 254.486 172.217 253.777 cv
cp
f
168.232 248.091 mo
169.032 247.078 170.238 246.496 171.536 246.496 cv
171.747 246.496 171.957 246.515 172.16 246.546 cv
171.584 246.09 170.846 245.817 170.044 245.817 cv
168.185 245.817 166.679 247.278 166.679 249.078 cv
166.679 249.843 166.951 250.544 167.408 251.102 cv
167.256 250.039 167.544 248.965 168.232 248.091 cv
cp
f
167.911 251.624 mo
168.508 252.151 169.303 252.474 170.173 252.474 cv
172.03 252.474 173.537 251.015 173.537 249.213 cv
173.537 248.383 173.213 247.627 172.686 247.051 cv
171.233 246.649 169.59 247.137 168.594 248.402 cv
167.835 249.361 167.626 250.556 167.911 251.624 cv
cp
f
165.181 277.507 mo
166.167 276.902 167.391 276.406 168.968 275.976 cv
168.892 275.964 168.816 275.947 168.741 275.929 cv
168.217 275.833 167.657 275.73 167.027 275.628 cv
162.924 274.932 158.684 274.217 158.684 271.954 cv
158.684 270.311 159.635 269.913 160.247 269.83 cv
160.301 267.146 li
157.859 267.476 156.239 269.242 156.239 271.771 cv
156.239 275.464 160.601 276.698 165.181 277.507 cv
165.181 277.507 li
cp
f
173.364 313.448 mo
172.815 313.205 172.219 312.911 171.627 312.566 cv
171.417 312.673 171.195 312.775 170.965 312.875 cv
170.966 312.877 170.972 312.877 170.978 312.881 cv
171.808 313.134 172.633 313.315 173.364 313.448 cv
173.364 313.448 li
cp
f
173.514 288.628 mo
175.356 289.692 176.16 291.012 176.132 292.919 cv
176.09 295.765 174.15 296.868 171.391 297.704 cv
169.158 298.397 167.516 298.935 167.512 300.423 cv
167.507 301.443 168.241 301.935 169.6 302.4 cv
169.6 302.4 168.932 302.771 168.535 302.996 cv
167.99 303.305 167.401 303.78 167.401 303.78 cv
165.951 302.961 165.339 301.929 165.345 300.421 cv
165.345 299.124 165.838 298.119 166.845 297.337 cv
167.994 296.453 169.596 295.997 170.757 295.63 cv
172.899 294.992 173.943 294.323 173.966 292.888 cv
173.992 291.182 172.204 290.167 170.767 289.731 cv
171.135 289.592 172.07 289.231 172.35 289.12 cv
172.714 288.975 173.514 288.628 173.514 288.628 cv
cp
f
166.815 288.151 mo
163.986 286.796 162.782 285.119 162.782 282.54 cv
162.782 280.607 163.632 279.129 165.383 278.022 cv
167.462 276.704 170.616 276.074 173.318 275.628 cv
177.422 274.932 181.66 274.217 181.66 271.954 cv
181.66 270.311 180.713 269.913 180.097 269.83 cv
180.045 267.146 li
182.721 267.453 183.988 269.259 183.988 271.838 cv
183.988 275.559 179.685 276.715 175.06 277.524 cv
170.476 278.322 164.947 279.11 164.947 282.54 cv
164.947 284.661 166.2 285.482 168.677 286.604 cv
169.049 286.771 169.403 286.96 169.403 286.96 cv
169.049 287.087 168.626 287.25 168.246 287.411 cv
167.661 287.667 166.815 288.151 166.815 288.151 cv
cp
f
172.849 304.287 mo
173.926 305.298 174.451 306.507 174.451 307.913 cv
174.451 309.614 173.461 310.996 171.513 312.018 cv
170.138 312.735 168.497 313.173 166.979 313.448 cv
169.406 312.379 172.222 310.556 172.285 307.917 cv
172.305 306.941 171.808 305.984 170.587 305.323 cv
170.478 305.263 172.685 304.343 172.849 304.287 cv
cp
f
168.977 287.619 mo
171.552 286.495 175.396 285.935 175.396 282.54 cv
175.396 280.407 173.304 279.423 171.253 278.775 cv
172.666 278.466 173.814 278.299 175.048 278.074 cv
176.74 279.179 177.565 280.637 177.565 282.54 cv
177.565 285.078 176.396 286.742 173.659 288.09 cv
168.887 290.127 166.343 290.484 166.38 292.888 cv
166.403 294.335 167.483 294.961 169.28 295.534 cv
168.375 295.847 167.435 296.235 166.656 296.802 cv
164.996 295.918 164.24 294.715 164.213 292.919 cv
164.167 289.9 166.203 288.812 168.977 287.619 cv
cp
f
169.068 303.198 mo
171.112 302.102 172.841 302.02 172.835 300.423 cv
172.832 299.352 171.964 298.809 170.98 298.401 cv
171.551 298.215 172.606 297.932 173.628 297.442 cv
174.55 298.207 175 299.183 175.003 300.421 cv
175.013 303.417 172.546 303.868 170.213 305.04 cv
168.975 305.653 168.033 306.535 168.062 307.917 cv
168.087 309.224 168.804 310.325 169.757 311.209 cv
169.443 311.463 169.086 311.708 168.701 311.947 cv
166.836 310.932 165.894 309.576 165.894 307.913 cv
165.894 305.761 167.16 304.212 169.068 303.198 cv
cp
f
177.423 267.555 mo
177.066 267.668 176.745 267.935 176.791 268.074 cv
176.833 268.212 177.322 268.304 177.679 268.189 cv
178.034 268.076 178.316 267.843 178.27 267.705 cv
178.224 267.565 177.78 267.44 177.423 267.555 cv
cp
180.847 270.095 mo
180.847 270.095 180.097 270.925 178.758 271.185 cv
176.986 271.531 175.818 271.325 175.654 271.027 cv
175.489 270.729 178.169 270.689 178.963 270.151 cv
179.763 269.611 179.262 268.702 179.262 268.702 cv
179.262 268.702 178.612 269.388 177.438 269.623 cv
176.264 269.859 174.399 269.88 174.339 269.306 cv
174.28 268.731 176.94 266.602 180.045 267.146 cv
180.847 270.095 li
cp
f
179.12 270.024 mo
179.12 270.024 178.033 269.688 177.268 269.759 cv
176.558 269.822 175.896 270.451 175.303 270.385 cv
174.779 270.33 174.34 269.988 174.186 270.011 cv
174.033 270.034 173.848 270.241 174.186 270.397 cv
174.527 270.551 174.911 270.758 175.426 270.726 cv
176.201 270.68 176.858 270.145 177.415 270.145 cv
177.95 270.145 178.824 270.457 178.824 270.457 cv
179.12 270.024 li
cp
f
162.076 267.705 mo
162.031 267.843 162.309 268.076 162.666 268.189 cv
163.022 268.304 163.512 268.212 163.555 268.074 cv
163.6 267.935 163.277 267.668 162.922 267.555 cv
162.564 267.44 162.122 267.565 162.076 267.705 cv
cp
160.299 267.146 mo
163.406 266.602 166.065 268.731 166.005 269.306 cv
165.946 269.88 164.08 269.859 162.907 269.623 cv
161.733 269.388 161.084 268.702 161.084 268.702 cv
161.084 268.702 160.582 269.611 161.38 270.151 cv
162.175 270.689 164.855 270.729 164.69 271.027 cv
164.526 271.325 163.36 271.531 161.585 271.185 cv
160.247 270.925 159.498 270.095 159.498 270.095 cv
160.299 267.146 li
cp
f
161.226 270.024 mo
161.226 270.024 162.314 269.688 163.076 269.759 cv
163.786 269.822 164.448 270.451 165.041 270.385 cv
165.564 270.33 166.005 269.988 166.159 270.011 cv
166.31 270.034 166.498 270.241 166.159 270.397 cv
165.817 270.551 165.435 270.758 164.919 270.726 cv
164.145 270.68 163.489 270.145 162.931 270.145 cv
162.395 270.145 161.521 270.457 161.521 270.457 cv
161.226 270.024 li
cp
f
217.205 204.73 mo
217.205 211.663 211.585 217.283 204.652 217.283 cv
135.652 217.283 li
128.719 217.283 123.1 211.663 123.1 204.73 cv
123.1 135.729 li
123.1 128.797 128.719 123.177 135.652 123.177 cv
204.652 123.177 li
211.585 123.177 217.205 128.797 217.205 135.729 cv
217.205 204.73 li
cp
.490196 .54902 .67451 rgb
f
204.652 217.283 mo
176.335 217.283 li
176.334 217.282 138.946 179.895 138.761 179.704 cv
137.523 178.544 136.789 177.046 136.75 175.693 cv
136.662 172.802 137.96 168.565 143.014 166.341 cv
146.498 164.807 149.087 166.255 150.776 168.016 cv
150.778 168.017 155.836 173.069 155.836 173.069 cv
158.699 171.631 175.919 160.417 182.337 155.943 cv
182.667 155.712 183.743 155.934 183.743 155.934 cv
183.77 155.894 183.823 155.815 183.823 155.815 cv
182.436 154.833 li
182.436 154.833 193.434 138.512 194.159 137.728 cv
195.398 136.392 196.263 136.916 196.263 136.916 cv
217.205 157.901 li
217.205 204.73 li
217.205 211.663 211.585 217.283 204.652 217.283 cv
cp
.372549 .419608 .517647 rgb
f
161.117 200.38 mo
157.343 196.606 163.028 185.901 168.589 188.4 cv
180.893 193.941 166.884 207.877 161.117 200.38 cv
cp
174.049 197.376 mo
176.712 191.325 170.383 187.958 169.037 187.353 cv
167.688 186.742 166.953 186.018 167.164 184.916 cv
167.345 183.964 174.919 171.311 181.849 161.697 cv
179.557 163.23 178.4 164.081 175.883 165.756 cv
167.729 177.986 165.151 182.394 164.462 183.312 cv
164.379 183.425 164.283 183.554 164.182 183.693 cv
163.199 183.079 160.943 182.641 160.65 182.613 cv
160.518 182.601 160.1 183.319 160.1 183.319 cv
160.1 183.319 163.091 185.154 163.235 186.813 cv
161.287 189.713 158.646 194.161 158.715 196.807 cv
158.816 200.818 162.04 203.563 164.698 203.641 cv
167.587 203.729 171.823 202.429 174.049 197.376 cv
cp
1 1 1 rgb
f
183.155 154.885 mo
183.446 154.943 183.507 154.951 183.664 154.845 cv
184.528 154.266 185.598 153.582 186.79 152.839 cv
190.75 146.483 196.263 136.916 196.263 136.916 cv
196.263 136.916 195.398 136.392 194.159 137.728 cv
193.434 138.512 188.467 145.837 182.436 154.833 cv
182.717 154.805 182.972 154.848 183.155 154.885 cv
cp
f
181.07 158.43 mo
183.452 158.43 li
183.36 159.008 182.862 159.448 182.26 159.448 cv
181.66 159.448 181.161 159.009 181.07 158.43 cv
cp
183.452 158.054 mo
181.07 158.054 li
181.161 157.48 181.66 157.038 182.26 157.038 cv
182.862 157.038 183.36 157.478 183.452 158.054 cv
cp
151.988 171.8 mo
154.489 177.36 143.783 183.046 140.01 179.272 cv
132.514 173.507 146.449 159.497 151.988 171.8 cv
cp
136.75 175.693 mo
136.827 178.349 139.571 181.573 143.584 181.675 cv
146.229 181.743 150.678 179.101 153.575 177.153 cv
155.235 177.299 157.07 180.289 157.07 180.289 cv
157.07 180.289 157.789 179.871 157.777 179.738 cv
157.75 179.445 157.31 176.79 157.421 176.707 cv
159.358 175.257 198.834 150.061 202.66 146.23 cv
203.948 144.939 203.472 144.127 203.472 144.127 cv
203.472 144.127 189.735 152.043 184.247 155.716 cv
183.357 156.314 182.751 155.653 182.337 155.943 cv
175.531 160.688 156.572 173.016 155.474 173.225 cv
154.371 173.435 153.647 172.701 153.039 171.352 cv
152.432 170.005 149.065 163.676 143.014 166.341 cv
137.96 168.565 136.662 172.802 136.75 175.693 cv
cp
f
183.713 158.242 mo
183.713 158.178 183.705 158.117 183.694 158.054 cv
180.829 158.054 li
180.818 158.116 180.81 158.178 180.812 158.243 cv
180.81 158.306 180.816 158.372 180.829 158.432 cv
183.694 158.43 li
183.705 158.369 183.713 158.308 183.713 158.242 cv
cp
f
436.597 314.27 mo
436.597 321.202 430.977 326.822 424.044 326.822 cv
355.044 326.822 li
348.112 326.822 342.492 321.202 342.492 314.27 cv
342.492 245.27 li
342.492 238.337 348.112 232.717 355.044 232.717 cv
424.044 232.717 li
430.977 232.717 436.597 238.337 436.597 245.27 cv
436.597 314.27 li
cp
.490196 .54902 .67451 rgb
f
436.597 314.27 mo
436.597 304.32 li
436.594 304.317 394.77 262.493 394.77 262.493 cv
394.288 262.011 393.632 261.74 392.95 261.74 cv
392.268 261.739 391.613 262.011 391.131 262.493 cv
391.081 262.543 li
392.105 263.568 392.455 263.92 392.455 263.92 cv
369.64 286.736 li
369.279 286.375 368.597 285.693 368.26 285.357 cv
368.209 285.408 li
367.204 286.413 367.204 288.042 368.209 289.048 cv
370.405 291.243 370.717 291.555 372.958 293.797 cv
366.307 300.449 li
364.306 302.45 361.036 300.556 360.56 300.081 cv
360.557 300.078 li
360.556 300.077 357.604 297.126 357.603 297.125 cv
357.025 296.548 356.09 296.548 355.513 297.125 cv
355.389 297.247 li
354.812 297.824 354.812 298.762 355.39 299.339 cv
376.402 320.351 361.758 305.707 382.873 326.822 cv
424.044 326.822 li
430.977 326.822 436.597 321.202 436.597 314.27 cv
cp
.372549 .419608 .517647 rgb
f
436.597 297.236 mo
418.595 279.234 403.382 264.022 401.902 262.542 cv
398.983 265.46 li
398.983 265.46 436.588 303.065 436.597 303.074 cv
436.597 297.236 li
cp
f
436.597 292.45 mo
433.705 289.558 407.055 262.908 404.18 260.034 cv
403.993 259.846 403.739 259.741 403.475 259.741 cv
403.211 259.741 402.957 259.846 402.77 260.034 cv
402.409 260.395 li
402.221 260.582 402.117 260.836 402.117 261.1 cv
402.117 261.364 402.221 261.618 402.409 261.805 cv
428.758 288.155 411.603 271.001 436.597 295.993 cv
436.597 292.45 li
cp
f
436.597 257.325 mo
424.52 244.386 li
421.789 245.277 li
406.248 260.819 li
406.401 260.973 436.432 291.003 436.597 291.167 cv
436.597 257.325 li
cp
f
404.064 275.528 mo
381.247 298.345 li
380.854 297.953 li
403.673 275.135 li
404.064 275.528 li
cp
1 1 1 rgb
f
380.055 291.471 mo
383.696 295.111 li
383.301 295.506 li
379.662 291.865 li
380.055 291.471 li
cp
f
382.72 288.804 mo
386.36 292.442 li
385.967 292.839 li
382.328 289.198 li
382.72 288.804 li
cp
f
385.388 286.139 mo
389.025 289.779 li
388.633 290.172 li
384.992 286.534 li
385.388 286.139 li
cp
f
388.053 283.473 mo
391.693 287.111 li
391.299 287.508 li
387.66 283.867 li
388.053 283.473 li
cp
f
390.72 280.805 mo
394.36 284.446 li
393.966 284.841 li
390.326 281.2 li
390.72 280.805 li
cp
f
392.851 264.314 mo
370.033 287.131 li
369.639 286.737 li
392.455 263.92 li
392.851 264.314 li
cp
f
395.31 283.497 mo
384.488 272.675 li
385.868 271.298 li
396.687 282.118 li
395.31 283.497 li
cp
f
402.525 269.001 mo
398.983 265.46 li
401.902 262.542 li
405.445 266.085 li
402.525 269.001 li
cp
f
407.167 261.737 mo
406.248 260.819 li
421.789 245.277 li
424.52 244.386 li
407.167 261.737 li
cp
f
407.591 265.576 mo
407.201 265.967 406.571 265.967 406.181 265.576 cv
402.409 261.805 li
402.221 261.618 402.117 261.364 402.117 261.1 cv
402.117 260.836 402.221 260.582 402.409 260.395 cv
402.77 260.034 li
402.957 259.846 403.211 259.741 403.475 259.741 cv
403.739 259.741 403.993 259.846 404.18 260.034 cv
407.952 263.807 li
408.341 264.197 408.341 264.827 407.951 265.216 cv
407.591 265.576 li
cp
f
366.307 300.449 mo
364.306 302.45 361.036 300.556 360.56 300.081 cv
360.514 300.036 li
357.603 297.125 li
357.025 296.548 356.09 296.548 355.513 297.125 cv
355.389 297.247 li
354.812 297.824 354.812 298.762 355.39 299.339 cv
362.019 305.966 li
368.646 312.594 li
369.225 313.173 370.161 313.172 370.738 312.594 cv
370.861 312.473 li
371.439 311.895 371.435 310.959 370.86 310.383 cv
367.949 307.47 li
367.904 307.427 li
367.429 306.951 365.536 303.68 367.536 301.68 cv
390.513 278.7 li
389.285 277.47 li
366.307 300.449 li
cp
f
382.624 299.723 mo
368.26 285.357 li
368.209 285.408 li
367.204 286.413 367.204 288.042 368.209 289.048 cv
378.935 299.773 li
379.94 300.778 381.569 300.778 382.574 299.773 cv
382.624 299.723 li
cp
f
391.081 262.543 mo
405.442 276.906 li
405.492 276.856 li
406.497 275.851 406.497 274.221 405.492 273.217 cv
394.77 262.493 li
394.288 262.011 393.632 261.74 392.95 261.74 cv
392.268 261.739 391.613 262.011 391.131 262.493 cv
391.081 262.543 li
cp
f
398.324 273.202 mo
401.964 276.843 li
402.357 276.447 li
398.717 272.808 li
398.324 273.202 li
cp
395.658 275.869 mo
399.297 279.509 li
399.691 279.114 li
396.052 275.474 li
395.658 275.869 li
cp
392.992 278.536 mo
396.632 282.175 li
397.024 281.783 li
393.385 278.14 li
392.992 278.536 li
cp
396.69 282.117 mo
385.868 271.295 li
392.85 264.313 li
403.673 275.133 li
396.69 282.117 li
cp
f
426.28 250.877 mo
426.28 251.841 425.491 252.623 424.52 252.621 cv
423.547 252.622 422.757 251.84 422.758 250.877 cv
422.757 249.914 424.52 247.308 424.52 247.308 cv
424.52 247.308 426.28 249.915 426.28 250.877 cv
cp
f
326.9 204.73 mo
326.9 211.663 321.281 217.283 314.348 217.283 cv
245.348 217.283 li
238.415 217.283 232.795 211.663 232.795 204.73 cv
232.795 135.729 li
232.795 128.797 238.415 123.177 245.348 123.177 cv
314.348 123.177 li
321.281 123.177 326.9 128.797 326.9 135.729 cv
326.9 204.73 li
cp
.827451 .207843 .0470588 rgb
f
326.9 171.311 mo
326.899 171.311 305.712 150.123 305.711 150.122 cv
301.569 146.059 295.57 144.998 289.716 146.398 cv
283.685 147.842 280.797 151.824 280.023 153.069 cv
280.018 153.064 277.712 150.761 277.698 150.748 cv
276.125 149.157 273.602 147.291 269.872 146.398 cv
262.19 144.561 254.244 146.947 250.596 154.824 cv
248.572 159.199 248.991 163.299 249.917 167.581 cv
249.937 167.652 249.982 167.793 249.982 167.793 cv
252.655 170.422 li
250.903 170.422 li
252.144 173.392 254.075 176.327 256.787 178.982 cv
256.855 179.05 295.087 217.283 295.087 217.283 cv
314.348 217.283 li
321.281 217.283 326.9 211.663 326.9 204.73 cv
326.9 171.311 li
cp
.619608 .14902 .00784314 rgb
f
259.334 166.52 mo
262.321 160.53 li
266.91 172.89 li
275.537 152.647 li
283.967 180.31 li
291.763 159.51 li
295.147 170.711 li
295.235 170.53 li
296.235 168.509 299.782 167.793 302.515 167.793 cv
309.618 167.793 li
309.638 167.719 309.657 167.645 309.674 167.572 cv
310.258 164.884 311.612 160.487 308.993 154.824 cv
305.346 146.947 297.4 144.561 289.716 146.398 cv
282.532 148.117 279.796 153.456 279.796 153.456 cv
279.796 153.456 277.054 148.117 269.872 146.398 cv
262.19 144.561 254.244 146.947 250.596 154.824 cv
248.572 159.199 248.991 163.299 249.917 167.581 cv
249.937 167.652 249.96 167.722 249.982 167.793 cv
254.413 167.793 li
257.465 167.793 259.146 166.894 259.334 166.52 cv
cp
1 1 1 rgb
f
297.595 171.695 mo
294.978 177 li
291.933 166.588 li
283.51 188.477 li
275.052 160.633 li
267.015 179.458 li
262.214 166.637 li
261.687 167.695 li
260.68 169.708 257.14 170.422 254.413 170.422 cv
250.903 170.422 li
252.536 174.333 255.359 178.185 259.6 181.416 cv
268.684 188.334 277.733 189.786 279.796 194.649 cv
281.856 189.786 290.905 188.334 299.989 181.416 cv
304.238 178.178 307.237 174.358 308.798 170.422 cv
302.515 170.422 li
299.499 170.422 297.773 171.333 297.595 171.695 cv
cp
f
436.597 95.1908 mo
436.597 102.123 430.977 107.743 424.044 107.743 cv
355.044 107.743 li
348.112 107.743 342.492 102.123 342.492 95.1908 cv
342.492 26.1902 li
342.492 19.2578 348.112 13.638 355.044 13.638 cv
424.044 13.638 li
430.977 13.638 436.597 19.2578 436.597 26.1902 cv
436.597 95.1908 li
cp
.211765 .388235 .556863 rgb
f
424.044 107.743 mo
430.977 107.743 436.597 102.123 436.597 95.1908 cv
436.597 66.76 li
436.54 66.7403 397.348 27.5157 397.382 27.422 cv
389.065 24.504 li
388.419 26.3458 li
389.937 27.6728 li
389.931 27.6896 li
388.467 27.176 li
389.454 29.8601 li
389.454 29.8601 390.585 31.0514 390.856 31.1466 cv
390.865 31.1721 li
389.198 30.5879 li
388.419 32.8146 li
389.93 34.1622 li
386.129 32.8295 li
377.443 57.5923 li
379.199 59.1811 li
378.031 58.7713 li
377.344 60.7309 li
379.067 62.4132 li
378.018 62.0452 li
377.135 64.5611 li
383.256 70.673 li
370.953 70.673 li
370.953 72.6047 li
373.645 75.1879 li
372.594 75.1879 li
372.05 75.1879 371.61 75.6716 371.61 76.2679 cv
371.61 76.6479 371.8 76.9663 372.071 77.159 cv
372.201 77.3459 385.755 90.8796 385.916 91.0309 cv
370.093 91.0309 li
366.525 96.8771 li
377.629 107.743 li
424.044 107.743 li
cp
.145098 .282353 .411765 rgb
f
394.446 35.746 mo
385.761 60.5099 li
377.443 57.5923 li
386.129 32.8295 li
394.446 35.746 li
cp
1 1 1 rgb
f
393.446 32.0758 mo
392.666 34.3034 li
388.419 32.8146 li
389.198 30.5879 li
393.446 32.0758 li
cp
f
397.382 27.422 mo
396.737 29.262 li
388.419 26.3458 li
389.065 24.504 li
397.382 27.422 li
cp
f
389.454 29.8601 mo
391.577 30.6028 li
393.702 31.3484 li
396.151 29.8702 li
392.307 28.5231 li
388.467 27.176 li
389.454 29.8601 li
cp
f
383.879 63.0224 mo
384.567 61.0628 li
378.031 58.7713 li
377.344 60.7309 li
383.879 63.0224 li
cp
f
381.651 66.1432 mo
382.533 63.6292 li
378.018 62.0452 li
377.135 64.5611 li
381.651 66.1432 li
cp
f
405.854 96.8771 mo
366.525 96.8771 li
370.093 91.0309 li
400.922 91.0309 li
405.854 96.8771 li
cp
f
395.035 47.5306 mo
395.035 46.7946 394.436 46.1974 393.702 46.1974 cv
392.967 46.1974 392.368 46.7946 392.368 47.5306 cv
392.368 48.2637 392.967 48.8633 393.702 48.8633 cv
394.436 48.8633 395.035 48.2637 395.035 47.5306 cv
cp
398.959 81.4789 mo
398.959 80.4023 398.083 79.5236 397.005 79.5236 cv
395.926 79.5236 395.049 80.4023 395.049 81.4789 cv
395.049 82.5574 395.926 83.4347 397.005 83.4347 cv
398.083 83.4347 398.959 82.5574 398.959 81.4789 cv
cp
411.531 72.3712 mo
409.795 77.5799 405.991 81.4798 400.922 83.3467 cv
400.922 84.0198 li
400.922 89.5282 li
392.827 89.5282 li
392.827 84.0198 li
392.827 83.4347 li
385.424 81.9997 li
383.306 81.5889 381.777 79.735 381.777 77.5779 cv
381.777 76.4989 li
380.899 76.4989 li
380.801 76.9837 380.409 77.3478 379.938 77.3478 cv
372.594 77.3478 li
372.05 77.3478 371.61 76.8635 371.61 76.2679 cv
371.61 75.6716 372.05 75.1879 372.594 75.1879 cv
379.938 75.1879 li
380.409 75.1879 380.801 75.5516 380.899 76.0363 cv
381.777 76.0363 li
381.777 72.6047 li
370.953 72.6047 li
370.953 70.673 li
385.264 70.673 li
385.264 73.2639 li
385.264 78.4811 386.458 78.4811 391.408 78.4811 cv
392.827 78.4811 li
399.77 78.2573 404.249 74.6334 405.633 70.4784 cv
407.208 65.7578 406.852 60.2778 403.796 56.6344 cv
401.317 53.6808 398.322 51.9845 395.476 51.0169 cv
394.291 50.6119 393.131 50.3323 392.045 50.1483 cv
391.67 49.7452 391.393 49.2461 391.259 48.6725 cv
390.859 46.9532 391.898 45.2395 393.595 44.7898 cv
394.58 44.9776 395.605 45.2279 396.654 45.5561 cv
400.484 46.7528 404.61 48.9853 408.041 53.074 cv
412.355 58.2164 413.725 65.791 411.531 72.3712 cv
cp
f
436.597 423.81 mo
436.597 430.742 430.977 436.362 424.044 436.362 cv
355.044 436.362 li
348.112 436.362 342.492 430.742 342.492 423.81 cv
342.492 354.809 li
342.492 347.877 348.112 342.257 355.044 342.257 cv
424.044 342.257 li
430.977 342.257 436.597 347.877 436.597 354.809 cv
436.597 423.81 li
cp
.286275 .380392 .419608 rgb
f
436.597 423.81 mo
436.597 405.363 li
436.486 405.252 389.624 358.382 389.51 358.276 cv
388.526 357.226 387.133 356.565 385.587 356.565 cv
382.609 356.565 380.193 358.988 380.193 361.962 cv
380.193 363.508 380.851 364.901 381.897 365.886 cv
381.942 365.934 385.032 369.024 385.042 369.032 cv
384.056 369.277 383.321 370.16 383.321 371.217 cv
383.321 388.017 li
383.286 387.978 378.795 383.484 378.687 383.389 cv
378.095 382.689 377.116 382.39 376.2 382.72 cv
368.185 385.605 362.803 393.269 362.803 401.788 cv
362.803 407.436 365.131 412.547 368.872 416.226 cv
369.011 416.367 388.868 436.222 389.008 436.362 cv
424.044 436.362 li
430.977 436.362 436.597 430.742 436.597 423.81 cv
cp
.184314 .262745 .298039 rgb
f
415.865 405.278 mo
416.542 404.35 416.384 403.055 415.501 402.318 cv
402.327 391.32 li
387.846 391.32 li
387.883 383.832 li
387.884 383.669 388.015 383.539 388.178 383.539 cv
400.594 383.539 li
401.845 383.539 402.857 382.525 402.857 381.276 cv
402.857 380.026 401.845 379.012 400.594 379.012 cv
388.178 379.012 li
388.015 379.012 387.884 378.882 387.883 378.719 cv
387.846 371.217 li
387.846 369.972 386.836 368.959 385.587 368.959 cv
384.337 368.959 383.321 369.972 383.321 371.217 cv
383.321 394.064 li
383.321 395.047 384.119 395.846 385.103 395.846 cv
400.673 395.846 li
412.666 405.98 li
413.096 406.343 413.657 406.511 414.215 406.444 cv
414.773 406.377 415.279 406.082 415.61 405.627 cv
415.865 405.278 li
cp
1 1 1 rgb
f
385.587 367.353 mo
382.609 367.353 380.193 364.934 380.193 361.962 cv
380.193 358.988 382.609 356.565 385.587 356.565 cv
388.555 356.565 390.975 358.988 390.975 361.962 cv
390.975 364.934 388.555 367.353 385.587 367.353 cv
385.587 367.353 li
cp
f
382.898 407.713 mo
379.923 407.713 377.503 405.296 377.503 402.323 cv
377.503 399.349 379.923 396.925 382.898 396.925 cv
385.869 396.925 388.286 399.349 388.286 402.323 cv
388.286 405.296 385.869 407.713 382.898 407.713 cv
382.898 407.713 li
cp
f
383.072 422.054 mo
371.895 422.054 362.803 412.963 362.803 401.788 cv
362.803 393.269 368.185 385.605 376.2 382.72 cv
377.378 382.295 378.671 382.904 379.093 384.08 cv
379.517 385.254 378.909 386.548 377.733 386.973 cv
371.509 389.214 367.327 395.17 367.327 401.788 cv
367.327 410.468 374.39 417.532 383.072 417.532 cv
390.546 417.532 397.042 412.219 398.505 404.897 cv
398.752 403.673 399.944 402.878 401.167 403.125 cv
402.391 403.37 403.186 404.563 402.944 405.788 cv
401.054 415.214 392.692 422.054 383.072 422.054 cv
383.072 422.054 li
cp
f
217.205 95.1908 mo
217.205 102.123 211.585 107.743 204.652 107.743 cv
135.652 107.743 li
128.719 107.743 123.1 102.123 123.1 95.1908 cv
123.1 26.1902 li
123.1 19.2578 128.719 13.638 135.652 13.638 cv
204.652 13.638 li
211.585 13.638 217.205 19.2578 217.205 26.1902 cv
217.205 95.1908 li
cp
.286275 .380392 .419608 rgb
f
217.205 95.1908 mo
217.205 66.9512 li
216.948 66.687 187.858 37.5923 187.673 37.4193 cv
187.204 36.913 186.726 36.594 186.316 36.3903 cv
186.302 36.3759 183.254 33.3315 183.208 33.2878 cv
182.862 32.9198 182.455 32.5869 181.997 32.3131 cv
180.734 31.5564 179.04 31.4522 177.749 31.5137 cv
177.464 31.3172 172.261 25.7977 171.849 25.7977 cv
170.152 25.7977 li
168.454 25.7977 li
168.216 25.7977 168.022 25.9625 168.022 26.1609 cv
168.022 29.4628 li
168.022 29.7149 168.986 30.4467 168.986 30.4467 cv
168.454 30.4467 li
168.216 30.4467 168.022 30.6105 168.022 30.8098 cv
168.022 33.9979 li
168.022 34.1957 168.321 34.4009 168.321 34.4009 cv
169.545 35.625 li
168.124 35.6067 li
164.453 31.7365 li
164.453 31.7365 160.639 30.9165 158.307 32.3131 cv
156.318 33.503 155.207 35.7634 156.519 37.513 cv
155.104 36.0382 li
155.104 36.0382 152.867 36.1842 151.529 39.1056 cv
150.732 40.8433 151.056 42.5592 152.377 43.8362 cv
152.437 43.903 158.917 50.3775 158.917 50.3775 cv
158.562 50.3818 li
158.562 50.3818 151.205 43.0118 150.743 42.6457 cv
150.743 42.6457 148.074 43.0714 147.182 45.9942 cv
146.801 47.2413 147.252 48.4385 148.293 49.4748 cv
148.401 49.5964 150.853 52.0335 150.964 52.1449 cv
150.188 52.6537 li
150.188 52.6537 148.868 51.0059 146.511 49.4306 cv
146.511 49.4306 144.402 51.1562 144.516 54.4197 cv
144.564 55.8311 145.221 57.2887 146.537 58.4806 cv
146.626 58.5695 149.454 61.3996 149.454 61.3996 cv
148.444 61.9963 li
148.444 61.9963 146.326 59.5942 144.247 58.104 cv
144.247 58.104 142.712 59.819 143.086 62.7476 cv
143.219 63.7862 143.813 64.896 144.795 65.8799 cv
144.815 65.9006 147.813 68.8979 147.853 68.9396 cv
147.338 69.3797 li
146.354 68.4838 147.506 69.3807 143.786 65.9904 cv
143.786 65.9904 142.723 66.5082 141.974 68.6385 cv
141.226 70.7681 142.232 72.0349 142.232 72.0349 cv
142.232 72.0349 141.242 72.8988 141.196 75.258 cv
141.156 77.2551 141.838 77.9065 142.05 78.0612 cv
142.07 78.0867 142.086 78.103 142.105 78.1242 cv
142.047 78.2102 141.52 79.0149 141.366 80.5368 cv
141.194 82.224 142.289 83.4913 142.289 83.4913 cv
142.289 83.4913 141.484 84.5256 141.367 86.542 cv
141.291 87.8847 141.792 90.4074 143.772 92.341 cv
143.84 92.4126 159.101 107.671 159.174 107.743 cv
204.652 107.743 li
211.585 107.743 217.205 102.123 217.205 95.1908 cv
cp
.184314 .262745 .298039 rgb
f
177.556 37.8393 mo
177.556 39.5663 li
177.556 39.5663 181.677 39.7306 183.507 37.8393 cv
185.236 36.0545 184.112 33.5785 181.997 32.3131 cv
179.665 30.9165 175.851 31.7365 175.851 31.7365 cv
175.851 33.1177 li
175.851 33.1177 180.454 32.4817 181.896 34.6718 cv
183.336 36.8602 181.234 37.6663 177.556 37.8393 cv
cp
1 1 1 rgb
f
173.836 43.5384 mo
173.836 43.5384 182.089 45.5104 185.667 43.2506 cv
189.494 40.8331 184.832 37.9257 184.832 37.9257 cv
185.2 36.0382 li
185.2 36.0382 187.435 36.1842 188.775 39.1056 cv
190.112 42.0241 188.314 44.8908 183.882 45.6973 cv
179.648 46.4669 173.836 45.496 173.836 45.496 cv
173.836 43.5384 li
cp
f
173.836 49.5584 mo
173.836 49.5584 184.574 51.8283 189.207 48.8335 cv
193.205 46.2526 188.67 44.5736 188.67 44.5736 cv
189.561 42.6457 li
189.561 42.6457 192.229 43.0714 193.123 45.9942 cv
194.061 49.0636 190.023 51.8476 184.301 52.6057 cv
179.305 53.2676 173.836 51.9426 173.836 51.9426 cv
173.836 49.5584 li
cp
f
173.836 56.0876 mo
173.836 56.0876 180.476 59.292 186.694 58.7558 cv
192.91 58.2178 193.694 54.5908 193.257 53.1903 cv
192.747 51.5507 191.797 50.965 191.797 50.965 cv
193.794 49.4306 li
193.794 49.4306 195.903 51.1562 195.789 54.4197 cv
195.677 57.6379 192.412 61.0979 185.349 61.0979 cv
178.288 61.0979 173.836 58.2557 173.836 58.2557 cv
173.836 56.0876 li
cp
f
173.836 61.0979 mo
173.836 61.0979 180.669 66.1393 187.186 66.3041 cv
193.25 66.4584 194.984 63.6676 195.022 61.5951 cv
195.047 60.2509 194.292 59.5615 194.292 59.5615 cv
196.058 58.104 li
196.058 58.104 197.593 59.819 197.218 62.7476 cv
196.825 65.8175 192.488 69.5407 185.588 68.6385 cv
179.187 67.8011 173.836 63.6936 173.836 63.6936 cv
173.836 61.0979 li
cp
f
190.186 46.9349 mo
188.977 47.9711 li
185.868 46.2436 li
187.711 45.0363 li
190.186 46.9349 li
cp
f
189.209 52.0584 mo
187.076 53.1523 li
191.51 55.6846 li
192.718 54.3606 li
189.209 52.0584 li
cp
f
181.205 84.2379 mo
182.27 85.8799 183.441 84.1236 182.558 82.8288 cv
181.896 81.8569 179.075 78.7041 178.759 78.9706 cv
178.385 79.2882 180.139 82.5983 181.205 84.2379 cv
cp
190.876 93.0462 mo
195.966 93.0371 196.633 87.5782 196.633 87.5782 cv
196.633 87.5782 195.1 90.0341 191.402 90.6457 cv
187.573 91.2783 185.415 89.0348 185.158 89.5723 cv
184.774 90.379 187.135 93.0539 190.876 93.0462 cv
cp
191.069 88.5361 mo
196.096 88.2681 197.286 81.6292 196.94 81.3606 cv
196.595 81.0931 195.367 82.935 193.219 84.3536 cv
191.069 85.7733 186.173 83.8228 185.696 84.738 cv
185.237 85.6186 186.041 88.8056 191.069 88.5361 cv
cp
183.547 77.7912 mo
182.779 78.7891 186.29 82.0319 190.589 81.6484 cv
194.789 81.2743 196.884 77.6553 197.248 76.2572 cv
197.612 74.8554 196.986 73.4925 195.795 74.1656 cv
194.629 74.8194 194.425 77.0466 190.855 77.3344 cv
187.286 77.6212 184.343 76.7569 183.547 77.7912 cv
cp
173.836 68.7749 mo
173.111 69.8467 li
173.111 69.8467 177.061 76.2952 178.385 75.3738 cv
179.708 74.4533 173.836 68.7749 173.836 68.7749 cv
cp
196.518 65.9904 mo
196.518 65.9904 197.581 66.5082 198.33 68.6385 cv
199.077 70.7681 198.072 72.0349 198.072 72.0349 cv
198.072 72.0349 199.062 72.8988 199.108 75.258 cv
199.156 77.6183 198.188 78.1073 198.188 78.1073 cv
198.188 78.1073 198.774 78.925 198.939 80.5368 cv
199.11 82.224 198.015 83.4913 198.015 83.4913 cv
198.015 83.4913 198.821 84.5256 198.936 86.542 cv
199.045 88.4396 198.015 92.7008 193.257 94.3126 cv
188.5 95.9254 184.774 91.9533 182.126 87.9232 cv
179.477 83.894 172.282 69.4432 172.282 69.4432 cv
173.836 66.393 li
173.836 66.393 184.084 73.9062 191.337 73.9062 cv
198.591 73.9062 194.561 67.7751 194.561 67.7751 cv
196.518 65.9904 li
cp
f
194.907 71.0367 mo
192.258 68.7749 li
190.723 69.1947 li
193.794 72.4188 li
194.907 71.0367 li
cp
f
193.717 63.0921 mo
190.34 61.0979 li
188.765 61.8636 li
192.142 64.5516 li
193.717 63.0921 li
cp
f
185.557 58.104 mo
187.461 57.6803 li
180.706 53.4199 li
177.405 53.1903 li
185.557 58.104 li
cp
f
185.557 58.104 mo
187.461 57.6803 li
180.706 53.4199 li
177.405 53.1903 li
185.557 58.104 li
cp
f
174.284 37.2132 mo
173.641 36.8481 173.304 35.651 173.304 35.651 cv
170.152 35.651 li
167 35.651 li
167 35.651 166.662 36.8481 166.021 37.2132 cv
164.77 37.9257 163.416 37.7826 163.416 37.7826 cv
163.416 39.7383 li
163.416 39.7383 165.373 39.9117 166.491 40.8331 cv
167.609 41.7546 167.62 42.5592 167.62 42.5592 cv
170.152 42.5592 li
172.685 42.5592 li
172.685 42.5592 172.695 41.7546 173.812 40.8331 cv
174.93 39.9117 176.886 39.7383 176.886 39.7383 cv
176.886 37.7826 li
176.886 37.7826 175.535 37.9257 174.284 37.2132 cv
cp
f
173.089 43.5384 mo
170.152 43.5384 li
167.217 43.5384 li
167.217 43.5384 167.072 65.914 167.504 66.9109 cv
168.253 68.6385 170.152 68.6385 170.152 68.6385 cv
170.152 68.6385 172.052 68.6385 172.8 66.9109 cv
173.233 65.914 173.089 43.5384 173.089 43.5384 cv
cp
f
162.748 37.8393 mo
162.748 39.5663 li
162.748 39.5663 158.627 39.7306 156.796 37.8393 cv
155.069 36.0545 156.192 33.5785 158.307 32.3131 cv
160.639 30.9165 164.453 31.7365 164.453 31.7365 cv
164.453 33.1177 li
164.453 33.1177 159.85 32.4817 158.408 34.6718 cv
156.97 36.8602 159.07 37.6663 162.748 37.8393 cv
cp
f
166.468 43.5384 mo
166.468 43.5384 158.214 45.5104 154.639 43.2506 cv
150.809 40.8331 155.472 37.9257 155.472 37.9257 cv
155.104 36.0382 li
155.104 36.0382 152.867 36.1842 151.529 39.1056 cv
150.191 42.0241 151.99 44.8908 156.422 45.6973 cv
160.656 46.4669 166.468 45.496 166.468 45.496 cv
166.468 43.5384 li
cp
f
166.468 49.5584 mo
166.468 49.5584 155.731 51.8283 151.098 48.8335 cv
147.099 46.2526 151.635 44.5736 151.635 44.5736 cv
150.743 42.6457 li
150.743 42.6457 148.074 43.0714 147.182 45.9942 cv
146.244 49.0636 150.281 51.8476 156.003 52.6057 cv
160.999 53.2676 166.468 51.9426 166.468 51.9426 cv
166.468 49.5584 li
cp
f
166.468 56.0876 mo
166.468 56.0876 159.828 59.292 153.611 58.7558 cv
147.394 58.2178 146.611 54.5908 147.046 53.1903 cv
147.557 51.5507 148.506 50.965 148.506 50.965 cv
146.511 49.4306 li
146.511 49.4306 144.402 51.1562 144.516 54.4197 cv
144.627 57.6379 147.894 61.0979 154.954 61.0979 cv
162.015 61.0979 166.468 58.2557 166.468 58.2557 cv
166.468 56.0876 li
cp
f
166.468 61.0979 mo
166.468 61.0979 159.635 66.1393 153.119 66.3041 cv
147.054 66.4584 145.321 63.6676 145.283 61.5951 cv
145.258 60.2509 146.012 59.5615 146.012 59.5615 cv
144.247 58.104 li
144.247 58.104 142.712 59.819 143.086 62.7476 cv
143.479 65.8175 147.817 69.5407 154.717 68.6385 cv
161.117 67.8011 166.468 63.6936 166.468 63.6936 cv
166.468 61.0979 li
cp
f
150.118 46.9349 mo
151.327 47.9711 li
154.436 46.2436 li
152.594 45.0363 li
150.118 46.9349 li
cp
f
151.096 52.0584 mo
153.227 53.1523 li
148.793 55.6846 li
147.585 54.3606 li
151.096 52.0584 li
cp
f
161.546 78.9706 mo
161.229 78.7041 158.408 81.8569 157.746 82.8288 cv
156.863 84.1236 158.034 85.8799 159.1 84.2379 cv
160.165 82.5983 161.919 79.2882 161.546 78.9706 cv
cp
155.146 89.5723 mo
154.888 89.0348 152.73 91.2783 148.902 90.6457 cv
145.204 90.0341 143.671 87.5782 143.671 87.5782 cv
143.671 87.5782 144.339 93.0371 149.429 93.0462 cv
153.169 93.0539 155.529 90.379 155.146 89.5723 cv
cp
154.607 84.738 mo
154.131 83.8228 149.235 85.7733 147.087 84.3536 cv
144.937 82.935 143.709 81.0931 143.364 81.3606 cv
143.019 81.6292 144.208 88.2681 149.235 88.5361 cv
154.263 88.8056 155.068 85.6186 154.607 84.738 cv
cp
149.449 77.3344 mo
145.879 77.0466 145.675 74.8194 144.51 74.1656 cv
143.317 73.4925 142.692 74.8554 143.055 76.2572 cv
143.422 77.6553 145.516 81.2743 149.714 81.6484 cv
154.014 82.0319 157.525 78.7891 156.757 77.7912 cv
155.961 76.7569 153.018 77.6212 149.449 77.3344 cv
cp
161.919 75.3738 mo
163.244 76.2952 167.193 69.8467 167.193 69.8467 cv
166.468 68.7749 li
166.468 68.7749 160.597 74.4533 161.919 75.3738 cv
cp
145.744 67.7751 mo
145.744 67.7751 141.713 73.9062 148.967 73.9062 cv
156.22 73.9062 166.468 66.393 166.468 66.393 cv
168.022 69.4432 li
168.022 69.4432 160.827 83.894 158.178 87.9232 cv
155.529 91.9533 151.805 95.9254 147.046 94.3126 cv
142.289 92.7008 141.26 88.4396 141.367 86.542 cv
141.484 84.5256 142.289 83.4913 142.289 83.4913 cv
142.289 83.4913 141.194 82.224 141.366 80.5368 cv
141.529 78.925 142.117 78.1073 142.117 78.1073 cv
142.117 78.1073 141.149 77.6183 141.196 75.258 cv
141.242 72.8988 142.232 72.0349 142.232 72.0349 cv
142.232 72.0349 141.226 70.7681 141.974 68.6385 cv
142.723 66.5082 143.786 65.9904 143.786 65.9904 cv
145.744 67.7751 li
cp
f
145.398 71.0367 mo
148.046 68.7749 li
149.581 69.1947 li
146.511 72.4188 li
145.398 71.0367 li
cp
f
146.588 63.0921 mo
149.965 61.0979 li
151.538 61.8636 li
148.161 64.5516 li
146.588 63.0921 li
cp
f
154.747 58.104 mo
152.844 57.6803 li
159.598 53.4199 li
162.898 53.1903 li
154.747 58.104 li
cp
f
154.747 58.104 mo
152.844 57.6803 li
159.598 53.4199 li
162.898 53.1903 li
154.747 58.104 li
cp
f
172.282 71.8336 mo
172.023 71.113 171.563 70.0788 170.152 70.0788 cv
168.742 70.0788 168.281 71.113 168.022 71.8336 cv
167.764 72.5518 167.388 74.8646 168.022 75.4012 cv
168.655 75.9402 170.152 75.7563 170.152 75.7563 cv
170.152 75.7563 171.649 75.9402 172.282 75.4012 cv
172.915 74.8646 172.541 72.5518 172.282 71.8336 cv
cp
f
172.02 76.5892 mo
170.152 76.5892 li
168.284 76.5892 li
168.021 76.5892 167.809 76.8045 167.809 77.0648 cv
167.809 81.1402 li
167.809 81.5658 168.153 81.9102 168.578 81.9102 cv
170.152 81.9102 li
171.725 81.9102 li
172.151 81.9102 172.495 81.5658 172.495 81.1402 cv
172.495 77.0648 li
172.495 76.8045 172.283 76.5892 172.02 76.5892 cv
cp
f
171.849 30.4467 mo
170.152 30.4467 li
168.454 30.4467 li
168.216 30.4467 168.022 30.6105 168.022 30.8098 cv
168.022 33.9296 li
168.022 34.2563 168.335 34.52 168.721 34.52 cv
170.152 34.52 li
171.583 34.52 li
171.969 34.52 172.282 34.2563 172.282 33.9296 cv
172.282 30.8098 li
172.282 30.6105 172.089 30.4467 171.849 30.4467 cv
cp
f
171.849 25.7977 mo
170.152 25.7977 li
168.454 25.7977 li
168.216 25.7977 168.022 25.9625 168.022 26.1609 cv
168.022 29.2816 li
168.022 29.6074 168.335 29.8711 168.721 29.8711 cv
170.152 29.8711 li
171.583 29.8711 li
171.969 29.8711 172.282 29.6074 172.282 29.2816 cv
172.282 26.1609 li
172.282 25.9625 172.089 25.7977 171.849 25.7977 cv
cp
f
172.02 83.4304 mo
170.152 83.4304 li
168.284 83.4304 li
168.021 83.4304 167.809 83.6427 167.809 83.905 cv
167.809 87.9798 li
167.809 88.405 168.153 88.7494 168.578 88.7494 cv
170.152 88.7494 li
171.725 88.7494 li
172.151 88.7494 172.495 88.405 172.495 87.9798 cv
172.495 83.905 li
172.495 83.6427 172.283 83.4304 172.02 83.4304 cv
cp
f
172.495 90.7383 mo
172.495 90.4765 172.283 90.2642 172.02 90.2642 cv
170.152 90.2642 li
168.284 90.2642 li
168.021 90.2642 167.809 90.4765 167.809 90.7383 cv
167.809 94.8137 li
167.809 95.2383 168.153 95.5833 168.578 95.5833 cv
170.152 95.5833 li
171.725 95.5833 li
172.151 95.5833 172.495 95.2383 172.495 94.8137 cv
172.495 90.7383 li
cp
f
107.508 314.27 mo
107.508 321.202 101.888 326.822 94.9562 326.822 cv
25.9555 326.822 li
19.0232 326.822 13.4033 321.202 13.4033 314.27 cv
13.4033 245.27 li
13.4033 238.337 19.0232 232.717 25.9555 232.717 cv
94.9562 232.717 li
101.888 232.717 107.508 238.337 107.508 245.27 cv
107.508 314.27 li
cp
.286275 .380392 .419608 rgb
f
94.9562 326.822 mo
101.888 326.822 107.508 321.202 107.508 314.27 cv
107.508 277.303 li
107.486 277.281 107.464 277.258 107.442 277.236 cv
107.355 277.145 81.8317 251.627 81.7429 251.538 cv
75.6138 245.012 65.5213 248.236 65.5213 248.236 cv
61.7596 249.139 59.4955 251.156 59.2384 253.332 cv
59.2384 253.332 56.833 256.079 57.3841 257.146 cv
56.5582 259.555 55.1492 258.547 54.1562 258.918 cv
53.5177 259.082 52.9033 260.045 53.229 260.72 cv
56.5952 263.968 li
35.0223 263.968 li
35.6412 264.357 51.9621 280.979 52.3431 281.219 cv
50.0372 282.35 48.3047 283.872 47.442 286.301 cv
46.202 289.598 47.3699 292.105 49.4996 294.051 cv
49.5231 294.074 56.0533 300.603 56.0586 300.608 cv
56.0615 300.611 56.0634 300.613 56.0663 300.616 cv
56.1908 305.296 li
56.1908 305.296 56.9185 305.788 56.921 305.874 cv
55.1944 306.195 53.3039 306.288 51.855 306.391 cv
54.6068 308.939 li
44.5071 312.102 li
60.2195 326.786 li
60.2195 326.786 94.7664 326.822 94.9562 326.822 cv
cp
.184314 .262745 .298039 rgb
f
58.9262 276.804 mo
79.3365 263.968 li
35.0223 263.968 li
55.4317 276.804 li
55.497 279.251 li
56.565 278.912 57.7002 278.598 58.8878 278.279 cv
58.9262 276.804 li
cp
1 1 1 rgb
f
56.2743 308.417 mo
44.5071 312.102 li
69.8513 312.102 li
58.084 308.417 li
58.1052 307.64 li
57.5244 307.719 56.909 307.763 56.2566 307.766 cv
56.2743 308.417 li
cp
f
59.0814 296.799 mo
59.0151 299.257 li
60.7566 300.178 61.7716 301.158 61.5017 302.836 cv
60.9517 305.981 55.2141 306.15 51.855 306.391 cv
54.8931 307.546 62.2867 307.731 63.2609 303.024 cv
63.8922 300 61.9091 298.357 59.0814 296.799 cv
cp
f
55.6123 283.575 mo
56.1908 305.296 li
56.894 305.191 57.5696 305.054 58.1792 304.872 cv
58.7744 282.555 li
57.6301 282.868 56.5679 283.196 55.6123 283.575 cv
cp
f
54.9129 283.129 mo
58.907 281.42 92.8044 276.663 84.6196 256.166 cv
79.6382 243.724 65.5213 248.236 65.5213 248.236 cv
61.7596 249.139 59.4955 251.156 59.2384 253.332 cv
59.2384 253.332 56.833 256.079 57.3841 257.146 cv
56.5582 259.555 55.1492 258.547 54.1562 258.918 cv
53.5177 259.082 52.8908 260.106 53.229 260.72 cv
53.1661 259.985 53.9818 259.236 54.2955 259.286 cv
55.0599 259.074 56.8268 260.201 57.974 257.5 cv
60.0547 257.82 66.1372 255.822 66.9385 252.387 cv
80.5159 247.209 89.504 265.9 73.4087 273.903 cv
68.5786 276.466 63.7519 277.69 59.5604 278.81 cv
53.7296 280.36 49.0624 281.74 47.442 286.301 cv
45.2739 292.065 50.4551 295.425 55.2982 297.565 cv
55.2247 294.795 li
52.7702 293.492 48.6718 291.237 50.1943 287.435 cv
50.9859 285.371 52.6693 284.09 54.9129 283.129 cv
cp
f
326.9 95.1908 mo
326.9 102.123 321.281 107.743 314.348 107.743 cv
245.348 107.743 li
238.415 107.743 232.795 102.123 232.795 95.1908 cv
232.795 26.1902 li
232.795 19.2578 238.415 13.638 245.348 13.638 cv
314.348 13.638 li
321.281 13.638 326.9 19.2578 326.9 26.1902 cv
326.9 95.1908 li
cp
.956863 .670588 .466667 rgb
f
326.9 87.2313 mo
326.9 60.2111 li
310.675 43.9861 304.723 38.0348 296.987 30.2987 cv
295.891 29.2019 294.172 29.1443 293.147 30.168 cv
281.493 41.8223 li
282.036 42.3666 326.385 86.7168 326.9 87.2313 cv
cp
.815686 .509804 .321569 rgb
f
260.171 63.1435 mo
248.516 74.7982 li
247.493 75.823 247.551 77.5414 248.648 78.6378 cv
248.648 78.6378 277.354 107.344 277.752 107.743 cv
304.771 107.743 li
300.267 103.238 260.171 63.1435 260.171 63.1435 cv
cp
f
326.9 90.5192 mo
256.638 20.2572 275.177 38.7972 266.546 30.166 cv
265.522 29.1418 263.802 29.2019 262.707 30.2972 cv
248.649 44.3608 li
247.551 45.4532 247.493 47.1727 248.517 48.1979 cv
252.827 52.5077 278.483 78.1645 308.061 107.743 cv
314.348 107.743 li
321.281 107.743 326.9 102.123 326.9 95.1908 cv
326.9 90.5192 li
cp
f
279.018 46.9834 mo
278.486 46.4511 277.382 46.6922 276.549 47.5263 cv
265.877 58.1982 li
265.044 59.0306 264.8 60.138 265.332 60.6694 cv
280.674 76.0156 li
280.929 76.2702 281.335 76.3562 281.796 76.2534 cv
282.261 76.1501 282.746 75.872 283.144 75.4708 cv
293.82 64.7981 li
294.652 63.9635 294.893 62.86 294.362 62.3277 cv
279.018 46.9834 li
cp
293.65 92.4895 mo
293.846 92.6874 294.107 92.7931 294.387 92.795 cv
294.663 92.7931 294.922 92.685 295.116 92.4895 cv
295.313 92.2953 295.42 92.0355 295.419 91.7582 cv
295.421 91.4796 295.313 91.2163 295.116 91.0218 cv
294.918 90.8243 294.658 90.7167 294.38 90.7167 cv
294.101 90.7167 293.841 90.8238 293.646 91.0228 cv
293.243 91.4263 293.242 92.084 293.649 92.4875 cv
293.65 92.4895 li
cp
288.659 87.4999 mo
288.855 87.6978 289.117 87.803 289.395 87.802 cv
289.67 87.8025 289.932 87.6978 290.127 87.497 cv
290.322 87.3058 290.429 87.0473 290.431 86.7711 cv
290.431 86.4925 290.326 86.2307 290.128 86.0308 cv
289.723 85.6291 289.065 85.6321 288.659 86.0346 cv
288.257 86.4392 288.253 87.0944 288.659 87.497 cv
288.659 87.4999 li
cp
284.408 82.8149 mo
284.686 82.8178 284.946 82.7101 285.141 82.5142 cv
285.544 82.1087 285.546 81.4486 285.141 81.0432 cv
284.736 80.6401 284.076 80.6391 283.672 81.0432 cv
283.269 81.4486 283.267 82.1087 283.671 82.5142 cv
283.867 82.7097 284.127 82.8159 284.408 82.8149 cv
cp
280.152 77.5251 mo
280.555 77.1191 280.557 76.461 280.154 76.0579 cv
279.956 75.8595 279.694 75.7528 279.415 75.7528 cv
279.139 75.7519 278.878 75.8595 278.684 76.0574 cv
278.279 76.461 278.279 77.1211 278.685 77.527 cv
279.089 77.93 279.746 77.93 280.152 77.5251 cv
cp
275.163 72.537 mo
275.568 72.1296 275.567 71.4695 275.165 71.0679 cv
274.758 70.6624 274.099 70.6662 273.694 71.0693 cv
273.291 71.4743 273.293 72.1339 273.696 72.537 cv
274.098 72.941 274.757 72.941 275.163 72.537 cv
cp
270.173 67.5503 mo
270.37 67.3533 270.478 67.0935 270.478 66.8162 cv
270.478 66.5376 270.371 66.2772 270.174 66.0812 cv
269.769 65.6753 269.109 65.6748 268.703 66.0803 cv
268.299 66.4834 268.304 67.1438 268.71 67.5503 cv
269.113 67.9557 269.771 67.9534 270.173 67.5503 cv
cp
265.186 62.5588 mo
265.59 62.1544 265.59 61.4952 265.186 61.0907 cv
264.78 60.6871 264.122 60.6876 263.718 61.0917 cv
263.522 61.2867 263.415 61.5447 263.412 61.8199 cv
263.411 62.0996 263.522 62.3619 263.719 62.5588 cv
264.123 62.9623 264.782 62.9623 265.186 62.5588 cv
cp
260.196 57.5731 mo
260.602 57.1676 260.602 56.5081 260.198 56.1006 cv
259.793 55.6985 259.134 55.6985 258.73 56.1021 cv
258.326 56.5056 258.326 57.1648 258.73 57.5731 cv
259.135 57.9752 259.794 57.9747 260.196 57.5731 cv
cp
255.209 52.583 mo
255.613 52.1771 255.613 51.52 255.211 51.1144 cv
255.014 50.9175 254.752 50.8084 254.474 50.8109 cv
254.195 50.8089 253.935 50.9184 253.739 51.1144 cv
253.545 51.3105 253.436 51.5708 253.436 51.8476 cv
253.437 52.1267 253.544 52.3871 253.743 52.5817 cv
254.149 52.9866 254.807 52.9866 255.209 52.583 cv
cp
250.225 47.5959 mo
250.627 47.1923 250.627 46.5342 250.221 46.1268 cv
249.816 45.7233 249.156 45.7213 248.751 46.1263 cv
248.349 46.5323 248.35 47.19 248.752 47.5935 cv
249.16 47.9976 249.818 48.0019 250.225 47.5959 cv
cp
295.82 86.37 mo
296.095 86.3685 296.356 86.2604 296.551 86.0644 cv
296.955 85.6609 296.953 84.9998 296.546 84.5939 cv
296.352 84.3988 296.092 84.2898 295.814 84.2921 cv
295.538 84.2898 295.278 84.4003 295.084 84.5963 cv
294.678 84.9998 294.676 85.6599 295.084 86.0639 cv
295.28 86.2642 295.542 86.369 295.82 86.37 cv
cp
290.828 81.3823 mo
291.106 81.3813 291.367 81.2728 291.562 81.0748 cv
291.966 80.6713 291.967 80.0151 291.566 79.6082 cv
291.161 79.2042 290.502 79.206 290.098 79.6101 cv
289.899 79.8056 289.792 80.066 289.791 80.3408 cv
289.791 80.618 289.9 80.8808 290.097 81.0806 cv
290.293 81.2733 290.553 81.3813 290.828 81.3823 cv
cp
286.577 76.0916 mo
286.981 75.6875 286.981 75.0255 286.577 74.6201 cv
286.169 74.2165 285.51 74.2165 285.106 74.6201 cv
284.702 75.0236 284.703 75.6818 285.106 76.0891 cv
285.512 76.4907 286.172 76.4903 286.577 76.0916 cv
cp
266.623 56.1366 mo
267.026 55.7331 267.024 55.0711 266.617 54.6661 cv
266.216 54.2626 265.558 54.2645 265.153 54.6661 cv
264.751 55.0711 264.751 55.7312 265.155 56.1366 cv
265.559 56.5402 266.218 56.5402 266.623 56.1366 cv
cp
261.635 51.1481 mo
262.041 50.7436 262.04 50.0835 261.635 49.6799 cv
261.23 49.274 260.571 49.2726 260.165 49.6799 cv
259.76 50.0835 259.76 50.7436 260.164 51.1481 cv
260.572 51.5507 261.231 51.5507 261.635 51.1481 cv
cp
255.18 46.1595 mo
255.583 46.5639 256.24 46.5635 256.646 46.1561 cv
256.842 45.9635 256.951 45.703 256.951 45.4283 cv
256.952 45.1496 256.841 44.8893 256.646 44.6904 cv
256.24 44.2873 255.583 44.2868 255.18 44.6904 cv
254.984 44.8859 254.876 45.1458 254.875 45.4244 cv
254.875 45.7007 254.983 45.964 255.179 46.1576 cv
255.18 46.1595 li
cp
303.026 84.6789 mo
303.43 84.2734 303.431 83.6162 303.026 83.2127 cv
302.621 82.8091 301.963 82.8091 301.559 83.2127 cv
301.156 83.6162 301.155 84.2763 301.559 84.6837 cv
301.961 85.0872 302.62 85.0834 303.026 84.6789 cv
cp
296.572 79.6937 mo
296.77 79.8906 297.03 79.9958 297.31 79.9983 cv
297.587 79.9949 297.843 79.8883 298.038 79.6893 cv
298.234 79.4967 298.342 79.2397 298.344 78.9659 cv
298.344 78.6848 298.235 78.4211 298.035 78.2203 cv
297.633 77.8186 296.977 77.8186 296.572 78.2231 cv
296.374 78.4206 296.265 78.6776 296.265 78.9562 cv
296.264 79.2329 296.372 79.4919 296.567 79.687 cv
296.572 79.6937 li
cp
291.582 74.7051 mo
291.778 74.9025 292.043 75.0125 292.321 75.0087 cv
292.596 75.0072 292.855 74.9001 293.048 74.7017 cv
293.247 74.5071 293.353 74.2453 293.355 73.9667 cv
293.355 73.6919 293.246 73.4334 293.045 73.2331 cv
292.641 72.8295 291.985 72.83 291.581 73.2336 cv
291.177 73.6385 291.177 74.2991 291.582 74.7051 cv
291.582 74.7051 li
cp
267.378 50.0681 mo
267.653 50.0662 267.913 49.959 268.108 49.7635 cv
268.511 49.3591 268.514 48.699 268.11 48.2939 cv
267.706 47.8894 267.046 47.8904 266.641 48.2935 cv
266.239 48.699 266.239 49.3571 266.641 49.7635 cv
266.838 49.9595 267.1 50.0686 267.378 50.0681 cv
cp
263.12 44.7764 mo
263.318 44.577 263.427 44.3171 263.426 44.0375 cv
263.427 43.7632 263.318 43.4994 263.12 43.3058 cv
262.717 42.8999 262.059 42.9008 261.653 43.3068 cv
261.456 43.5028 261.346 43.7627 261.345 44.0385 cv
261.345 44.3171 261.454 44.577 261.651 44.773 cv
262.055 45.1794 262.717 45.1789 263.12 44.7764 cv
cp
258.132 39.7864 mo
258.536 39.3818 258.537 38.7227 258.131 38.3167 cv
257.729 37.9137 257.07 37.9156 256.662 38.3162 cv
256.259 38.7208 256.26 39.3818 256.663 39.7864 cv
257.069 40.1899 257.729 40.189 258.132 39.7864 cv
cp
304.465 78.2587 mo
304.868 77.8532 304.87 77.1946 304.465 76.7896 cv
304.268 76.5912 304.005 76.483 303.728 76.484 cv
303.451 76.4835 303.189 76.5927 302.993 76.7896 cv
302.799 76.9841 302.691 77.2402 302.692 77.5179 cv
302.69 77.797 302.798 78.0579 302.999 78.2568 cv
303.401 78.6627 304.06 78.6623 304.465 78.2587 cv
cp
299.476 73.2662 mo
299.878 72.8646 299.879 72.2036 299.476 71.7996 cv
299.071 71.3936 298.409 71.3936 298.005 71.7991 cv
297.809 71.996 297.704 72.2569 297.703 72.5331 cv
297.703 72.8089 297.811 73.0721 298.01 73.2681 cv
298.413 73.6722 299.071 73.6717 299.476 73.2662 cv
cp
294.487 68.2786 mo
294.89 67.8732 294.89 67.215 294.485 66.8129 cv
294.083 66.4079 293.424 66.4079 293.018 66.8114 cv
292.613 67.2155 292.613 67.8732 293.016 68.2786 cv
293.422 68.6821 294.082 68.6821 294.487 68.2786 cv
cp
273.8 48.6307 mo
274.078 48.6283 274.338 48.5232 274.534 48.3252 cv
274.73 48.1292 274.839 47.8674 274.839 47.593 cv
274.839 47.3144 274.73 47.054 274.535 46.858 cv
274.339 46.662 274.076 46.5519 273.798 46.5524 cv
273.522 46.5524 273.26 46.6601 273.065 46.858 cv
272.867 47.054 272.761 47.3148 272.758 47.5891 cv
272.761 47.8659 272.87 48.1292 273.068 48.3271 cv
273.263 48.5232 273.524 48.6307 273.8 48.6307 cv
cp
269.544 43.3376 mo
269.742 43.1415 269.85 42.8822 269.85 42.6044 cv
269.85 42.3301 269.742 42.0668 269.545 41.8665 cv
269.348 41.6725 269.086 41.5648 268.81 41.5648 cv
268.531 41.5667 268.272 41.6725 268.076 41.8708 cv
267.881 42.0644 267.773 42.3258 267.771 42.6001 cv
267.772 42.8817 267.881 43.1435 268.077 43.3376 cv
268.481 43.7411 269.141 43.7416 269.544 43.3376 cv
cp
264.555 38.3485 mo
264.962 37.9464 264.961 37.2872 264.553 36.8789 cv
264.151 36.4753 263.491 36.4753 263.089 36.8827 cv
262.892 37.0773 262.785 37.3382 262.783 37.6144 cv
262.785 37.8906 262.892 38.1501 263.086 38.3499 cv
263.494 38.7535 264.154 38.7535 264.555 38.3485 cv
cp
310.154 77.123 mo
310.431 77.123 310.69 77.0163 310.884 76.8184 cv
311.289 76.4129 311.291 75.7563 310.889 75.3493 cv
310.692 75.1533 310.429 75.0476 310.152 75.0452 cv
309.876 75.0476 309.615 75.1533 309.42 75.3512 cv
309.017 75.7571 309.019 76.4149 309.42 76.8203 cv
309.615 77.0163 309.876 77.123 310.154 77.123 cv
cp
304.432 71.8332 mo
304.628 72.0287 304.888 72.1364 305.166 72.1349 cv
305.443 72.1344 305.703 72.0267 305.899 71.8289 cv
306.095 71.6324 306.201 71.3735 306.202 71.0972 cv
306.202 70.8209 306.095 70.5601 305.899 70.3636 cv
305.493 69.9605 304.837 69.9581 304.432 70.3616 cv
304.237 70.5601 304.128 70.8209 304.126 71.0967 cv
304.128 71.3735 304.237 71.6328 304.432 71.8332 cv
304.432 71.8332 li
cp
300.909 66.8412 mo
301.106 66.6472 301.214 66.3892 301.215 66.1148 cv
301.217 65.8371 301.108 65.573 300.911 65.3722 cv
300.506 64.9709 299.846 64.9705 299.441 65.3722 cv
299.037 65.7795 299.035 66.4357 299.44 66.8393 cv
299.845 67.2448 300.507 67.2453 300.909 66.8412 cv
cp
295.924 61.8584 mo
296.329 61.4533 296.329 60.7947 295.924 60.3864 cv
295.52 59.9815 294.861 59.9815 294.454 60.3864 cv
294.05 60.7924 294.049 61.45 294.453 61.8555 cv
294.86 62.2595 295.519 62.2624 295.924 61.8584 cv
cp
290.936 56.8679 mo
291.34 56.4648 291.339 55.8033 290.936 55.3992 cv
290.528 54.9933 289.869 54.9914 289.465 55.3969 cv
289.059 55.8023 289.059 56.4609 289.465 56.8645 cv
289.871 57.2714 290.531 57.2723 290.936 56.8679 cv
cp
285.947 51.8788 mo
286.142 51.6842 286.25 51.4233 286.253 51.1476 cv
286.253 50.868 286.142 50.6081 285.946 50.4101 cv
285.541 50.0052 284.883 50.0057 284.478 50.4096 cv
284.073 50.8142 284.073 51.4733 284.475 51.8783 cv
284.883 52.2828 285.54 52.2828 285.947 51.8788 cv
cp
279.49 46.8917 mo
279.894 47.2952 280.552 47.2933 280.958 46.894 cv
281.362 46.4861 281.362 45.828 280.958 45.4211 cv
280.761 45.2256 280.499 45.1161 280.221 45.1166 cv
279.944 45.1194 279.685 45.2256 279.49 45.4225 cv
279.293 45.6152 279.183 45.877 279.184 46.1542 cv
279.183 46.4304 279.293 46.6913 279.489 46.8887 cv
279.49 46.8917 li
cp
275.97 41.8992 mo
276.166 41.706 276.273 41.4467 276.273 41.168 cv
276.273 40.8923 276.166 40.6323 275.969 40.4349 cv
275.565 40.0314 274.906 40.0314 274.502 40.433 cv
274.096 40.8384 274.096 41.4975 274.501 41.904 cv
274.907 42.3046 275.565 42.3056 275.97 41.8992 cv
cp
270.982 36.913 mo
271.386 36.5089 271.385 35.8489 270.98 35.4449 cv
270.785 35.2493 270.525 35.1417 270.245 35.1417 cv
269.97 35.1422 269.709 35.2484 269.516 35.4454 cv
269.317 35.6419 269.21 35.9037 269.21 36.1813 cv
269.207 36.4571 269.316 36.7174 269.512 36.9125 cv
269.917 37.318 270.575 37.3185 270.982 36.913 cv
cp
265.993 31.9244 mo
266.397 31.5209 266.398 30.8618 265.992 30.4558 cv
265.588 30.0522 264.928 30.0512 264.523 30.4558 cv
264.12 30.8613 264.118 31.5194 264.522 31.923 cv
264.929 32.3304 265.59 32.3284 265.993 31.9244 cv
cp
311.178 74.7992 mo
312.202 75.8221 312.144 77.5434 311.047 78.6396 cv
296.987 92.6989 li
296.461 93.2254 295.759 93.5348 295.039 93.5598 cv
294.321 93.5838 293.639 93.3215 293.147 92.8286 cv
248.517 48.1979 li
247.493 47.1727 247.551 45.4532 248.649 44.3608 cv
262.707 30.2972 li
263.802 29.2019 265.522 29.1418 266.546 30.166 cv
311.178 74.7992 li
cp
1 1 1 rgb
f
281.493 41.8223 mo
293.147 30.168 li
294.172 29.1443 295.891 29.2019 296.987 30.2987 cv
311.047 44.3589 li
311.573 44.8845 311.884 45.5868 311.907 46.3051 cv
311.933 47.0252 311.67 47.7059 311.178 48.1989 cv
299.523 59.8527 li
281.493 41.8223 li
cp
310.838 47.6958 mo
311.035 47.4998 311.142 47.2365 311.142 46.9589 cv
311.142 46.6822 311.034 46.4232 310.838 46.2291 cv
310.643 46.0326 310.384 45.928 310.108 45.9275 cv
309.828 45.9241 309.566 46.0326 309.37 46.2286 cv
309.173 46.4256 309.065 46.6879 309.065 46.9647 cv
309.065 47.2452 309.173 47.5032 309.37 47.7001 cv
309.774 48.1022 310.433 48.1042 310.836 47.6958 cv
310.838 47.6958 li
cp
305.848 52.6864 mo
306.046 52.4918 306.151 52.2294 306.151 51.9504 cv
306.151 51.676 306.045 51.4133 305.847 51.2172 cv
305.653 51.0232 305.395 50.9156 305.121 50.9141 cv
304.84 50.9136 304.578 51.0202 304.381 51.2158 cv
303.977 51.6227 303.979 52.2819 304.383 52.6864 cv
304.788 53.0899 305.442 53.0899 305.846 52.6864 cv
305.848 52.6864 li
cp
301.164 56.938 mo
301.167 56.6594 301.057 56.3999 300.863 56.2039 cv
300.457 55.8023 299.796 55.8003 299.391 56.202 cv
298.988 56.6089 298.987 57.27 299.391 57.6749 cv
299.796 58.0761 300.457 58.0785 300.86 57.6749 cv
301.057 57.477 301.167 57.2166 301.164 56.938 cv
cp
304.718 45.5272 mo
304.717 45.2486 304.609 44.9892 304.412 44.7951 cv
304.01 44.3892 303.349 44.3925 302.942 44.7985 cv
302.747 44.9936 302.639 45.2544 302.641 45.5316 cv
302.64 45.8078 302.747 46.0682 302.944 46.2623 cv
303.349 46.6668 304.009 46.6668 304.414 46.2623 cv
304.611 46.0663 304.718 45.803 304.718 45.5272 cv
cp
299.731 50.5168 mo
299.73 50.2401 299.62 49.9788 299.424 49.7847 cv
299.02 49.3797 298.363 49.3797 297.957 49.7808 cv
297.552 50.1843 297.553 50.8426 297.957 51.248 cv
298.154 51.446 298.413 51.5535 298.691 51.553 cv
298.965 51.5555 299.23 51.4465 299.428 51.248 cv
299.623 51.052 299.728 50.7926 299.731 50.5168 cv
cp
303.027 38.3192 mo
302.622 37.9156 301.965 37.9137 301.56 38.3192 cv
301.158 38.7251 301.157 39.3818 301.56 39.7864 cv
301.964 40.1894 302.624 40.1894 303.031 39.7859 cv
303.434 39.3828 303.432 38.7247 303.027 38.3192 cv
cp
298.042 44.773 mo
298.238 44.5756 298.345 44.3157 298.346 44.0356 cv
298.344 43.7579 298.236 43.5018 298.038 43.3068 cv
297.846 43.1118 297.588 43.0032 297.314 43.0013 cv
297.032 43.0017 296.768 43.1098 296.569 43.3088 cv
296.167 43.7127 296.167 44.3695 296.571 44.774 cv
296.769 44.9719 297.026 45.0781 297.304 45.0786 cv
297.582 45.0814 297.839 44.9743 298.035 44.7783 cv
298.042 44.773 li
cp
293.052 49.7635 mo
293.25 49.5666 293.359 49.3043 293.357 49.0246 cv
293.357 48.749 293.249 48.4905 293.052 48.2987 cv
292.856 48.0994 292.594 47.9927 292.317 47.9908 cv
292.042 47.9908 291.782 48.1004 291.581 48.3021 cv
291.177 48.7057 291.177 49.3619 291.583 49.7659 cv
291.989 50.1671 292.646 50.1671 293.052 49.7635 cv
293.052 49.7635 li
cp
296.608 36.8809 mo
296.201 36.4768 295.543 36.4753 295.138 36.8809 cv
294.94 37.0768 294.832 37.3396 294.832 37.6168 cv
294.834 37.8926 294.941 38.1558 295.139 38.3519 cv
295.333 38.5469 295.589 38.6535 295.865 38.6535 cv
296.144 38.655 296.407 38.5459 296.606 38.3461 cv
297.009 37.9426 297.011 37.2863 296.608 36.8809 cv
cp
291.614 41.8685 mo
291.212 41.4673 290.553 41.4673 290.148 41.8685 cv
289.743 42.2734 289.742 42.9359 290.148 43.3414 cv
290.344 43.5359 290.603 43.6431 290.881 43.6431 cv
291.158 43.6431 291.42 43.5336 291.616 43.3356 cv
292.02 42.932 292.021 42.2734 291.614 41.8685 cv
cp
295.471 31.1932 mo
295.472 30.9141 295.364 30.6556 295.167 30.4596 cv
294.763 30.0565 294.105 30.0542 293.699 30.4558 cv
293.502 30.6537 293.395 30.9165 293.395 31.1927 cv
293.396 31.4709 293.503 31.7308 293.7 31.9248 cv
294.105 32.3284 294.765 32.3265 295.169 31.9244 cv
295.364 31.7293 295.471 31.4704 295.471 31.1932 cv
cp
290.182 36.9125 mo
290.375 36.7174 290.484 36.4571 290.484 36.1803 cv
290.482 35.9037 290.375 35.6414 290.179 35.4477 cv
289.982 35.2493 289.722 35.1417 289.446 35.1451 cv
289.169 35.1451 288.908 35.2493 288.712 35.4472 cv
288.307 35.8527 288.306 36.5089 288.712 36.9149 cv
288.908 37.1085 289.169 37.2185 289.444 37.218 cv
289.722 37.218 289.983 37.1085 290.182 36.9125 cv
290.182 36.9125 li
cp
285.19 40.4349 mo
284.995 40.2389 284.738 40.1313 284.463 40.1313 cv
284.186 40.1293 283.921 40.238 283.721 40.433 cv
283.316 40.8404 283.317 41.5005 283.722 41.9059 cv
284.126 42.3094 284.785 42.3094 285.189 41.9059 cv
285.594 41.5005 285.594 40.8389 285.19 40.4349 cv
cp
f
278.201 81.1738 mo
266.547 92.8286 li
266.054 93.3215 265.374 93.5838 264.654 93.5579 cv
263.936 93.5343 263.233 93.2245 262.708 92.6979 cv
248.648 78.6378 li
247.551 77.5414 247.493 75.823 248.516 74.7982 cv
260.171 63.1435 li
278.201 81.1738 li
cp
266.045 92.4875 mo
266.453 92.0835 266.451 91.4253 266.05 91.0213 cv
265.852 90.8243 265.594 90.7157 265.314 90.7157 cv
265.037 90.7157 264.775 90.8243 264.578 91.0213 cv
264.382 91.2173 264.273 91.4782 264.277 91.7587 cv
264.277 92.0355 264.382 92.2948 264.578 92.4899 cv
264.773 92.6854 265.031 92.7936 265.308 92.7931 cv
265.585 92.7936 265.849 92.6864 266.045 92.4895 cv
266.045 92.4875 li
cp
271.035 87.497 mo
271.439 87.0939 271.439 86.4392 271.035 86.0337 cv
270.631 85.6301 269.972 85.6286 269.565 86.0312 cv
269.369 86.2282 269.263 86.4915 269.263 86.772 cv
269.264 87.0464 269.372 87.3044 269.566 87.4975 cv
269.762 87.6954 270.024 87.8025 270.299 87.8025 cv
270.578 87.802 270.841 87.6973 271.035 87.4984 cv
271.035 87.497 li
cp
276.024 82.5118 mo
276.427 82.1077 276.425 81.4471 276.024 81.0427 cv
275.618 80.6377 274.958 80.6396 274.551 81.0427 cv
274.149 81.4471 274.151 82.1082 274.553 82.5137 cv
274.749 82.7088 275.008 82.8178 275.287 82.8149 cv
275.565 82.8173 275.826 82.7083 276.024 82.5118 cv
cp
264.611 86.0649 mo
265.016 85.6604 265.016 84.9998 264.611 84.5958 cv
264.417 84.3988 264.157 84.2908 263.88 84.2912 cv
263.603 84.2903 263.343 84.3983 263.147 84.5939 cv
262.741 84.9998 262.738 85.6604 263.144 86.0629 cv
263.338 86.2604 263.598 86.3675 263.876 86.369 cv
264.152 86.369 264.415 86.2619 264.611 86.0649 cv
cp
269.597 81.0792 mo
269.795 80.8808 269.904 80.617 269.902 80.3417 cv
269.902 80.0641 269.795 79.8051 269.597 79.6091 cv
269.191 79.2042 268.533 79.2032 268.13 79.6082 cv
267.728 80.0141 267.728 80.6713 268.133 81.0748 cv
268.328 81.2708 268.589 81.3813 268.866 81.3823 cv
269.141 81.3799 269.401 81.2733 269.597 81.0792 cv
cp
258.135 84.6817 mo
258.539 84.2753 258.538 83.6153 258.135 83.2112 cv
257.731 82.8081 257.074 82.8091 256.668 83.2107 cv
256.263 83.6162 256.265 84.2734 256.668 84.6784 cv
257.073 85.083 257.732 85.0848 258.135 84.6817 cv
cp
263.127 79.687 mo
263.323 79.491 263.43 79.2325 263.427 78.9557 cv
263.427 78.6776 263.321 78.4196 263.123 78.2222 cv
262.718 77.8182 262.061 77.8172 261.658 78.2198 cv
261.459 78.4186 261.35 78.6834 261.35 78.9649 cv
261.352 79.2387 261.461 79.4967 261.656 79.6893 cv
261.851 79.8868 262.107 79.9949 262.385 79.9973 cv
262.664 79.9958 262.924 79.8896 263.122 79.6932 cv
263.127 79.687 li
cp
268.112 74.7031 mo
268.516 74.2976 268.516 73.64 268.114 73.2346 cv
267.711 72.8286 267.055 72.8286 266.651 73.2321 cv
266.449 73.4334 266.34 73.6929 266.34 73.9686 cv
266.342 74.2453 266.448 74.5066 266.647 74.7031 cv
266.839 74.8997 267.098 75.0082 267.374 75.0082 cv
267.653 75.0097 267.915 74.9016 268.112 74.7031 cv
268.112 74.7031 li
cp
256.695 78.2568 mo
256.895 78.0583 257.004 77.7955 257.002 77.5154 cv
257.002 77.2398 256.896 76.9837 256.701 76.79 cv
256.505 76.5927 256.241 76.4845 255.966 76.4835 cv
255.689 76.483 255.426 76.5912 255.23 76.7896 cv
254.824 77.1941 254.826 77.8527 255.23 78.2587 cv
255.635 78.6618 256.291 78.6603 256.695 78.2568 cv
cp
261.684 73.2672 mo
261.882 73.0707 261.992 72.8089 261.992 72.5322 cv
261.992 72.2545 261.884 71.9951 261.69 71.7996 cv
261.285 71.3941 260.623 71.3941 260.217 71.7996 cv
259.816 72.2045 259.816 72.8627 260.217 73.2653 cv
260.623 73.6717 261.281 73.6707 261.684 73.2672 cv
cp
250.274 76.8203 mo
250.675 76.4158 250.677 75.7563 250.274 75.3512 cv
250.08 75.1542 249.819 75.0472 249.542 75.0452 cv
249.266 75.0452 249.003 75.1533 248.805 75.3503 cv
248.403 75.7558 248.406 76.4139 248.808 76.818 cv
249.005 77.0158 249.263 77.1225 249.542 77.1225 cv
249.819 77.1225 250.078 77.0158 250.274 76.8203 cv
cp
255.261 71.8327 mo
255.457 71.6333 255.567 71.3735 255.567 71.0948 cv
255.567 70.82 255.457 70.5591 255.263 70.3626 cv
254.858 69.9571 254.202 69.9581 253.796 70.3626 cv
253.598 70.5591 253.494 70.82 253.494 71.0972 cv
253.491 71.3735 253.598 71.6328 253.796 71.8298 cv
253.99 72.0263 254.252 72.1329 254.529 72.1354 cv
254.806 72.1354 255.066 72.0263 255.261 71.8327 cv
255.261 71.8327 li
cp
260.255 66.8402 mo
260.658 66.4357 260.658 65.7781 260.255 65.3725 cv
259.849 64.9686 259.189 64.9681 258.782 65.3717 cv
258.587 65.572 258.478 65.8366 258.48 66.1134 cv
258.48 66.3892 258.588 66.6457 258.784 66.8407 cv
259.187 67.2443 259.849 67.2443 260.255 66.8402 cv
cp
f
107.508 204.73 mo
107.508 211.663 101.888 217.283 94.9562 217.283 cv
25.9555 217.283 li
19.0232 217.283 13.4033 211.663 13.4033 204.73 cv
13.4033 135.729 li
13.4033 128.797 19.0232 123.177 25.9555 123.177 cv
94.9562 123.177 li
101.888 123.177 107.508 128.797 107.508 135.729 cv
107.508 204.73 li
cp
.737255 .384314 .65098 rgb
f
107.508 204.73 mo
107.508 162.647 li
107.426 162.56 93.696 148.825 93.6172 148.756 cv
92.9812 148.068 92.0588 147.625 91.0191 147.625 cv
44.8564 147.625 li
43.1966 147.625 41.813 148.732 41.4714 150.208 cv
41.382 150.192 li
41.382 150.192 40.7959 150.332 26.436 153.814 cv
26.436 165.832 26.436 186.399 26.436 186.399 cv
57.5191 217.283 li
94.9562 217.283 li
101.888 217.283 107.508 211.663 107.508 204.73 cv
cp
.521569 .262745 .458824 rgb
f
89.7956 152.147 mo
89.7956 151.917 89.6193 151.731 89.4011 151.731 cv
66.6493 151.731 li
66.4312 151.731 66.2544 151.917 66.2544 152.147 cv
66.2544 159.273 li
66.2544 159.504 66.4312 159.689 66.6493 159.689 cv
89.4011 159.689 li
89.6193 159.689 89.7956 159.504 89.7956 159.273 cv
89.7956 152.147 li
cp
89.2834 158.942 mo
89.2834 159.151 89.1148 159.32 88.9063 159.32 cv
67.1432 159.32 li
66.9352 159.32 66.766 159.151 66.766 158.942 cv
66.766 152.479 li
66.766 152.27 66.9352 152.102 67.1432 152.102 cv
88.9063 152.102 li
89.1148 152.102 89.2834 152.27 89.2834 152.479 cv
89.2834 158.942 li
cp
1 1 1 rgb
f
72.3124 162.4 mo
72.2831 162.4 72.2572 162.41 72.2283 162.418 cv
67.6169 162.418 li
67.5904 162.41 67.5626 162.4 67.5361 162.4 cv
67.1811 162.4 66.8933 163.021 66.8933 163.789 cv
66.8933 164.556 67.1811 165.179 67.5361 165.179 cv
67.5361 165.179 li
72.3124 165.179 li
72.666 165.179 72.9528 164.556 72.9528 163.789 cv
72.9528 163.021 72.666 162.4 72.3124 162.4 cv
cp
f
75.6383 163.789 mo
75.6383 163.021 76.2585 162.4 77.0271 162.4 cv
77.7939 162.4 78.4156 163.021 78.4156 163.789 cv
78.4156 164.556 77.7939 165.179 77.0271 165.179 cv
76.2585 165.179 75.6383 164.556 75.6383 163.789 cv
cp
f
80.0994 163.789 mo
80.0994 163.021 80.723 162.4 81.4888 162.4 cv
82.256 162.4 82.8771 163.021 82.8771 163.789 cv
82.8771 164.556 82.256 165.179 81.4888 165.179 cv
80.723 165.179 80.0994 164.556 80.0994 163.789 cv
cp
f
84.5639 163.789 mo
84.5639 163.021 85.1855 162.4 85.9527 162.4 cv
86.7205 162.4 87.3421 163.021 87.3421 163.789 cv
87.3421 164.556 86.7205 165.179 85.9527 165.179 cv
85.1855 165.179 84.5639 164.556 84.5639 163.789 cv
cp
f
72.3124 167.052 mo
72.2831 167.052 72.2572 167.061 72.2283 167.069 cv
67.6169 167.069 li
67.5904 167.061 67.5626 167.052 67.5361 167.052 cv
67.1811 167.052 66.8933 167.672 66.8933 168.441 cv
66.8933 169.207 67.1811 169.831 67.5361 169.831 cv
67.5361 169.831 li
72.3124 169.831 li
72.666 169.831 72.9528 169.207 72.9528 168.441 cv
72.9528 167.672 72.666 167.052 72.3124 167.052 cv
cp
f
88.7559 182.079 mo
88.7271 182.079 88.7002 182.089 88.6738 182.096 cv
84.0613 182.096 li
84.034 182.089 84.0085 182.079 83.9792 182.079 cv
83.6242 182.079 83.3379 182.699 83.3379 183.467 cv
83.3379 184.236 83.6242 184.858 83.9792 184.858 cv
83.9792 184.858 li
88.7559 184.858 li
89.1095 184.858 89.3958 184.236 89.3958 183.467 cv
89.3958 182.699 89.1095 182.079 88.7559 182.079 cv
cp
80.5327 182.079 mo
80.5039 182.079 80.4784 182.089 80.4501 182.096 cv
75.8396 182.096 li
75.8131 182.089 75.7858 182.079 75.7574 182.079 cv
75.4028 182.079 75.1161 182.699 75.1161 183.467 cv
75.1161 184.236 75.4028 184.858 75.7574 184.858 cv
75.7574 184.858 li
80.5327 184.858 li
80.8863 184.858 81.1746 184.236 81.1746 183.467 cv
81.1746 182.699 80.8863 182.079 80.5327 182.079 cv
cp
72.3124 182.079 mo
72.2831 182.079 72.2572 182.089 72.2283 182.096 cv
67.6169 182.096 li
67.5904 182.089 67.5626 182.079 67.5361 182.079 cv
67.1811 182.079 66.8933 182.699 66.8933 183.467 cv
66.8933 184.236 67.1811 184.858 67.5361 184.858 cv
67.5361 184.858 li
72.3124 184.858 li
72.666 184.858 72.9528 184.236 72.9528 183.467 cv
72.9528 182.699 72.666 182.079 72.3124 182.079 cv
cp
91.1306 151.84 mo
91.1306 150.862 90.337 150.068 89.3584 150.068 cv
66.6911 150.068 li
65.7125 150.068 64.9189 150.862 64.9189 151.84 cv
64.9189 176.581 li
64.9189 177.56 65.7125 178.353 66.6911 178.353 cv
89.3584 178.353 li
90.337 178.353 91.1306 177.56 91.1306 176.581 cv
91.1306 151.84 li
cp
62.4485 153.071 mo
42.8747 149.757 li
42.8747 186.901 li
62.4597 186.901 li
62.4485 153.071 li
cp
94.4887 189.545 mo
94.4887 191.363 92.9341 192.834 91.0191 192.834 cv
44.8564 192.834 li
42.94 192.834 41.3864 191.363 41.3864 189.545 cv
41.3864 150.915 li
41.3864 149.098 42.94 147.625 44.8564 147.625 cv
91.0191 147.625 li
92.9341 147.625 94.4887 149.098 94.4887 150.915 cv
94.4887 189.545 li
cp
f
75.6383 168.441 mo
75.6383 167.673 76.2585 167.052 77.0271 167.052 cv
77.7939 167.052 78.4156 167.673 78.4156 168.441 cv
78.4156 169.207 77.7939 169.831 77.0271 169.831 cv
76.2585 169.831 75.6383 169.207 75.6383 168.441 cv
cp
f
80.0994 168.441 mo
80.0994 167.673 80.723 167.052 81.4888 167.052 cv
82.256 167.052 82.8771 167.673 82.8771 168.441 cv
82.8771 169.207 82.256 169.831 81.4888 169.831 cv
80.723 169.831 80.0994 169.207 80.0994 168.441 cv
cp
f
84.5639 168.441 mo
84.5639 167.673 85.1855 167.052 85.9527 167.052 cv
86.7205 167.052 87.3421 167.673 87.3421 168.441 cv
87.3421 169.207 86.7205 169.831 85.9527 169.831 cv
85.1855 169.831 84.5639 169.207 84.5639 168.441 cv
cp
f
75.6383 173.091 mo
75.6383 172.324 76.2585 171.703 77.0271 171.703 cv
77.7939 171.703 78.4156 172.324 78.4156 173.091 cv
78.4156 173.859 77.7939 174.48 77.0271 174.48 cv
76.2585 174.48 75.6383 173.859 75.6383 173.091 cv
cp
f
80.0994 173.091 mo
80.0994 172.324 80.723 171.703 81.4888 171.703 cv
82.256 171.703 82.8771 172.324 82.8771 173.091 cv
82.8771 173.859 82.256 174.48 81.4888 174.48 cv
80.723 174.48 80.0994 173.859 80.0994 173.091 cv
cp
f
84.5639 173.091 mo
84.5639 172.324 85.1855 171.703 85.9527 171.703 cv
86.7205 171.703 87.3421 172.324 87.3421 173.091 cv
87.3421 173.859 86.7205 174.48 85.9527 174.48 cv
85.1855 174.48 84.5639 173.859 84.5639 173.091 cv
cp
f
81.335 159.002 mo
80.661 153.855 li
79.8381 157.4 li
79.2317 155.007 li
79.1482 155.308 li
79.0747 155.569 78.7768 155.752 78.4242 155.752 cv
77.7637 155.752 li
77.5047 155.752 77.2751 155.881 77.227 156.054 cv
76.9858 156.93 li
76.5314 155.011 li
75.7041 159.001 li
75.0296 153.856 li
74.2071 157.4 li
73.6009 155.007 li
73.5167 155.308 li
73.4442 155.569 73.1469 155.752 72.7933 155.752 cv
72.1332 155.752 li
71.8709 155.752 71.6456 155.879 71.5976 156.054 cv
71.355 156.93 li
70.8995 155.011 li
70.0741 159.002 li
69.4002 153.855 li
68.5753 157.4 li
67.9695 155.007 li
67.8869 155.308 li
67.8134 155.569 67.5159 155.752 67.1619 155.752 cv
66.7737 155.752 li
66.7737 155.557 li
67.1619 155.557 li
67.4242 155.557 67.65 155.431 67.6994 155.257 cv
67.9782 154.248 li
68.5676 156.575 li
69.453 152.764 li
70.1174 157.832 li
70.886 154.114 li
71.3693 156.146 li
71.4093 156.002 li
71.4808 155.74 71.7786 155.557 72.1332 155.557 cv
72.7933 155.557 li
73.0556 155.557 73.2809 155.431 73.3289 155.257 cv
73.6095 154.248 li
74.199 156.575 li
75.0829 152.764 li
75.7473 157.833 li
76.517 154.114 li
77.0003 156.145 li
77.0391 156.002 li
77.1118 155.74 77.4101 155.557 77.7637 155.557 cv
78.4242 155.557 li
78.6856 155.557 78.9109 155.431 78.9609 155.257 cv
79.2409 154.248 li
79.8289 156.575 li
80.7139 152.764 li
81.3783 157.832 li
82.1484 154.114 li
82.6316 156.146 li
82.671 156.002 li
82.7431 155.74 83.0396 155.557 83.3945 155.557 cv
84.0541 155.557 li
84.3164 155.557 84.5422 155.431 84.5903 155.257 cv
84.8709 154.248 li
85.4608 156.575 li
86.3452 152.764 li
87.0081 157.833 li
87.7783 154.114 li
88.2616 156.145 li
88.3024 156.002 li
88.3726 155.74 88.6704 155.557 89.0245 155.557 cv
89.2973 155.557 li
89.2973 155.752 li
89.0245 155.752 li
88.7661 155.752 88.5364 155.881 88.4893 156.054 cv
88.2472 156.93 li
87.7922 155.011 li
86.9654 159.001 li
86.2919 153.856 li
85.468 157.4 li
84.8622 155.007 li
84.7781 155.308 li
84.7056 155.569 84.4077 155.752 84.0541 155.752 cv
83.3945 155.752 li
83.1322 155.752 82.9064 155.879 82.8584 156.054 cv
82.6173 156.93 li
82.1609 155.011 li
81.335 159.002 li
cp
f
61.2625 184.424 mo
61.2625 155.41 li
41.6708 152.168 li
41.6708 181.182 li
61.2625 184.424 li
cp
41.382 150.192 mo
61.2625 153.814 li
61.2625 186.399 li
41.382 182.778 li
41.382 150.192 li
cp
f
41.1572 181.182 mo
41.1572 152.168 li
26.6502 155.41 li
26.6502 184.424 li
41.1572 181.182 li
cp
41.372 182.778 mo
26.436 186.399 li
26.436 153.814 li
41.372 150.192 li
41.372 182.778 li
cp
f
56.3872 167.269 mo
56.2326 159.49 li
54.1418 164.784 li
53.6094 160.993 li
53.339 161.908 li
53.1536 162.24 52.6265 162.386 52.0534 162.281 cv
50.9144 162.08 li
50.4344 161.994 49.9713 162.106 49.8392 162.339 cv
49.3449 163.21 li
48.7425 160.04 li
46.6834 165.532 li
46.3053 158.156 li
44.4221 163.063 li
43.9407 159.627 li
43.6126 160.202 li
43.431 160.52 42.9732 160.507 42.3914 160.489 cv
42.3592 160.488 li
41.6708 160.459 li
41.679 160.265 li
42.3962 160.294 li
42.9122 160.311 43.3205 160.322 43.4435 160.106 cv
44.0546 159.037 li
44.5115 162.29 li
46.4528 157.228 li
46.8304 164.586 li
48.8044 159.321 li
49.4376 162.652 li
49.6692 162.242 li
49.8469 161.931 50.3744 161.785 50.9489 161.889 cv
52.0876 162.09 li
52.568 162.177 53.0287 162.066 53.1618 161.834 cv
53.6762 160.072 li
54.2321 164.026 li
56.4074 158.515 li
56.5621 166.302 li
58.723 160.878 li
59.1693 164.356 li
59.3874 163.969 li
59.5652 163.659 60.0926 163.514 60.6672 163.616 cv
61.2793 163.724 li
61.2452 163.916 li
60.6326 163.808 li
60.1508 163.721 59.6891 163.833 59.5575 164.067 cv
59.0506 164.961 li
58.6255 161.649 li
56.3872 167.269 li
cp
f
31.6753 167.071 mo
30.5036 159.57 li
29.4323 165.132 li
28.4609 161.848 li
27.9435 163.136 li
27.758 163.417 27.5457 163.455 27.2767 163.503 cv
27.2123 163.515 27.1407 163.527 27.0649 163.544 cv
26.4499 163.631 li
26.423 163.439 li
27.0307 163.352 li
27.1027 163.336 27.1753 163.322 27.2421 163.311 cv
27.501 163.266 27.6428 163.241 27.771 163.047 cv
28.4887 161.257 li
29.3914 164.31 li
30.5238 158.437 li
31.6282 165.508 li
32.1898 159.594 li
32.7452 162.818 li
32.8442 162.437 33.0507 162.008 33.4836 161.945 cv
34.333 161.76 li
34.687 161.682 34.9531 161.438 34.9671 161.177 cv
34.971 161.151 li
35.4422 159.738 li
36.5458 162.865 li
37.8328 156.611 li
38.955 163.999 li
39.7324 158.019 li
40.0859 161.164 li
40.1964 160.787 40.4053 160.386 40.7988 160.352 cv
41.3575 160.274 li
41.3845 160.466 li
40.8204 160.546 li
40.3391 160.587 40.181 161.498 40.1608 161.846 cv
39.9667 161.851 li
39.7179 159.638 li
38.9699 165.394 li
37.8039 157.718 li
36.5952 163.59 li
35.4475 160.339 li
35.1598 161.201 li
35.1343 161.543 34.8066 161.855 34.3747 161.949 cv
33.5178 162.138 li
32.8898 162.229 32.8509 163.425 32.8509 163.437 cv
32.6564 163.451 li
32.2461 161.065 li
31.6753 167.071 li
cp
f
56.3872 178.954 mo
56.2326 171.174 li
54.1418 176.468 li
53.6094 172.677 li
53.339 173.594 li
53.1536 173.925 52.6265 174.07 52.0534 173.967 cv
50.9144 173.765 li
50.4344 173.679 49.9713 173.79 49.8392 174.023 cv
49.3449 174.895 li
48.7425 171.724 li
46.6834 177.216 li
46.3053 169.841 li
44.4221 174.748 li
43.9407 171.312 li
43.6126 171.887 li
43.431 172.204 42.9732 172.191 42.3914 172.173 cv
42.3592 172.173 li
41.6708 172.143 li
41.679 171.95 li
42.3962 171.979 li
42.9122 171.995 43.3205 172.006 43.4435 171.79 cv
44.0546 170.722 li
44.5115 173.974 li
46.4528 168.912 li
46.8304 176.27 li
48.8044 171.006 li
49.4376 174.337 li
49.6692 173.927 li
49.8469 173.616 50.3744 173.47 50.9489 173.573 cv
52.0876 173.775 li
52.568 173.862 53.0287 173.751 53.1618 173.518 cv
53.6762 171.757 li
54.2321 175.71 li
56.4074 170.201 li
56.5621 177.986 li
58.723 172.562 li
59.1693 176.041 li
59.3874 175.655 li
59.5652 175.344 60.0926 175.198 60.6672 175.301 cv
61.2793 175.41 li
61.2452 175.601 li
60.6326 175.493 li
60.1508 175.406 59.6891 175.518 59.5575 175.752 cv
59.0506 176.646 li
58.6255 173.333 li
56.3872 178.954 li
cp
f
31.6753 178.757 mo
30.5036 171.254 li
29.4323 176.816 li
28.4609 173.534 li
27.9435 174.822 li
27.758 175.102 27.5457 175.14 27.2767 175.188 cv
27.2123 175.199 27.1407 175.212 27.0649 175.228 cv
26.4499 175.317 li
26.423 175.123 li
27.0307 175.036 li
27.1027 175.021 27.1753 175.008 27.2421 174.996 cv
27.501 174.95 27.6428 174.925 27.771 174.732 cv
28.4887 172.941 li
29.3914 175.994 li
30.5238 170.121 li
31.6282 177.193 li
32.1898 171.278 li
32.7452 174.503 li
32.8442 174.121 33.0507 173.693 33.4836 173.63 cv
34.333 173.444 li
34.687 173.368 34.9531 173.122 34.9671 172.862 cv
34.971 172.836 li
35.4422 171.423 li
36.5458 174.55 li
37.8328 168.296 li
38.955 175.683 li
39.7324 169.704 li
40.0859 172.849 li
40.1964 172.472 40.4053 172.07 40.7988 172.038 cv
41.3575 171.958 li
41.3845 172.152 li
40.8204 172.23 li
40.3391 172.271 40.181 173.183 40.1608 173.531 cv
39.9667 173.535 li
39.7179 171.322 li
38.9699 177.078 li
37.8039 169.403 li
36.5952 175.275 li
35.4475 172.024 li
35.1598 172.886 li
35.1343 173.227 34.8066 173.54 34.3747 173.634 cv
33.5178 173.822 li
32.8898 173.913 32.8509 175.109 32.8509 175.121 cv
32.6564 175.135 li
32.2461 172.751 li
31.6753 178.757 li
cp
f
326.9 314.27 mo
326.9 321.202 321.281 326.822 314.348 326.822 cv
245.348 326.822 li
238.415 326.822 232.795 321.202 232.795 314.27 cv
232.795 245.27 li
232.795 238.337 238.415 232.717 245.348 232.717 cv
314.348 232.717 li
321.281 232.717 326.9 238.337 326.9 245.27 cv
326.9 314.27 li
cp
.211765 .388235 .556863 rgb
f
314.348 326.822 mo
265.176 326.822 li
264.798 326.577 248.03 309.594 247.597 309.315 cv
265.894 291.019 li
265.918 291.007 li
265.931 291.002 267.309 290.319 268.531 289.096 cv
270.062 287.583 270.632 285.718 270.577 284.734 cv
270.577 284.701 li
270.586 284.669 li
271.18 282.936 273.564 280.315 275.459 278.419 cv
284.339 269.539 295.59 262.134 305.47 249.928 cv
305.474 249.927 305.473 249.926 305.473 249.926 cv
307.111 248.286 310.353 248.742 311.303 249.897 cv
311.673 250.2 326.525 265.082 326.863 265.42 cv
326.876 265.433 326.888 265.453 326.9 265.471 cv
326.9 314.27 li
326.9 321.202 321.281 326.822 314.348 326.822 cv
cp
.145098 .282353 .411765 rgb
f
281.764 282.437 mo
303.316 260.886 li
303.503 260.699 303.502 260.398 303.316 260.211 cv
303.13 260.026 302.829 260.025 302.641 260.211 cv
281.089 281.764 li
280.903 281.95 280.903 282.252 281.089 282.437 cv
281.275 282.624 281.577 282.624 281.764 282.437 cv
cp
278.515 279.865 mo
278.702 280.05 279.003 280.05 279.19 279.865 cv
300.743 258.313 li
300.928 258.125 300.928 257.824 300.743 257.638 cv
300.556 257.451 300.254 257.451 300.068 257.638 cv
278.515 279.19 li
278.329 279.376 278.329 279.679 278.515 279.865 cv
cp
276.711 284.243 mo
276.897 284.429 277.199 284.429 277.385 284.243 cv
305.121 256.507 li
305.307 256.322 305.307 256.02 305.121 255.833 cv
304.934 255.647 304.632 255.647 304.447 255.833 cv
276.711 283.569 li
276.524 283.754 276.524 284.056 276.711 284.243 cv
cp
262.189 305.841 mo
261.233 306.795 260.295 307.619 259.402 308.29 cv
253.309 312.855 247.871 309.489 247.815 309.454 cv
247.597 309.315 li
265.894 291.019 li
265.918 291.007 li
265.931 291.002 267.309 290.319 268.531 289.096 cv
268.796 288.835 269.036 288.561 269.244 288.288 cv
270.626 286.488 270.578 284.752 270.577 284.734 cv
270.577 284.701 li
270.586 284.669 li
271.18 282.936 273.564 280.315 275.459 278.419 cv
275.913 277.964 276.357 277.534 276.768 277.144 cv
281.79 272.382 293.425 262.753 297.676 258.502 cv
300.696 255.483 303.246 252.676 305.47 249.928 cv
305.474 249.927 305.473 249.926 305.473 249.926 cv
307.151 248.247 310.271 248.829 311.2 249.757 cv
312.124 250.684 312.707 253.803 311.041 255.472 cv
308.278 257.706 305.471 260.257 302.45 263.279 cv
298.2 267.53 288.561 279.154 283.8 284.175 cv
283.409 284.586 282.979 285.03 282.523 285.486 cv
280.629 287.381 278.008 289.763 276.274 290.357 cv
276.243 290.368 li
276.209 290.368 li
276.191 290.366 274.455 290.318 272.656 291.698 cv
272.382 291.909 272.11 292.151 271.846 292.411 cv
270.831 293.427 269.986 295.093 269.986 295.093 cv
269.947 295.162 267.032 300.995 262.189 305.841 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (ivan) ()
%%Title: (1406.i043.005.S.m004.c10.medical icons flat.eps)
%%CreationDate: 6/8/2014 9:53 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj26Do/QZ\ra".S*TD[&5aZs#<'in_%>'--K#;+#Oi_&J4e<Jici-mdcdJ#bUYm\9mW5F*dp#gR<EE1%G:tQ8G)#C1Z[KC=
%q.I#V'\4"!.,Z3+J,d!boW3>toOjJgFR3GZBb-5N*S]iQb8n(@lYdQ]^T;V;d(4l`<oLaP\t,II?.ZBcThai;4g-bLVqUCCX?f-&
%$3VcLPKL*+:^\2WT*\ae5A1)]e/8[&&C<?"pLJc?m1KYYs"/^_EA!aZ6-gH+471?E=L<1CdAB^1Y!kQ?A"*W6r`b,<Ko4?`L@0Tc
%=U7[:O+W]!2R-FFl6<$"C2)%W8H':8s6+Bq&HMb/ej]Ld=D[m_r)kMj"blYkHsFKO,[*H#9#G;`X!!FFJ<4=t8>P13e*=Nq^`cW&
%8SV*SXOD[O?i7bp#Gg:h/ete2\u)Dp6SGC$<)fMX;_=H8=#?FYk=="s\QO1>=EUP)9kL@`3,SX&PNHk>#<j$::@E>;3<6'n"D6)-
%3:,-8(U+=K='^a./;#5DgFI8Uoe)d9Y[YWni\YHe%)Mu;EnIBp^DpcFdHfklla4u!Dob2q,uk.S["8SIMn3=46p]E%WA4HL;.ZWO
%D\\bW#5k?@S=O.t_kUQ0ZJ"(KA\G<#9;]b'qn6T)A5HP])"]J57+#EAR/S1GXFU+Si3`I!MpcnHOC<:*G^,*On$VKC:(*tmO2()a
%PIH,Ch9Mkk2>i/UK-l=Y%i5:,J(]A[br.KX^]/XP^DZ4TmLVSMpH$4[6+bP?hu>9plCA<\nA_^<SK:I>]l8)`%=VG///'`hSFnEP
%g48(51.A7s?('.ai7W/YoIJE;^V[_pr0O<Fa=+!FYQ5*eC]AA/:7#ZSJ6;2biN:Yrnhbg^>&C<A+<Q3DCX!sj`<)3VXbSU5Aq>*9
%5U96aPSr^p7KMWb='*u2$5BSjY4mS"l)u=aVa-h#:Ofc)3c;:]$6!Fu_9\XH)`YP);4A'%2saldc8lt),Qo^WI0q@42kY:+dn*A\
%;?u\G\W)q-f54jfXR9*;T%*ammm0HBl>gm,9rL7Ta69FoZger*lGmP3]m:?Vh\<>e=m#@S26a8L]j132?IP;eM`AD0AfDN?_We9b
%E5MG9[(9q<'i(s6/qU?=PpmTZX.I31_(G`RlZ8Bs;4o",hs>ut2Sc_L,P\gR$,=/8XM':@SGZW+g:/b>]jGhED&&B:Bt8*U\.1pl
%2(s[d#;k!M'J/p'en>ruWp/)]:7IK0$6'5CN.[2dfAIJ)%Nh$kV3Sp;.5]_lN#)4t\O3RE5?!HHXVNL>?.71H'np!7./\r5"]=2D
%ilYtA?4AkJnI$Z_SY+1'i/.UUY?Y>RPRbu3DYM:7([%RCXE3<PL#PFr6`a2*24]e,KBOrIODl<Y.D<`V9%%h@@+`'k-`h/Ho;P)m
%bp?$0G\dZ18#>D@_4BaS`\//F3pk5WTF&WRI$FK'*.$s6]Gi:?(NRrOXP1SCOZfptE$<19NbsJ&$L3#G0!)ccm5a'Z+F-*8ogj@'
%AMXbtE>AcMQ)&IZ:MDLMT03^i9G-"Po8r<\SXp"^3QKp.7?akFRdFh[(0RoI<*Y6LG(r07fr&^5%n9e0`@`g^&aL+^N'gifBb\Kf
%R6Q4]MUNtijfVi4:rlqQjIqbq=&-kC\c7C7fB?@Fr44OCc$o*)9gg=Pk&(bk%R$"BB9"2JQMY^50:2QV\M'<HEkfXClV[r"3Be^O
%ma!?8o&mO08WQ*Flhk_WdjqKUq0CF.FD:Ak3"4+3TO)Ve1eF\oQQ=<dO)(UGgu1*GSjoW5g&WH7OW>r[h\u4c9rkrhIBJ`M2ff7#
%SS,@1a1,As)NDHeQn\bY'Gm?tiN\+%0cEE,)D!JGIRMg>Pu@%E!J]9T2E:g.o4kko&m7)A\NI,_Y?Y=;L<7b3_eBdJ7bQrq*9[o[
%%EioiD2W=i,/pm`&*!+,32Qq*Ep-]?Ei7_8=D]+V)m9knIKD`cHiJ1LD.b!p_^[*X37_(qi#knF,8HrgKgrph($cJS)ZOiNnSdbP
%`c7p0*n9uE.VlLPN)NMOCS'@D8u!bT>651Yd#$WtaI_A1NDWl,T#Gk5P,87>%(0jl.CkI982upDlY1T5E"M'I_<Nl_="S(#Zi?@A
%NP'eS-XIb`0\Wn,<.rY`7!iOt1(Ok8HoSX\!BE'0Tk,rS!Vg`Y-Z*^+,j:hc#sEBVQOZnKQ.?G[ilL80h!-<Y/>!jhSh6d'FN0SB
%P467ierkF!CaJnA3urOSk;`K^Ct.S02R7:>6S*8JKC2n8k)b?BI_iOk]\^T]jYGueF2V?_k*4[g5#tQok,._mDp@/*oX\+K73@9c
%O[(iN=(@(g@p(icQNcKiF3l:9?@U#%b<S8X"\0Cl2=f"7#VPB4*Q'=cgCiuiB>J3L@/L1hXd'Z!ch+JeNh"tU*K0+/CPc-<*$UXB
%!1UdaFQF;Q`45S]Z!$Y(6nY@5:S`!HiP;;9Hb^ifP80M4`#SB2GYNS&Z+F/QZJ'094`t$#/dBX6k?+"Zn1/KpHnLH:Ga4XtRnC$E
%FY2@aG>o'SDCV!CQ3GNQCpg+Vdg=nd.ZF<S7Xgkg0_pjOaS$"]V@bi*;5m]8\^Yucf;KY&7PRXY7pjo;V'M5+hg!FTVXi^WN`\Sn
%Un1(a&hint1QqEHFrHmm8<'M4nn%0tnP,rCD=qQ9H$HK6Tr$a8_elh&M^&6AS5UB!;WPV@//f=&QM]/-`A'TMf`kK<;[:a6EM:=U
%;Dick(6@+0@^-g0*7Jre>]T(MY?Y>2Zo`+7AS0WhYVhr5!lAEb(6/bS%YKO*cgUcX6"<*5dIM9#flMsfc@K?9hSaUmGu+m+`jR46
%Gj6:j5J7`:B483;/M;l_]<)ZUi*s-;,6O>^G+OPR/4YG-6IHL\a>6\V'VDf)9U(cPU@;FVQ+Bp/0#a-$m@9/8Pl0LXKJ,PpI$X\8
%'K\su-lhAu8ode7To/GHP\Cur\L;rQ[E3Je''AN(8O1C0/rH3r>SJg`T(k/mcUCEaI`lIYMOgSK'J=r.][Xu`Mirg#RPa0VE6[JG
%$lS55VYfpHXphL]-IR+36[C*=<_!bb#VpOP@Hl^_6LKLe^YoGq)V6X6!,R,5:[CkHAFAUA"`KgNp"CU9:!<2J#75FaQKtq`YGFRh
%mI^IBRqp\4f,U=1>cZsimD#dREap\"``fOqEio&-enXQ3d!6&sgIWUr#7:BO?TD+*J@QLK/k1.>7N<\p`@)Ot;)(+Lro:N/Y4_,Y
%L<n,`K$[kSKdWI%e3ZI_aLe6X4lK#HABLcKs7Mm_BBh5HZsDN4nm"PEK%jMJK"**5"]9ugK`_2*JtM#Z/bi/`;!)`3Mtb`F7ju-K
%-JhsAo%RG^@?cH"?03_Bq:.)2;2bBfQY*kt1n*gr:IRbf7b=mL's?YV.3#;mZH/"Y8McA*Jnl3!7P!*>go8EOcdm/kI$=//9]M1*
%5QB@0>`sTh^XMIkqQPPm%67b):Q8Q<<!4Z''.`sDPY*OC&`^LcOd#)J`IoK,FZg2[#S(=&Y'$p.\8"#+*mKs:XitY",[Mki0\`rD
%bQtO(n_q8.o[EBn+umZc=<"Sgj5ON`rdSgJ9]JU\JukE,3R(@rX^ukZ2[_S9jnlggrboONS"0Fa_Pt$I/.#ON>aq0Fhu%&KI*Xb/
%o=YI;niblXcSsbQc1cVW4l:Y5GJoE`pO*!K3pOsZA'"9>7V]kqisN-lYh+E%p6>:unOW2'$Vo.3T:=dP+%Z7i\8LKmHplcPjja><
%XP8!3.gJtI'k3(Tn7i,56&Ln%0NK6UQ9/sQ9A;R$Dla0+\s0S`+BoG`N4a(%(!Y<@cZ.ZCYREKqi)MWf4'Oq<*S20FopkkZVe<E8
%mX!rfZTN>qLX,%VP0qVoQi3&ecR,BPa3X>Og%6e=34>h,(OkD'ShXed1RSX]S?.40Xl3[AZ]GdpnOpkAVPuD/=^FHi(i+"]L&)*5
%:F2p%mJC20L*`sgXV>k3NuKB+D?N^0Q:!5DC=efa"i:o4<>$lihIuZ_l%14q&;">U4ReL=?>e-b`\7c0]Qd9j&qA"*06uJ%&%ptS
%QTXc##@?u:90@fkJK<f6J<U;#(*(DpkO>9.Js=Z@-F.]g3L_2+Ks41mREK\Z2SjHX53\D.n=6&q0:Rb(1&c:4jD3j.>Vs9L6ddWV
%E1;JiX#W%$S]7K\UT]lWHZ@8J@`fM-,T4Pr!gsUn:Wig-V-B>^(]FBhig@aap'"PT/b>Cf^9mUK%,S^?H=bVg5P(dsIcp!m1hn@t
%41=]Yq=32A[rs5cc6Xb/a4WHoMQCm3<([M:VBm1@^,*PRkW*c\#"ss.n4_39AK`fps!1m6V+'O-#eU$OI=U2e['\'B@a76eAgX;3
%khJPKSqja,W_;qDP\3RGECJnTK#_hfd;BS.JHL`ZLG+E5-l<ma$4f0^Rrtl%3j2dnaFnPlr!M]g8/t"?ituKLaRV;[&e/4nO(0G>
%Cj79TO(76jN2-ea>%TXQA#+QOni0)WiY^mQ%4nY%\(j3kJq)A8=n]XO?Zql#l1).;>f$Wga+BK!&R7kdL"Yma%[mKH>&YkK7Us!8
%VTX+s7&4p0aRS&0diPrXJ4"g*@Ds"BNW!`SR4PTuPkYDI-urQOFCFj5C<u]>FP8X600N2sV.r4n(Cas:StZ))SWmBi_kU6N]hXJU
%E(I8/N/LBd\AP)io*]ahU)*W[4$o(i4fUf'`sM"KLIHZ/d&i(/S?lYm@d&E"V_]`ghgWH&!QB;BONRf"8Z6g;6XG&2P[g7f8q"8e
%%gkm(p(FZrm)=ZRHBPtY-2N#C@HB>bPO].d%O)AER:U*e:-aL'%>An?-ue8-Ui&C_-jke;A*:R2m`VHSQfHQR\Mok%F1F5rFS@0W
%k2Q-t3"1u*S'-CBQbi<ugn.6#5K@b>6jilQ%]j\p/pHK!G:n+&`e>^_kN;BV\sNMRNXpuB]6%er>WOKZdc8chm<%W[4c<shbPet&
%pi@FPB7:jgr(c'"Set2koIQ_Gi\]:cJ$27h5A%do5JJ9r0rh91lU$FB.^,>P+=!IcZjZ"GI7AMR_R8arXTAZK\sD.lr7^3=Xn;q6
%>b3@O="Z,>j*WF>2(FS!T<sDO'cAZi;O"`Uk3lT'PP?85V@=MOD3/l*TMM_s/8%VbV>Iqgm^GAY,:jhf(B%[F@G/r*D=Q:;OlEp,
%n95^%nKHDS='R+R?16>>oiYIg`G)\G>ki<R7)pfJOjXQUb%&h>VqiFs;dZ_d6k2\%E3;c(>7Cl(A`5B`NT7/ea+`D1j7Z1"fGI]P
%=P9d*S#mjcG$7]tB(N"M,U-1IgXBE>c%-EDY'J_[Q.F_WO435,?#J'OG0l4N%)1LK?o![BM%)\0[F-/ahETgkgK=fuYY(@DU>.*<
%D5.'%9m#[BE2nnlb_>PmQCsaBX*#SeZC--31ekcj!+,7fbB8c\_I8F1:Fd*p6&Z<ZX4J=r[2c?-o2DKRq1IGDf?-4m1+e&&_IuQI
%EL:q$;?R4b4riA?i7Md>Fh,r11hQB:QZOm@4:=g1(IoNlcPOWD(rZ4OR1Q(<(WZ`SoUf>,dhkBr*udnRd??^Z9A;O\8`PU8hVg9b
%JrqlBOdWr*-^.?>h:epoZ!`dQ1RiJ\hQie7NdD45Tu4j$i;GV!VZ8Io>Oj#"b4#eYL%.@Vma&u;9&lYRa@_s<K9I;<3LhC2a]9'X
%^#UE5BAmaQMMP2c;L_3V3eoGSpe*B&Z@%CK4U\`0A2An)i_(URQWs2G3ZnTQ<>^0TUs?8gSaunH6<]U>b***U?@,GD3R(/-`sKl;
%LsTV"+Y?TVH@m-6j^#dg<L^ZQ"[HNrfL_RkJT\drL/^PgV#n\l"[VnmDtl%b3bE5,*Ob@!<2u'30j.@,#_f@dfm_4YEO2(#I:]i+
%CN9]#EUZNg=jLjW)a#c&,`q1F(]%5n.mFbG%uOB,bim$YK=!UTkmi-'PdchAh@?$OdDK*dr6iH[BhP_DV%I8'&YogtJWtinORb>I
%VdgD?"%]%p622_+ng@RA504`@;1s"NS?p.@NK_,3`8fo3OM$kd:Hs?`2E_rJ**[<[98FDT*:fmeFdWX.n3.&Gpt/>jLICR`jdocG
%fd.N,P^@Qn)8j!tQNb\fK4gcsh_%(+*J^4XTl7s`(X$*rgpP=2]A0g;?+W<U>et+("CeTe"fm-91]XHe!(?mf`2Y+;7EY?SI`J1B
%kKOg:TQ6jedBT9^R0?:;PhP@bVq(UZ@A*e#e'_&^#i`kg6;O(-p-^CVnI8YO2EV?+Q6[/4(&esUn7N,XL4?\j"%TqCC@:-GGMQl#
%KDB?,[1>>]aY?K:\<+#OT@PY*4p:n(@.cKB79VH)c[u=j$g3\rC@]NdkOnC"S7UHmf$LgL%')qX\Bp\RBX,)C4hi7%bXX<i4t[7j
%:=lmuncZ%?]fBb$?.1!r"\%IgWnFO:NFn[G[54J+@gsnmb84)8<Yr_i2d9NbPX'.nkD>.onCTJQ)hFuF@qP$:5gBTS;t?#ulH`.:
%/u"]G'03KC"3]8"?T8"JCO-&I8^db:4!sbb-:tLO'!IMjG>+1iNX<<UEo<.M`Gr.?s$*t`VK!hi5up_'SE:&<fCD(6Nftgc*c\na
%S5e%/mh&>b,h>+f_Pt%</.#ON>aq11@GDU+32.Mj^2Ue>SF6jKqni0CE5!uqmgJ=U_OWoIWTO)pq7\Q_FOZe>`fT@o>AD*1kE>dP
%Y5q;`l&<fo,?cZs4Q1mUFSY*3\ASW8IQ=Rcq)KN/(QW&nJTVo=KB#43ZpJR@#%"FI.nGfN$-(-Jd;l,oId,>eYTjaEd2JP@;UUk`
%CdlFpCdc@CU=m-E3DOo/Q2tV+]W1+*BBr'oj#VgpSl=P3oW7c9SWQ$VQA<cVd+MZ'1)`46Z9RpTfgO?\pfSY&RlWJHa&\Jc_Jbsl
%1T"u)-Bl8sPP&k#2<;?].4?'TR&8:WApKC)#-G;f*!l'JC7\$m-/81+NX\Wb03`/U@NII#FPI.lS1KG!37P)aG70'M`iC@g]Y)Y[
%rBm2B=ocCC8fi6!""uTHHt/Ot#%"qj%#Ma[JX8LgOp>=a^e5_naTF2Ai$BG\b.nL-*^IjM8.,pge8ok4*C7j3AJEfXp70A=ha1GA
%j]lE/0;RMd?_?ru.<s.ik8.%7KG]3M@IggH(+uB?_'/'0;7OleZ.5?_T2+FpQsVA9^r8%CXXRTsP@P6f$Y2SW4tR.QQ>UHs?hFA>
%Mdm\"gD=8F[*3036dschZ?AUa\sS$r>5=7NqBN+W[N9/E675coZmt^Z13/_LMV",AP#]d((Lcf=<U%hErn%rm&m=LlDrl4.1V_ro
%Id?hGj%fuQT)=n4jCj**O8Vq:d/`Df)LZ7K;p]UNS6O7;Oair/ij!Oi0q,Wj3G:_S/3D#?BGNeR<a-$Be#Cg_dEN'NZEL_E'\)AN
%G'!.g;^c\>2o#-J/(&BWnJu8*Chcof-U)5VUFJ$*.]"P7fk/!/$)Cu'-IW//Y;Sq_FjRn/lCFR/D!ABMV[;Ecpi4qEq,-MV$GURS
%IU7#bmn)uQEaGT(hr'id)uL!-A`90q/VAhRA<)p,590>$"3GK5aXt*ZU<Dqs`@Zgdhla<$og/VsgNE&hj1.nV+16sr"62r]iTCHc
%dpTTG#K@FT$1\2Yq3eaG"LjSuQ*YEN/jD%]aJCUU0V6)!0g@@`09/UZM":d*+[VeSO9nD@5IWPJ0nT=M3LAutfYn>\-Z*J$-YR3U
%aIb;LB_3j&@(@pP9ccNjesji!61_@SF>iJk$sfdUF3SlCQH474FO2#[e$aBC7p*"N=juJY5p9,e2RA@[[VQIY8&2)g\?KEMa6WD2
%jXL&#^p3QW@J-1+chTa-iSupB3`80(V.?ac8@Bj`=jS//]`tI_iF5+BrgWOY!1AnMs$Fq7I/SY:@D!,Yq_RfRd^WsBZ4a(Si$??g
%%VNmeZIM?D0DW]Q=h%\B,3"i\eDHCnc=%,-rfW58/>"(kcb_7OfaORNpl^KXjjsBj%S4EB'o(TX.5X:GUsp1L&^mB^;P$9Qj>j<*
%7WY#`+H@+uW=biC1dbHB..md%:<U8(e#PBR=UK\tW3DID_ZT4VLCC/<:.b\M%1@dW)rC'oUiai7UcN>H-`L&i=^n\2?4[HHB=%Q,
%c/N=k1&K+02qI%$io8mYi3T$*mPfA3>Y$!`B.ih]E)qE;U)k#LN1&(OGmA&'g<q#<+=V4Tf=`1_9;@9KW;*3C:XbV=GtTC'e6>N:
%'c<LUpnGn"Y=;lN;8#3*IQm-A`%>;!RPZd>OJ$7:RmS6lfIn)n,3nftMsu59L.dBCmI[tk*Og+3O[>-[]Gjdo>-@?S8<>@7>iFcO
%0-(Bq'"iGe5k4(?IF$5ho.RTFZ>/XSS$'_O7:iXtEm=>#f6k-NQRS+Of6k-kq[[JV%(q(]L"FY)CqY;CKhe(C5F9"o&?uI.qQhZ,
%[XfcfIjIu^Uqc6<9m]J%>g8GHK0GnuK*@:;VBX&nOKE"(RD''HR#b84Y/1b@gEVlQcB6NHY3[-Bj3ut$EW-`sIEHuQh"T!?^Vll<
%+7T4gba7,ZbC]2L_>=dbmk6i\+31K0.J3U!Yf`NOh"f-a^YJW((REkPj#:h3fh,-]P]Ml.0lrO9$RRCEodm)TJqia-kg\7eq+Zl@
%1jsVO#u(1aNkb2B7V]jg$hlXOBsP+er6=$SR)YCLJ(Q*IC-8OWP53MkbkZ#>U72(`3^+gP^0)grCU6dXi+<uKdGStco8#jO+rVFk
%;Y#W5r2s0Dd7Bu\b`P/Z7l93>)kIAY,8thq,H69\Q<DHW)QB?n4JIsqLk_.FjC:A!Ori$/$3B3"NMJs!5098a8QGt_CTM"5Z#J0K
%)eh-%ZMI+'*WSaFKp)945djQ/1*eJt.RVWp4iL2o\nIPKR+H2&OF$N]eb"7CaK#&OlH:L$jcYjdMp(s&a$(D:S!Z%T50l<A_d:6d
%S^SJFKghje;ER&;+<F=2@sWYQLT]/XGM<"He`L;OnLCg&a77015MEf#k]8Th+;e-NWPc!D$3CHhOrhLP"YMVE*lV6JpsAf&"-%e?
%[kWn)c1[gM(NETi]j[FWU0@0TL/]'Sq*?m0AMhDZC=tDu\1pU6c]dd0V`5*mCE=q8N_r>,QF?*nGXcW`j28^u2$[27B>Ci4R4=3/
%J@m79)tPc;[%LBOd?I%GB%PLLk)A4@a+o<%*#r2-W?,%XQc4o\-f!A6QprHJOe@&)-8aOM5l?KaS+Dd*s.gk=-OU0J\5H$6*]V>H
%qN%#SoH0@48qT&4P1OC^mkl#2Tgh0=XsEY2X&8Ne][M8hZ>eYl/92_Ib9,]"1G"Wa"":XE[[#@1\`n4X>;JngHP.c/A%<L^&?.3d
%"IfSV`H/(iY.Xao".4YHfaEgRH"uF;L2T1Km"D0'^f-aSS&&=b06h<8["s%*mr[_`rCu+=mTb&in]Ej"(CCI2:02nVIZ00q(Rl^8
%RH.g\Q:2].*"H6M]]UtX5(Jb%:!>=6M:]Zn*1NV_/$%KLgf)79Cqc:aGa5f..rjp:/rnh6Q'bXB9!dDt/_au"mD5LH:$%PeZCj4<
%XgV2R3^U[_Y;#[F)#8/8_W43.,MOjgRmuHE8#9h*j\kQ(?_]Sm,V>^[17f@IS>@KoXl"A`CSpZO&<9jYHDI-&?kP-c2uN5Z)UhV'
%4idAb,Au4K\h7@0NZ6l/Wmb!uG+XQQjqh2N/i;?qgT`a/[)"c1%m)o<[S5)YOL!Z6eh<'Z!R3O,HCR$XQAc1tNg6Wlla1oTL(oQj
%#j7S@$g3[GT6o\Z6D`LPF!rif[YM!DN"cg=,IVPrBQ4kO/:)d.0*rQg0oVEZ$d"u-HufeqlLj;4q1B'_TP/.W&r3CAiUPAY0ma[:
%]@l2,R'kZe5mHaq>L1.qmWP1YOt9+XB0t#Z^;r*-OqaOro1YC5A>8SK!g^Ds'J@@jGjV#\<"so$P0J&F@U+Alpal6O.!Cns;)leu
%PiSQL6P\dp.+9lmF&Dr-C6RhT,g=l.PCSh@>SK7m\L:_J4n3;eSr8aKrKbu='K\su-sQh;Gc?`I(F9O&1hk15iL7pn(c'CI9_TQS
%>T$lD9Vh,DL\+9YXc=UN&S10q6ZRgKN,LT5m;4duJ`iB+-$?'0GANI[g?1Q+q2T;YALR'VJ5Aq`L2GAgIa;_NVP]F:LE?"R&,DoS
%5>s)33;/H]ZN<6=4[1JO&[g7%$OB1]HbgLY/eAC+c$%oW1tu8r(;i6qetBmf4u$V/%?K6MI3dbs7*9T$o#Df8SqY4M9ULijm:$Sj
%jl+Y`gk"E^8Pq^oMAJ%u7.8M2$3$mdhEr(bcnV+a+2-#HqFB/`A&rX\)@\\tn>Ef#WS.L#jmFeCh$lS1P=E+C+@.W(IpMK.8dD)0
%^=TLmnjd(;K$I_Hg;hPI5&J$Jm_O,;U&ju2s8MIuQ[CUQ[psUfIijei0GL((kJA\7p4iOH_P,Mg/j[@8H?C(b]T36m[;<Bko9):p
%knQAIFPMk->j)ZTKbN6UgDDTU;HQG1.T/VJAlaa(<XW3e#1TT_emN!a;"X5[g-i3Y"c?"lf*^3H#gjd0,@]a6oT,V(.q$B`X>0`e
%s70jt1Ao190&0q!.d7p#K_DObJ(U5^rm0-dmnB!<^Qj+te%m]hl%;TRdI-pKPM]3?/=5(]G!Uf3!JCtn1fWkp(t]*$D%MmJkS>dn
%bN17Tfe1Vq<DRoQM%-Z4g>m"H"3\Db]GaRa]2l[\8%Ru.Y+=72,k?k?eFO$NNN=ZrPKr+)Yra)aFn1e5oLKX9CuO3Rs8AQdGRcrd
%"5$C[m)-]\cU+?)5PTJT+5u*<[Z;o>!(q7!Be.PKcoESc_T&k2)be1c(]=()**US+J[>tW6/k1])1'rRoT@HhUYKS8LX!Xl'V^k2
%La@#Cs+k^J5Y/C03ic5"iIC;IKIjnOi[@G&*>#Nncuq^+'UE,#S\6+?ql!iI4JQEl-`FBGO(/]?0_D./2,)E69!3ef*LuHR>R/<o
%.+uFN@3)H33]Pa-\IQo-E86D8*Lmno_6U"R\IQo-E3=g0d_UDgpURTS%Shp3>@#=8D6@\rAXaXOEAL41E*??KkF6D#%aK39Y(L4s
%PjI>8YR\r;hf9a-lel"Qa3H*d_.d<uS-OLa*LuHR>R/<p.+uFN@3)H43]Pa-\IQo-E86D8*LsW^n4/"56[/$fe\S0.<n@e'n5O9m
%4t>it+9<fX9fFps-9hd!"F(YU6.?U@+\N3JVs(JM0hC#+2?odq8brRbJ3Q*md6?fPs1=X>[)gX_]lor,3&CR;cEZIlK7QD;354;m
%p[Z?<W8A]haI0ii.tdumr^Cis5Q(!MNc"Qt)ic9/F0U?_2/%+2Cdg=(S1(b,h`R;P$M<BCYLZ._`MWW!p/p2XFBT1r>*Y+2`.p&s
%ec9r,l$UAR+D9Z:Oi*mn?quk[pcSL?-56rMAH&]CDQ&n9#</!pB-)S/3a[?_m[sN`HMstV7q&)FI[GKZ?ne$uo[hTVlCutOqbu\8
%C'\C%Uo2Lgk8kp),.@8M,*:ot&IZal*W+QYHVBrg`%QG#9_%;!R!H,cl'u[pS(7b`D50'!T%T*OneY@7Rm6\u!gZObP9Z[mYWq?Y
%&to5APsmY/(0Y7YL4Z/YkL@6i2lH9)q#/t-ad+@L)a>"Oh^Qq5ICEp'7u`/9I,\8rX9n'Zm"D>'F[_j^dbL=MaT-c9"=5+JY+4Y9
%'pjX`MP^TeT?[4?g5YMte@^s$^eFA&G#RqBkR>8*W&]jR;6P7*s)L4WR.3e*Yoed2V"YdjB-`XK5esssLiKelJQ2rul37H&rpaCa
%e\1GX(XFh4UMIlPlSs%J`A^KN^0Hm4beg#c[JO71LK=j"/pkihU#5e"0;qL#A2&_>hVb,<p$)]"?ND]K:r+$=JFS6(X^-TI%"d_G
%Y\SBP*fQ$4_sH:%`R/!FE)SVoQ.>+f`<[Z/$STjZK9E1TL)cHNUL.T5rPRomL,9]6bXJdUgiN<emtXh$F8d$kp?KnRFjY<#"+TE:
%rcmYVS&8:c`9DL$Tbj1,3/4dP"PUX8*d5X/7g#Xu'IA_L$;A*!%$`uMF6N8"$7Al(i:NK<'%/T7GZA8t;WVROkRIjh.L?+r`lD/e
%g6Y1mdO?/[]#1\S+XL"5'gpOdh5a`IFh4E@A!Mh_?HDp%f%VT\=X\$Z-Ad='l`.`afF^k/Q8(8=0Ek1.Q=9Rl9$+l#U4M]"8hmX^
%_C<6Iq6Hg2HRlcZ]mBMJmE&$"6p3/Vhb3?[B0ZaQ5BqH'/qSprR\h4L$DK9b'2t/R;3hVf;J0I5MGR1j_06M=Di[\<:!JpC0f^kY
%9&tQMj/.7loHl&_ZVHk;79jLE\j'KL-VQC.dnj_O^GfS>:*j6dq,m'sSI<V(EOnNH+5qI!#Ua<DZ"+Ci;X\Dm65/G")E=BZ*"oWK
%7Prq&l1Jr#kR49MGM0Chp!J4l<r[I[B"?1c.'2=npp-`@I=Q5$0uQ%"P_Ofc+RsM,\o)`YlOITab?cQXDH>p,Kgq`.]"[n(r,?sf
%gfEpbVh\G7;PQ`OZ2TA<#[W%,YfM7H1OHC_Aeu.>#$1^(h0t4Pl;+DlbhKDOlZXA4CU"Dnj>iXF]mg6[m[6oh=5ZVP7KH-EVa+bg
%Y&:.$k4K=8fd/Q<1ksBpA?>Kt=b)@9qGRPKC2BJ&mPAVY3Z,lsoF<@!np.NL)O.@HCs0e?,>ss^EJ>VRm+Rdh;(i8F<p$PX#M#O6
%qV(rYO:6jM?ft*!0FtlK;Ws<tN;a*(iYpm[E7i@7TnTOYU#u8lg^0dGeF3I(g&RlWG!C;+RUc6FTkRL/4tM!!^d2P[<(s51dUj_G
%&N7@G/rIAK!QNh>_p5'YdBZ/8/D'R\oLE#$Zoj.cn@Za4<r:LnmKH.FY;E,;[>T6G/hkR2_s>._p%hF=gtg(c*F^#IT()?s`Bh,`
%.58t(O3lAP\nDRW(+PlR[5&&@mUb^qG_*0RBf(^b^&raV7+EZ/TRFjq[B/5-+)=_LEE(kopC\pir:,u(<rf9N]a>VF&11H^X5;1N
%`[=oNTTBQ^K`Y6`J>2%/-nNf-.f@[/=q`P*<lG-RD-.C%+2"Y0]mGSnS_d@?mO7f*`'6;nU6mf'=_*WA*&91K`ArLXrIJ1SdlhQb
%,f.DpDAS4XjVY177bM[m"cClJo8fVMTA(jOJ-\eCij!C1kEVOU=]!3*f3_WR[4"a[%k,Ri<")2HR`;^tOg*8EG(W];(<CFAKa!C<
%jIjt5L+,e:-S=.aL4H$V-AtGl50EGLTa?dCbHUqLZZV>>$%j$B\"b>_eeJ(`[)8B?,HlZYp<.Eo7*P$qU/*F"TA[(2OR9b<^YI@Q
%\M;YY`J@#K8#b(1Ie0ki3n)M./UcR]Me9Ch8p2+IfAS/lor56f]:;:P@iT'h=):=LVMRb.:)fL]!Euh9nA(cLXU31AI6FWMY?pSf
%RUEa0'3s;>Oq"WNY<'@H6[)sJ1%MEb"LhgPj3-Fu%eL,(]<n:d[9+N03@AKWDS[E90^[V#fD[Wp_pLeo]0DLGU!TIsL/-':/7HD#
%X33d=YM^r7aGT;jd<_@_ag"r4a=<_"^n_gtpi?S5gFp"+9.P7gC20`+-CQfubFgWn<_S"O$.EPuMKO-'n6hshn045L%^RKe&NC-l
%k,q8f'8S6cdJDX0/CJdMo]/#&la@,^k.G_X0;-2S1?e=8=?U"9acgAdNVY8+k-<ZVFP8O9)`AudCKNcdnmkUQK)I2-ltpC4Y&"i$
%s1C.tEdG%p4tLHXIec$IdZO\Yd?&,JNq.5$"3sKO:d*Ms.EQ2\e+1?>;*gF'7:2B>,sb?kX\?&[Yuc*7RPH]h![]i/ITJaK\'6=6
%@;mX]E1FM8Pj`bgB2P%^*4G6[AYT#.49J_!6^*;</u&+VH6N-Z#^dJ1!^aM+nLQ6VB1W%!,in3PWHS8*h0Fo:Pj!5T_g*R)F5*p3
%aWZnaBF"p!KZhF^-@h6r"I`9+1Ef<A@<T+d;'qAi,]-H,hO(dO:GNBPjB+*OU>R5*c!`+:DeCb%O@9'qFaH,,5RpLLR'6F69\/jK
%eI:fep<7)&k^<AE$o[4?3=+6rU81Q'#M_"l#dMs02"jc:/$RD+2SPuA],Sf8IiS48kr#!(A7W;@PR=7>_LBh2UIeUmg3%?6A`f!\
%X]<9K<N/K(Ofb@_>1((&_VXhIignJ3*5*r:_%Vf@@P9$dA<rt,bHp#YF_C)]Z(YZ2RYIt(hU%qcmaRma+n^s6,s70?+5'+TYrQYj
%arZO3\"g3L*2;?V=f>6:WJ.'6)oJ>-na<\!mllTH]>rZr;)gUJ\.:9%`e8'uMdd<iO>2?Clum?['CH)>RV`\KpDsFtA.gYZ=ZeGm
%J4Pu.0,1,F@:1VpT./W[WYZ.MG=WERVmfK5CuRL[^imcZ,mS.3>cF;:G1mu6Wn1rFQ-R]69e.79)3Z#$YQ;>_Mjjq<_(dgRE:Cmg
%[lMq5o*=4BCbt.gm;8Ljg$7![mcI4?dr2/l1jJ=k]P0DkB.Zr/nSnMfUMXE66hD\A!0i-mXVO5baH(fT[Sk%M.T$-65PTe/`=(B4
%92(04Me@?i"rrW\b+kY2*.nk.\Ze!a8'&5-#"seVnA;Joh[9Y(,T=GjLD%Oe"n1\*^qEhUUMX*Sld=[G\-MP3R>uj<TlFIDJGb9p
%\Ci-0$\eufMI%9`8/?h:F<g&LbBF:67UXRmbT&&%[.s9(U4r-U&>MQGE/><<*%:%q(o0Y,Cl1o_Y7EbVkj4."GZ*)4D=bQc-8#!g
%!6Ru#'7TF@'Qg=-]m95V;.bIWOg]X\AEK!O/:3'sO!G<5^n3X+mgb0%Y)k&@PTk4.e*,dId+%RPbXqB72ABb)_l&-](8iQ^?X^ca
%m9[+\?bI&n07+iV0QXb3at=X7Su"ME#@KPp]fLA\[FpZK^[,+,fjaX)Pd1oRCN[7?_)u;9$6bqKZc+X!ZAZC87Pn^S3*>6%b#0E?
%gXk3p4.GJc"H*hYTa.p!3PdI<(Ypko?]JXSqm]=("6]#cfXba#9paNSS6i1-r@3RG]GJid*88_4!18U-h)7Wl3K#0&:1YA"_e%ib
%in,HurPX4k0\p:2U'_Y@Lt'aGn!`5"fn/O\YPn-7hW>k(l!R"`*'9,nC.'bEh%)Aon8<nMaF9":3@^hCg"df_UAN1RCS@/>J3.8;
%Mp@ADR"Z.jen')_E<r<Sq==OEN\ZU8-%)V&4>Z$(ABa)o8O><q'Z(4?i[-Ho^<o:FG#/Fm]@gj%U"@9EO0sQ%EY(Se0;ZZ!i_!/)
%PR58H@pF`26('K$*54k`mWC.`6-]8foOd5s9I3THN6Fb57*NY)jdFaU?]%3jH)2&*2HZoQg5CS"-RVhE7O&t\B@=@,AY^c%&c=Z.
%Zc.)uJp?C#WisWcU86(71hSL4Vifb*hMGZNaE,R*TM$OhI,7gr?57'A%8MZp3;9!;hum\DMZDBE+9$qg?hYRMQ(5++^R/51WDWn,
%%Y?!:i?ND#eC_1__:I<.,_^fgl1P?N]/+9L[T0tli*eHgha^#P#OUgY?BYuC:toj`""Be,%h9#U!e[J9CKHgdVah7]Y&;"&r,Bi*
%\+X'UE4!?ke(\eHD-j[>4KmUE>CK[l>/gJhmIdeKmG@!Nlhr2db1"VhVh^$h]qMQ0pS:/d8Q:q$K$^]KX'De6pNO'['Hc^YYBB_(
%r>3ldFL/;R]@6@E4Wj#s5'p;afiFWlEqAf7]2C1D]H$7<<dtW#lBUY_VZ("R;#0g1=8B)7<bcblrR/OHi+hqAG&LKb./2WeIWHUF
%Kl/@LiVCI2f'_j96\"^mj/:=.\bKc_YACbocTBn5e^$=HrF0QMZF2Tk0(7C2cjc[Modf7S9&oMIIFm:pheb8pY6O)=rIYr\aO^Y3
%>HE81fm`ee/Stath(O8gr6g.g*dk.2e.;!6XrH9dQVQ0$[HSgj=nNq[@t%Wg[J+M1eT1IX3T&OC/]eN(G@.M$?/6qoHsJ<c_adMZ
%4MQ*JA_YcnrmY3/CXfM#f:oKXl+Q6XYFEcicg/42daO!;^"#or;XO+mG=5hMBC#AY%,GT$Da*WSg@iG8lJoda%DDH!EDtIJq@1!b
%ZOb")lV0*Id]P_$^B)LA%itVN/CZVJjUDSE=Zh)E]Y<Op])$E)ipa[jZr90@^@uehbuF5ISBAZ<mG8Mih"e7erMKR6;nBL5RC)je
%]`]`Hd2q,]C&+^@eR#YG<)7\@=1!+26/U1-K)#/u@:d@1ISd_aqOr]#B_^NoBn[7PDM3q[#7C9<ogs;\qe>rph@!N$]XIR"[O/\S
%%Y02h$*-jnm&`jEVjEIXL>G,NhPu'Pq1[%)0Oe_aBNOl=JPs,+K->UPLEJ365/C-W6=B)Lh9%`$2q\()(%$YIbq>Pe^9(ES)_\qo
%=k:Lf]@t6i=52%Nk>+]_=8&;/I,@+=SOkTB5Y;"RrZ5%=J(T,Bp$"0'&nTo*[skjt>;P&Dn!QCSmlQfSl!BpB'\]rq<hJ1%H:qlW
%>D@%hcGe<m]?7bKeX^%8lF!pCq"?/),suPC1ml*LCTG&fo?/O>UStMppIRe$(Rp"o[T4I\Q`Cj&g_HE]S+,%Dd%h+6d4RIA>A&T#
%V6f?;iA`\bAs4CO5PsnqG7\qP3ph:!=W/U:nAKFKb7D07jX]`Z_qp*OrM\`JH>A+Rr-0_/$)L0XNnSsHr4,@CDL;=t'h.gbZ#]>.
%[lc6-B@T!?hKi$[qQbHM/N97?K)"?"?7jc5mtiB^0G"&mY4hX-fXNi<4oV\_m-NThO[25k0Fm9EZ@BRK5[U_';;'#WA+OPMI(Z69
%D"q^]Yi!-@@@F6$b0(BcC`W.0NH2A_e;3Bps*-)sgcK`rijIla5%oL@T<'0!*NhSTro(EFlfBM@Bek'AW]f&XSC^uAe$%(J)pQFH
%<SB^uiA7TXG1a@\H#n.:<VMGRn"?0;<FP>p5`tKk>3D_]I@tGkK8C\=HhR.,#C[1O:gApYkm&:Pej*;#ITSXN]8tTbYH2B0$6Lbo
%ajm.ql,EPK2KZiMFMGWecC+[iW*K4K-:X;_7h7)/d_d`#-/kY'4^Ya@71]J'gibrie;KHm4ptbLlc@5d<.>%ol@*AamEC"fKREG.
%7/Ym>eL-D8R=$TWY3iU>c/u&f,'O9MS5in.Gd^r7hG[Ls=+\]YUGa]RG.=lclTQ,B3+!ap6/A]F.uLY(k$g\BIeNaTe60O1Xk`sI
%"BbQk;o-#CmYGZ%7m$M3'<Q\nIj/3HZ$,A5r!U(Z"n:7aC-r&OJutRIV4Q'!VmRnUT^cq8XAL/qq8&X!oI&(iAr,_&W-`bW@++kk
%LO1udm"X"Xn.$>4\6j\d$AX=bSH^sD#,?PiQaY.edOs%JD$*Je!n_f6L*I`!?T=o9Ac,^uCbEH7hLtur&c5:=k]I3d4[[j;Bq-<D
%IfD<R*faK,f8i_Xn(2?qA7,G@AMPs3L8%99a7TWTIhFSe8ilSN0@E_Wf;F:td!4Xup9dU5!hp!$m-=q(4nAt/m"b1$L?$NQM2V`)
%n;M`&k8+G-rQRo$b11kTn0e@j'64?<V+i0,O+XDm`Sm&DBP#U;p2E>f*_mfJI3`/ZObaIrga1U30]`ABmr9)A7]>C3aSSSd7V6rN
%UWhk`J2WXHKS)X\OI8J1@IJk-TbJ&aO]`.7:"c)Ei=DA'DBK]>oQj,#"Pn`jqf?gPVP"V]jE!":5WUrrrEr<s_=Y#)8)g7'Ld`2]
%7XLek*7ZL&H-*6XA?`3i6/H,`QnLC/DQogL86XHE-[Sf6]h-,EO3+a3PI<hB8EV)+'f*"mZ\7<u6AP)6H6%fI2.S*b<VU>PqpTg(
%k@OdBP"KgKJP*ORf``kFQcCaTFR;f-!S[LAm&c1XWEhQ!>eU48o0mk>]n&'!c&4L,>.i^!g-5iA<gP\`J/Q()g9."Xc5u@h$-.6j
%pYNQ0jtClCpDK0I0cVBD'm:6B9&'\ej1lkPb4p"O$3&2-?0rf&LasRFH=-O"LK_)2?f-?.S-FQXF;$3gX2L\c3mRtXDgea]<*h]c
%Y-?aKSi`d4p?Cnkl/85B[p%NgNdc,O46BGmG<nu)`k8]Zn35.3Q]B5#a+4iRMU2R?<]&C%\2"8F^1G&C.I!IrT2_EV*do&CJ.bSd
%?W*ME4t+*hqs&em[b"1(qu%b;kF%,`D&67H:W:,u.*hNC7beF9Au_b[Xm,]Jcd%G@j&Q,$UNubLfQ6M.RG-f/FSFg3k:&7F#rY_Q
%ViXaf3U2sG.ihV?hqjrkS):T4X[[*j&hN!3,1,Dm='\%iGAqZiTbU!)?8QPlS[tH6>J!`sKWm_['tG&D,b,h2(%M56m84EbGZ)(W
%?[57jGU5TM$MN9&_t)@Cqsm5Jal?*6^7qE\GV7V3Xf^03e^/f+;"")rR0)SP^5#"0)J+;WadJ8bF$Uj0+mb64=ss`uceLIQ[h*Zs
%R%]u#cAOHN<*ubV4b$pAp>>0FE8pU;6/#BMW>L>K^:LZA#p#'5?B*k.f2n6WlW%C(JMgZhUS:;l>?mdpWl2Vf5Id:3?[DCgk=>8C
%g$H,%?_o'TAPd`!mJb*q6apjWG@)BZ!&j:M0>4m2nGQ8Le]ZE#e]LM?rt+aKkCK:5%kirsg5Cl,kZF$N72SfF%=Pb#=2+NQB63af
%rqX+N?_<61NPu^Gf8$Eb#95ZhiSDEpc'R7%l1(>66P)Hn2X;qr^i^6U25L&'l&h,Jko..$e2o2!h;YKcVf/[*ILg)fcIRpJGJW=P
%\eArYW-#UXrs!Q9\0p[V^12n]!8TbD*_Hq5?A!]RHIX+#R5SE'MM5qUd<(`#qKqC2nR?.sotqseA!9mdmT*hBr2k)7g3O8mCq;t+
%duFjSH+"dXC0[Q)Jfgjom51^1N>Rlf`0bCYWYe)^;+[(k<H1Ei8&\TY8e3BfMK:g[N1V8k"bT*4^AM)=3Hhm3(%m3dqW.V<8)m<a
%":#bPCIF+YDMTS,f$:IHW]hM*MC8)iS^!MYY(JUt9Y4MGQbD<$Yi'j%H`($"Gdk*@POtQTETMTDMBqS9UYDt7-L0)bUfC[tV;9_M
%'/edC^JoB;L@PQlpITjQoo[g5QEZJJOJ0&YpV%S.Rr?&#[i3RF/pB52<L9GG%9;B:kr19:._`Ui?@,-[B++jFS?NFYrP4.Jr301@
%\jnVe@qbUOautDLPo"(gGJjFQ2f9'L:pB^X]t\bDZp.V1B9gKn>3Bj,;Kk_TpZuC6A]0JsJt&*"f:ZEo]6\tejdX\$D$T1M>\>JD
%NG3`bVmgQ,khu!Q`okV/(S_!Es7T<'p%[k%isjq9g*8:U5/"+jDd@4=p*r6$hL_00]X.5.WU5?\E5%&Qj.^l,h%[h@Dq7$)bd;A5
%s8.+b\RVe$Hk7rG#?'2DYhnB4?`rk//YN2=F8\COZ?c(kB<,g*'Bb*%WZ/-&O2ac,(>5e@0><J`q640;bRY5bAOj?bSQ.4\f/;t6
%kRg@$hjZ]s8$?0YK03^$`_0jKj0ARN,7%*,Y]Oooo6m,pme+cJa+sVac0CIg4k8EVQX?'9TI1a^NZMhL2slZk"8h/(=*Z;*`b,7o
%]fWHc#d:8Oc_&e4B:l1+cT:bHZ3]gj6JHg+^XT2ehYXD<S)#8<)mGNpO2b@=3#uPBO4u2ZQd1`8\+_L55'3Q33?=K,p>Gpap&*[!
%;o!AFe)$F0".M\5-dL!9@..S!dIQGYWr0,DG4sihKOp_r"RXdQ(mi8^26&e:?U%9E&o'cu]2pSN5(i[@F7?>9=Z]Q7W$<=dH!T,c
%/*Z3<V5\juD#p*;_UKd>/m.=1XfT"`c9gP,oeO$S:TnuNT6/uY\o$EBKJo@Vl\C,U]?:#_YFduWUcd_TeMI1]O(`u0bJd8hme+Ch
%E)60gX8lus*F'\YA%Zmi`)s_Ym_]8c*6G'kgj*%.H%.q)]m)3]R9guMGZi(@T\_HU,%Fg]V13T8)/<Z]Oum$S<(:DNXUqLZ='p-b
%<>t"@[rV#;\Ra:*p9q"J[s`HOV!8BspBNWaQ8_!-?G+qITE^qYl?'_N-T79kS#)=\51@/ML5"Q%6[N&i4k\AO\n^?BEgOdFOaE#n
%SNrjo-`C7-Pns[Lb9LK']f&!%?el:uk:lGnMs?j'CEiPaYH`g2JHX)%5ouX:9Y9kjjV@'2l=]r0Z5Z9E=k[#ITJ3jTb6P/4H1gF`
%]kZ[(n?fdV<C"mCFY7n!h%*++Pb)Rl5D=7sfbZ4(Vt\=[q""p5F*kU118,X<ojAkOcC^cNSij0jmTl0Djk\O8bPd@FW)LW3H3sPX
%%qH<G)\D$%pJ\X`XmJ_2NO+IYL_$-0dBS-tl<G>m@U6$SOcB.-*!/BjW#s%Z82_0$^8-X/])QJoC&bL?9QN@-$4gn%c]eTVmLp8Q
%g\fQE%P,MnX)3T:T4i#2lD'V%%BLdc#s=1fQY^)J3MubpgXaiF^LhIs@hg7!?/8\r42KH[Q?$man(&H.jVRe@44Ajo?[]M@+5G</
%7CPQ'8kHXA\_F]2I#An>43tL0.#.$sl/o+\D<Y9.NfHc1_q3?3!i,H=#H_S[f!4$H%+3V*?OrLI&UpFRdk_D)8"86\jhlE3hW-]k
%%1U5ACtO(NSS.80b+1\?qg$NaH>j\`VR?7cS8+7PNh=%5#LhL>dK2mAo=(J\qSmKneYR9RU1Mf&p?4S?j9I=UQ2IcYn6P_'Yj:X*
%_d.4N^`d>qG>b6ECk+Pum^]se^)cZA%dL5%Q06?6<SUnDTGp`Sf4kn=#oDjBK7c77mh>*Bg*G_0ZZ(9clH"BhV,r`'@El/`,-.6+
%%gTtfa8PC5oo)KIQnA$bk0#Co_s5i,;@>KZ%^tXeYRL3Wfc<r%PS-X+og`+7hCVeI&%^u,BnI4Sa457?\A=DJITa:9)<jB62nuGc
%iWdlskhO60D&J98`@<;I+*L?Jm>HseZ/6X2=ooOe#M-MXrlVjbPo%b2IjYa'p6WCRH2FVWRbd1Z-Mb$BD-e2FQs+o)>nalSB@!U@
%K?rl6SVPK.g#.c,:qk$GI`!nAeiW2!#'@A`^]2,0qm:Qe<dIu\<$*qe1g-KiI$5f%>H"jKgj%;R7qRG@CmM7gDL\jUNd&((L](Y:
%<NL*\CYF![4K6tElalYc\RFgYnt*2^TlI:Q`%suI;\8lU.]ud]=^3`5Mg$mpZ;6b<'CGRIIeNHf7^Y!&Okn;a@"pdKY>j8Q6Wd43
%<d([U[b![KAYdF@:j/bSZ[.uX65l\(J@,4=m]O-!h:ScH<\>9?l$Y_,k>BqXhs8]^VtO,;npTVgFf^_L]+;AdHY]6tmm(0X7;Mtf
%-DVG/aIento?m0P`B35c`9taRrV,L2Y=)e'@Pj5DbQN3R`Q+Xsf;nYQhQ(9bae&.BVkCA'I,ALjokJc&>d^]I5-AgSaM(u]/r@d0
%?,&F'X$"/G&B5*%7IA@o7Z"2XeYS_K)7E4*6YuR,otcF,G,<U^]Li6"'*I-`k2/$MUjTU8/9\dm?@5j065I?FK84gInEq+Qka@B)
%Tdd0.hl<9O^"J?d(c6?Cf,7f5fnR5,0<_AdED,,Tgd"rq7o&Atmr)SHa\h/@oDQ?V$6Q:"c0*ZI_iP!5BDWD\`eW*"qb,IPXh\iV
%&*iQ\@cdFN4dC-VgB(ci%IW]<(Me0cC7]aUf%gQjqr_Y3D+B3ETCnbW0C-O(=]mroca40gpr9mFlBIfR3',cN]Nj/7M.</bn*9:m
%1U6NHo!;:VFa#bAej+?tf0Kt;gOLt]W?JFp#Q(oHR/'^oo>#aKC!W98g=c?"&(9=*p"bV.G29`J?G>eM$S9&;L=[O8MWNukNt:tc
%+5,O%_Ys-c=n:*)j[UNi$a%&!%(s=,a)L@-.0%%0@HsD:GJb/UaH<*DTgGo*NZKPg]r1D-*Sa2])a\dFnjl\Q.cYPg@*Ui'M?h?e
%[+sl=;mqOLOW+r2_l]if&*Ioq%[p\T.?3-?[l#=AOa..JjF+-VI%^ph+TKKpnjO1bl(`!fpBDT9Xd]Jk1('2E_CmB*CD[$J^L_D]
%:hu8*72X1C<tSa\<!o+Kjn!t4nU./uBeGoCiRbo2LH*(jHu4j*qtBG*G$aJ1:W`.@)7S6kNHgb@4>P:#K&igJIIO@.56a@Ih\stJ
%oS,TKYt?M&#n02MAQ';UdD.CrTj(AP'NnBH"][5cB$C7,KsIKT<e:Cd8oi;j9H=AZ5\4V'!HQ8E=Hj4[7?CQ7Thf@3-nC#d6L=aN
%T;8Cce?ohn7[bSA77C2;&1GXu;)_L`!s[hI"PX<WZDo%sCG:8gHI:(sZOlgR.h[q408)^_+jaOTBHQF^\it!q0I/p1!<_m_@S`el
%4(IPfhL!EEm#,4=1U%b5iuaRU+H!2bWi0S<?95/BYDJ6=*UR8*LWD-S#a6Y%?:$aTOm+YY;dt<Q_e"QN'SYcN7Ri3c.VkJ"Wi@\(
%'P`@`?9j`d?u&3Z'N:@;Yl`pT0)YHDDO];,1n)Ql`0M+>-ja'PCbB0IdqGc\2R-g&or*udH]6V21n*^EX[Z2]Cp5R/s.nDN@4hA1
%Hm'!&8nrI[_L);:NFWe.;pj9:n%s\ro\Pm4]@X]7.V0.imP1OK)DHE];Zn>a0[NoV,otQaZt)QAMi9>D$PX6TOpHdEr#e7=;^7"t
%2Stn=b]),J74r<fYmis%A@\YcL#3!aU0q4^9jCJ0d8m-\,L)=Xo,Yigc3qg\o#pTD"Au%^:WV*8*-r2s=KlA@J&$^Gg8CGGGR"eL
%Oa]"f]+c?n-u&g9-A/h[#7L&k@unugEjk>D)8K6ce!-(`fM+W&E'OHF%ODA#+2D0>]8pY+B8Gu"`.7b?fi'<a:7-k&nYl,.F;"j,
%fCS-.@<n^=mOe.1MI:HJ.iYKZ]0OQ!R-B2G&a!,Bk*BE''J,uW#(.Z/cSKfW")+d9-8Hf4%7O2YW$$[0/4`3.,A*f"J\c&f'Vq1t
%%oU>4)<qQ:;ei2h;-O#DP>%aMM56eZ(,\BHO:%LH9)0SdH;-doN>0;3(qS>&+UVfaU_S"]8jU3#<7d$8bXd]p,uYR.&D.859G`V[
%hG)^s.KE'HP"esJ&Y\T+-B):&nIUgG28(E:dG\e3&IONWTc-0I6"::sm>T=)K*MKfn-G`!%!/Kg9L2)Idp<#DAO)sq/0W3a\r$d;
%%iPr6aJ("3.-%$/_?K69E,O(Q%J37XXqV%AL=?CfAC6%0JcGss?is>.6MKS)lU^fd)XBos:=:C`C5`8<`+9dKs$%Er4'J'MVE(]L
%-d]MK@l-,<?kXAe/P8`u`Zn:pYe]MnHWEP].'UE@C_;26b#4s/'PgMVk#`B-Q"c5/0JaY5,9mVj4uOW^+75`a3Lnhh@TTcC0SW!K
%TVG=_>pV=>T]fke+)2!n$5%EZ#_&_/>f5LfJVZja^`eAJJqCe,^hY.C)?]MU-*uW!,IdhJ@,['i=U<Pd[Fa[&b!;(#Z7HTF.&MZW
%!Xb*AC'n^k^^UL$!sbbOlY<5g#aU1CZH\(G^L&a3!AlQI4r#G4"5ITAjO%a2!1#QLVN_\rNTb6_b,3KH"<&HklF7*oC+Mp&M\><[
%nl4mK)6XRi(3If"XW^Z^V*Q?=TIPg2):.NV.?=L%VSBLCU+Zls>[Y,ubhlm'A6?q,[0W"*IMV3'^F\<S9U;irZMZCd%&"7J_E^8X
%%se^C6SLo/KnQr=:mP_#[0]e`c\TgsYKK@:]N%mBbkBlKP&1_6-_8>$l@B9&c'>(D3eK/T/#`dqaOjbn:dm'WacT&d+H<n\+\34k
%Ji17Q"o+iY!JE-DOA3t.6.NqF5p2mNMNR$fOOnE=&s5LNkK5Vn5_57f$YcA4=JU)q,Z=uE(9+ti8d7A2!Q^`s7F3jqb)k%iNWj_,
%Q7(+.<krhIR71\.;f,+'=]AtM,EaCjRYb4k`7:"XW!?nr6UTm#P?AINCP&6RT=B.tLDh%t_&.`<0KD+"fVjVG83!7K,I_TUbcLd_
%q0?T9RoPn`ke8I&MQ3ATDb@;B,=T?`?%54/B)s"RKLg\)*XR9nF9/Ij1oj#@kGj&e+>>:TcN_Zj#S_hjU')/32.&0K>\NW%%aC@J
%=T5gVp].V:"&*85JMW!@8s5T_@$W9o*,42`pg\iO!Z5$u!$e3+Ybm8>C@L\E[UG&(1rK7jl0lto3(s[rAjT`NN5=+a3.Ue[gQQ<9
%fl4D,k+aD`OZ8U4Sq*]902.Z+BK)l:8W[srs,CF\"BpG2lZet3:@"C/F\gF/Br1L^U$ei^7j?c`!,II"Qn_%@KC3.K"rBd-Bb2.U
%BX!J]&6auYAIKCZd%H4E@()%T;=1TR:UAVcA'g''N"CAE<tCep=Y'R*XH3Z`'%.Mg3A`r%."cKc^'F05@RiuI1Tq`D%('VuQQ3I&
%OX(p$#I%@1#bYL>5%Yk#_;9)pJGA0/-W=r7!;>m9N=09H9F,0%MIM`6[]+ct7f/Gr(^#V\"02e(;,kp36>7\CF-s#.Nc>uu3XSeJ
%&=H`*L_>D4L-d":%'Q*f@NkrPR'`*8&M.2kUD:*e^pZ(=Wr`9iDMf,.,K"6r"!s]SQm-#`oY)XB]4c`6Wh[leRiqb].2n-RW"?aZ
%QidGSbnO(j%'*3T%^X=Y[%aR8[%RJS0m9,_eKKm)#fHeO$m$YtaFHJV'HN`W!,/)t]OHDj1)W$d$ugY0n2k1f>pU'o!4j;g,XFg1
%T5Gu.=TC5l&-7tS=Wn3':]V7!]k%TbJq%BAAr;HIK^rSEi5M0R4>bu-$/K(M.nHC3+:pp4+[D24[$XNU)1XIkKHY^2GKkcUg]UAB
%RIp\F==rM>ptj+<he/2<fU2?uYk?Ye\,PC*bD&dSRC3NG2dr/mhE:j#K0H@pB3$b6+b8]OdHa7#0[WVCon%o;:9"p.E)qOq3iY:a
%VTVD67&'S'"9?1iPUR]oN%(PL"&k,@LlCH5!+:s$UecOQi/rjgX9\@<=^tk]c,6DkLp8$S%l%.Y>FC.WJNTf%aQ(*%$:&m86jc12
%.1?4'eS/hLJDkY[=[R>2#`L0+K)#!_0X#JX!`R'_]ANS>)!rHY4=qPXFH5.9Am0nUIM;JoXRZZ;NE7P.##@Uo$!b_A(Z9)-2M&1P
%.)XdJF<U&V48HA\)e_6__c[=:TYJJ-Utur\Zd;-#IHeC=NR6cb]@/B_2HP8I&L_isOo]OHIS1#U5/uX`7Qr.*%#g;P(:o;YbeOge
%6l^gi7lU+7)cafc;[o$d_'BYf63jB^L9OhqVX"H>:grZbK)'O.UG=m0;]u!kDPL%CP@t>fTj\>r.>.t"K,l+m;9UI;K"+hq4Q-Z`
%:4`XLBAag&a<DI#A:\/"D#MIPVL`GPX-i)OY1U=G5DTZ,6-!4>1Bc5pOCf7/69$p&3=3])*Q*2$Qb`+NSVBD,$`<o6BV^3YB`%E)
%9q`GfM.6hTk/1q2R#!i6[:nAf0Yd$8iY+@aVMhDlL&.?.>F5g.>F:J_;)A`NH4]f4_.li7,3jIgc,hZSmL7U_:0Aj[W_o_P8[O2n
%d'/4\W4sBtqh1n\pD\Gqe.G\\;'N`G+t2XdK(EWjlk$'n!'cPj1=73K'__GkNVKF3BiUk?cDETV:d5mF[/U#gQ,#mte,'#;"X^97
%fQcmo_:D$,GQ;/Mq?%k0d2rGgI/BT4+J7O5"-_"PN0VNI%l*X++kgAj+c+8&T0P:.^U1\:-^aqQrJd?"IrU)c[0bu0gu1dUZ#;Oi
%5NY+hd;8e98fl+:%taS=/GoJdc.NW^Qj-nCQ_15lalR0o1s\A<)t9=-[Lf1$r;Lk,,`t=DQ11Ijb!GV"JBd'aM%E8<&&E^0IF(?K
%_XEO2R_^'S4.<r,TGN+r63j'7TLf(]"=gtrLd,JJj$p/r7JB&(6Vp191b;:M5A%,;U.Me$%+CFI`920[h\/jU>uUBX]o^?JY&&X9
%W)713TqXl[S&)!+D,E!KNe1">*C5K\KV4>kL]Qnb,fre?@2-XZ,^H"O!W3'tVPSAG3j<^KXf*\uW7?b^FrNd?U*_:;TN9[#BaVg9
%8JOC]/BO=k<;]"Y@H_8$Tap5Q@k^D#8Z;\E0XLca'GHCnW_+>Z!7Cm9eJ6f?XN2^lO@1mT(dMDZ;GbL9gb]++!Du9=k>P7eljo17
%.)aIYMA6+#`Clj^6/*U&n<aC($W\t5*[.!;jUWl)9(M6Z#jW$*)Q'3l@Z$u1ls\*n6\+Bu'8$<]BFd@nSDi!ql:<'u,aj-9@KEqb
%!2:keXd("to2$$T#>ZaE;otuZfaJrhVV3l?Q>g^2lH(eAT7cr_Wh:(`'qAf5U9c'Nn4chX7MQ9H<+W!50Z,$DbURY'BjrMsV5^jP
%AjgA>;<dTXIfaV"!&m!]./\AA?o0.g)R.,+-jIb]"Drm5.*uHk6dSOL./LSj8@jI/5"Y<*;:#K1K`JRhjM2*VJkjW-&Y91QV;g@)
%UA90i)?gkHC0DsK%e-))NUVdZb7muF2+o;p!EO_[,lELm<1HE[_KE&V-kMgJ="-,P!!."ub`RK=^1m\),,sW["3Qh,&n1qSW+C3=
%%=9@I>pRN(&%qt8+[i/d"%4>,Tot9(:;IdW2hmG"c-QD[rY'ekE8/ha;dr;%4MXVmYKI853G$"-in4b\4p&iJ&thd=gf,Qo\nn)K
%$?M"7$qq<?L)A&i,iZYEH'KqS+;BE":>(.j/'?uW+<Dl(&J\\,Bab7\6\'J[Op0:?K\%'B.fsTl_r*E%4ld:b-@^pF\-i@P;DA/O
%"109[]8"-5g!k!@O[+#@W!3oXROS(!JkHOQ6(,TAJ7OiiU3'*D"r$/pVn)IA^a?ZZOsqkE$s6+)<]"LE+E'$k'."<Ia/(%ap\'Gd
%6e*&^N<(5\T\*ft8G9%i:mT0D09oS^\.rF(!-(nUB:Yj5RO/Kfb8Pab<I2(ZT8<c&UA7sA:kW@W!`1QcmpH_fe--V@KKJDuJYa<_
%\Y*?=!&c*R37)bi!6IX)'a^[7#Q4*C#Kb\c^&8R+T-OT\M,YC:+bu?dd0G8`,`j/26@WPV-F$dfbdjP>+O@tsd+DM?m.&@_MhJ)s
%-&KLKXeM70-NS@JVlCKCV[X3**]=%U(GNf0FXib$^<Y=E%rJ]5Bl^M<#I@:l.>i>$8\jN%JcA-e2ho*`U>,oG8TnohFja.9ToeQ.
%GJHL22C5q1ns2.!TrZD)6?L\O&FE'MT,"dA4<*-6D-Y(l1*9m`J],o#2_)KH:rB,uAu/uu""_Q->[W^&*N\J(J2&YB&e&m$n2.4T
%K"ctn;5O]?+R'i<d_]E8K^/4"Z.3_4FYn]_-,TiMGeR'a;9&Ymd)SZ4,cDY1LAisiUCPkO-lNGF\h4)WR5&3Sik?u_Cl3n`1)59h
%9-gYS!?+AlKC[Bfda0_6842ECnW]RkGZcW.(?brc<=(4M,>P+2'IRL`W'F*?Br\3hZa/8JQ91G?Ah(/?Y#2^Uarj-aGIithfk@+<
%hAJ[PQ@6`(TmSmX("PcTI13.K,mb*.R@)d)bED!&&SRP7!F&BpB]H($4Db5mTZJB@?j9N-+[hT+ms#<ZB]LS,N/K,^r&@Mp7%bu]
%1bZpPMCq\n:)@;W`J@AN^1Op*Y\'S=TR*sga-gMok+H..Zp=O/-c;ET<Dpor0jR@I4:]_\QluXBOia"eT-qXhAEFK)7@B6TOGmC;
%FFOmM74Dt@&KjraL5lN+!oo);T*Su-hqZ"]"D?MSDb[V6`uK^RKZ>B9o_f$elk!Y&NZ<'+-q'$*G"aW4^OQW(;l9$*JHB;,"@g5(
%3U2J%:^8<ij7a#lOt;^h*_n7;lA-QZAq8nob6UOSPjG&9'mer-YsSpVJ;GXCljuE$I6m-tU)B]k;dE1O'%/^+$t;:HN#;\3?IK>#
%2a\kU>T4LonAq;u1Pe4c!$Pq[%1`SR#W7!!U'NAcC,F?m)N:%#Z@HKl<0#2T+9q$K726[ZKQoG](:?F.W,!#]K)c#o$C.k^?l9(H
%@Di?f-iK%Y+QGbNemAlL&4'bD69tZhRJoN=@YWtN&i4i05i,"-$DiK6&;B\o+#^\jJn)sX\D,OXL;A[uL0jM>)`QpC:%ALJ,1Y6c
%#df5.@NXB-)1Bd16JOS,,jl?KP`)OK!pqq"bH-535OD2>+efQ0T-a[4LCNPh$E+kTjPk22@joe"53^I7%p5=\P2>iR7ktQ_OGYJ8
%$k6A]OH.C)%Yfq!$Nq&I0Jo'q*e_sGcr:cOU3MjYN_"X9UZD-l+JL,*8=C^q0?gkX2\lP0;2?]JjH^6LA;g8Nd&'4E0TOo3';c-n
%napn8Mm)>('c8sYKAd0e-q9lo"]iFt<R>Rr0Vs:T-s4ITFEeACD,YglO;7p^Q>+jgD[IY(LS!/>1dhF0.WMgd9<op)BUCR7k!>s3
%7E6,Y_m(-fgXI't2``1uHd%gmOQ_S_h%#=iA8a9@OB"DJNr*90nh*BZ,Z-3eJtb^."W1oll_Grg<e)5\7\Bag/MTO+P-]b<UdZMs
%!$_NdW;Z*R<M2.a1t`?U&=Wb85U/iS+Z.8=$2Opj=b<>$Gqe3MR7*DR[igAO+@(0iAdDiY@4'?>enUfA6l;_jTdXrQSA@Y]5Kncm
%AHhOHaf3NTm6=9uR7Q_pVIq/;(M9Bg8M.>g2Al^#'Fd!si^nk2\fXLmO[MkmeOHlP!cU!@-#@-2I$+%;VH+u@KnXm*9]H">VSKS-
%Yo8hk@PdT#AFm;F+)"Nh^iPS='-cl-^bCj@&kkiSBGO8I%l.+9DSeN%?pN+-QuMuN9UHC?0U3t1H>mM/#`>Fp9VA=G@3VSE_CT/(
%rn5t3P[0i!YD/s?8\U+])MDs[A/gN"1_t&R*j=tiZ"mp`5YE9tg'FM"*Wd's!Mt=fk^Fccj&QEeOr>#[G^G7@8V.gjO%.-d@>lNo
%*BK/fBf]@],5;_<W#6#"<7N\)a(1i#+6pc5\f"G`jp5$+W6m:AJj<Tq]Nc(DQ$#u"0t^`R<5GUaM.E73#@Y(GEF1O,>4\F[!0t?m
%2LoZ/20L1H#%Te4JVHKi<\Qe<Whc0I`VR5_0bNL.*V^cD)6Z2&$"\KtNC$WcqDPDb+;hWLFY2R?D[(mJ2Ib%-%u!U+Bl'5l.eKeq
%Jn.UM09"<n$;u#qgM0],YM*bhPK>@cjOZX#!+*A(V;L3KK1mDV+7<);RVEE9FhHF++gH)c_`R>JOXWa\8>8'R2%7B8#@%LBl,!gH
%]id6"*\&j(8Y#:;Jb6&%-BHI\AB5+@9k9XmpKH)QIpc9q^rp-1&S;#sUA5Zt['kS65<jA6^eH!gK_n69f3eTt_aFjFPV<G%6mTN6
%cI3_s?38uML`g!mo8H(sSk:8)6hSli,ZHUp@cD.":f;k_b7m@I.&GElAQfnCL?93R;oYI6Bg<b+RRHI6AG[\tT&9p,gaaVUKF&!s
%a?i=C:Vi9p?;OX)@Ng!>!_j12J7R8)&1I.*5hn=$AK].V1^=$^DB`4$bbBY)m?1]]8_6,\"AH`i-r`R+5QoK]aHcq>fd)%R6)G8?
%7Sop=m^UkN+#rcY-NsOjZtb]ui#g>ac$pj@CpG&.)?H$"I:Q0,`la);+cD%:l\"O0ch^J)jk6;MK^!.lj4n?=\C9VO2[X+uIT.r>
%jN",!3?i5kKmF#Z6KqDlkTY\)6a8"90X_Mpnq!t.^sad7/0Jpk)ds;oDSbYL,Ar'm2jc"UC[e72^uH3gI@.$N(]s,E)"MnP_3E@A
%;$C2;@roNLdJ?Z!$\Z>*q3HkS$CE%G(8@T)bpW9oi-]7K(N52*@#0+qM>a@2Kuq860lOkO3W!E`$^8!>:"/ql1%sVC"]'l<M'm-o
%:C`?Zh[_=B/^SlRHnBjQ#k1FqJ`b^4nCf91bmsc2%^qpBE42<_-Y/TZ*r<#/k"+bnJg<cmHgj!aA3`$t[Og5,OYUKJAXeM6:HN#N
%hO*Y,Os!i+EnG+t.ML8RfT&'DZ"*>i2T,2=h"<,SU['iNTfqe!!I81\VpL\^:b^nOHb6Y>MHAu`,K=*o8hDn&n&@+net+ZO:I/D`
%4I^Z6Ss.?$K)d2f1RRHp]bD`TdS;!Z^`3cV`!/"+^I970gM1.E1L+geioc;k[0K&5KBaU'Jkd/E2]@#e*TK!`@0l)g)Q#-JXu_&I
%&fS8E$c_fA1Za?m:(o;01F6%dUa[gl+f^+q3aEe4Z2X%23J5t6C(hfki`5$J95LnUMM>Sl]52-oLlG'*+@tGNl6&#W-2*tbKTh6e
%lkC]-ll3A>-``B!-MCg+ll.hi%6S=n#9-Ee"/@1d=Ygd.?5nSg9Y[g".H!W'_Q[(Z*b64b<Z3"d&BPTbJM$%@bG[El-'j7s4rc4"
%AXeM6:-2oM&Ta%b'7Q1`<^SW>.uif7\)iu37Ee%%LPRt3T^+PQd[g(F6G*o`PA0k`[\-b;8>mP)3p:gqWtg?JqbhG8+aD`lKoj2B
%#Z=Y%//\I#_[UPB1DlcXJL'!;WGQ)SRB/,K0G&.N?@*hp:r"c/UJSVP<>>mX+"GKq@MY?9GS$A(jq$4!\eOGikLX=%i:dhW()`&o
%ObPUEJVl#CG]$b&<E$Noj<HuRHp/sA%YI8cP[L]mL/pqJN,_S@naQI@eP\=/;3FVtcsg32B+t0'm6G&d<KqEifOVCS7+9NQJD:9:
%j(`;f[EHAGP+5K\s03S(Ok??)nPuf`ZZ"J+S>\npRb3+HZ[X4kL^N\5VZmQWBur(.`";QE+K+!_>qp_":bL1McNi&k^f"&&X[AtF
%a\]F&\Q3*?bsT-$%QEnZ9B6LYUB_^N*^"%Ca)*UFbJIO,0%90^TSX4K^E44X7V%S-JhWr]#1dM@.I;`7LE-g)fF4O1:tLL!8CGWm
%C=<Y:+>OXX$8):rr500oqO%*!5X!j1+G)nOch%Z+4A2[;/BHSc'if9pJ@5D2J1?DW<JVcgSk/Oc#Q]nW`rZA'0*M,p):Q<<]eKUt
%N'Cq$N:Fqrk>u:ei-,g-<FG`a;_VhD:VoaaA-idhhXnOd!$p+&^L@%sU*b]kYi_/r;Dr+><(6;niX;$q-MAO"$u:)5deF3iT-e6?
%TGRn.0N49._iRS[1,L^lHXo1Bs*/$u,-c(*pe*has7++u6oB!(`nt.]ll.k^<.$/oOT/j(fP=pFpf$[J)MPSVC85afcsp7I$sggL
%A#_uA^Bg?uAU'u\8`#aBCcBKhqO%(KAX8%^5+JGEL+P)-qY`fIN;XQd#%IX&i7(""qk5nf1EOO9A4Fl^J..mREeN;Vr<S36!6;)7
%-O(^U`bM5C;f0?V18t9kjOSXmg8s(5>(8;lBqRaJQi3FbL#-7bU/4!(N_g<@VD1N-K(,)F#ft1F-Gd/&lK';';5g,"b]GU'6e\-!
%+mo7pL9s)u6eWR*OJXE]SbRkG7cT'dM0+^(lI6OhQ4%)(;\CAK`^>d-9Bo%lObO[laQa3e(E0As$?i3OJhiW>KK!T^a?H&oWL><T
%\j89-fRIXY:+!DH'Fd@B5sn0Z,oIp[Z@[<p0SEuQ!7$oG;)VjS'2%UU[5uEXA,>D#e2L+gN,\J4>FcFaIFDrl06)0RlGOo_d&AH%
%\u;*uThhsT0h"[S`tTnU*)Z"/7?#ORFhDN[cqVMtSoU%3BQ-j[Y43Y[C5p"d*?>^9[lJTD`)E')pY2ZABqNR<oggcF<2si?n7W'4
%VF<b7U&;6Q%%KkrDbW]?`>mY7duf]'3$]ST1Q9P.?(W18Ts/WrP)a_'J@lKIUK$q@E6"qOOUXAZ8.l?QLY.f)qBq"IhE.Zlre41_
%Th6tV2Ff=K&BYof@1/9m;,\2_'U%r0;NV.f^%4Rm-koG^Oo9bC02Elk5fL&>KCafuaCYr>"]1OKckKLk%jh%"N1F7[RBoQ&.47%U
%oFF;`3&*:>[#/\/O.DGU]`XS+bX+Z@"J)b>D_UlQ)THBh.X:?RW<eXfm#P57h6<l9`&$M;a9IK>CH%X;K_H63Wi?BpYGt8',CuAb
%Wh;rAP60pc[%P_ip)aN1JZgp'Q>$e5Y:C_g\tR!H5%Yar"8s]CJo&<=MAfQDF<7Ra3'KAuCY=g6\_*FUDq7aUUdT*lfRJa_Ij7'J
%A2l9mUUP7LG_q'UrdK)KBRsEU.gpqN*gQ7F#'(N^&$JF\5UkVfc+cRiBP/5Gg<R@C28X)lqQ3W)$&4"%Dab3OHMO\pK?#_S"0rfL
%Po)KglL=@O;2@%@ipV*0K"Nhk,:&sfl/slYE4feL>lNi/'Mp4u;ZO*@[T=<U9.Aeo)o*?Fq]2paDbTj=])JQ9>+n5@dD+\q<9\7G
%,!H;alQu_97A1@H@YQ]H(%Im&!^];+:rC(3BNVi2Yn^hjd=DhEF66lGS%?F&CD86)U<2!+Mh3fbB=_InhG?aq+d<j&?K*Ds$Rd2q
%0^hTkf*A#\TT]bbaUK;GX@>Ij;kV(nXU$(LKqEJU[YYQq'c"C53:$bB5ST1Z1DC?4*OQ-RYs>rK;T6k1&LbB.JJ%R*>R3)NI2>5]
%"sE9PT7R(,9cfk*Y]_^m@35p!)b`7In]\KFG)F.1?!n5^8@Bk$.SD8rj:Sdn6f(#VRt+ZVlH`G^7kgQFS6_`[b4ri7KiSu&Ws3K+
%:ef_9_(-.?Hl]!tJVkXX).=6K63L47mtYCR$!n9sHTm%5G>/8aEi$8Q:mim@>!Q-(""(K*#>i'X:bbDI'*dNY#$VM/Ge]q)d<j^f
%.,KSi@Y9+OGZgbsQ\L0G#s``\Gqe^fl6=Y?L&j-,KAQn9n],*7Uge.Xf54lOW(8sgOq<W?8V2NAIa]+$JHZBMOZKa49!40N6cY*I
%&8"CM5J/R_cb24HN*$gif&J>-L"_%?H;11n#'^9q1ihHeiE_%lRcKd5IJ^[j\FVR%`Y%B,;:'j?j*De(k^HgSQ`=$R-$`Y0Hab]7
%l%<bKYUJI-.rQ4HCh*l4d`<E+NN)$'XYg1#k?[T9/4EV/ro10\JC+FS*Kg$qlr#Ok9R%YE%qa2^qd;\gE9n07pl+R"_TCPcct^pg
%:S)Mj5/`K&8H:)3#&*j0L>IA$/BAcj4b]>PY$,!]6c=?:,Qf.!&5=kP,eBCoGp8n`O_/:sb;.EaT-D+0_=/()%D<sK9Ocp;Go2Ci
%narI@<E00i6HKU&i+!I$$+H&DVA0hbp(4$fP0'*%@,/p0AssPt"0MAqd0&[dn^s5d'.\*pOY6Y5m(I1m-;0LKp3iY76[gKJD,E0>
%^Tcq>9Jus/PdHD%Af;hM;=4]81:rl]qM=b3f:L%,,<RSsAl_l3Fe,,1Q^Kn#Da_+)]:7RJZ%=iL[%-2Lq%Oj\W5'hIBZL=P[1Y/A
%q(El[K7qO?<1X-j*E1@*(2bB]RZh?XdFom7LT_btCbg"=eHD\\8#$CC6jQ,8"bk8H>K1AVNaR!3&tp(+ElbQj?4&@qM>9/`Ns3mI
%^]?i0J'_f%Ggs'R,5<1)6YdlJWLfE0]F@,LYd6I(%aFo80h`X#rI2.^cKq&'YO?[n!,G^SfZ#,Rm#B/V"T!4,l,m3PSWYa;7%hJ9
%IA>G6'>+A"*Epnmeh0EWCT9%c-*COpHkHmp@at41;+\6WcY,?_>[lD*4.U\@ZCi%>pI?B3ir/*m*aXK*KAe=m<S&$E\N+o#K\@HP
%U0uTZC!97co#4`!k%?brEjb;!m-bcN!J#Hg5=q*9B?*.[AWa6ro-H`dp0!G7*:$,a6]egof:f:lg6h^&ne(6!L@`.iKd9coa8*Ht
%joBkd5.PfCn"-8_oIVLl57o7UaJdW#.M4@O9L?XB-p1(7(sO!*GphOf%EW`>i=9>d0ToM+Fa_r5Vj8VG[g8\1",[))I9(*'=c(hJ
%Fr*c%hQeH8eCsOC-Wgonj`Jl@dW]7>qtX3^;(q2kerQ`3;_PtlA-Q!TosaTm7E7'C>V#M8_@^]X]f'['\PhC95QeO\FX!7@dG:="
%g/?h>E(03".V%ZdaA^rNG&BM>2ZEbX,OWF#+5n,u5\GPTOG[j<-T=hD-ml#CnLN!QW[L!?b>E0Q,j*Oea@+GNK9O!tpOT/b9=0"j
%-9'`_2ug*l2W=sa)_AoClZjH!qANt\AcR8X)nlulDn931k_kT#VM8s@KV!,_eGf>TFr#4uPZ@h$jpqVP2dJ-kad8P8!BB^;N5YF]
%koE%]och_g8<U3$E2]9=0d5797jH+(Hqc6q6n[/CN6]+`iS6GdGN[)PB'4]bh-\Ht"&tXV]D80@_DgB)4#[5Dlp[r'?js9U/7uI!
%TN18>CsL1L5`@<S1a7Za/Va_mq#7aI"Vsk7r-BE+=k'Bl=NR53M?LJX;V3FAH1pd^PV@hK'JZueHQ#iMTiQTV6iSq,,h9WM(@2tI
%g$q%n?-'#-EjpI$6)W.paZmM]Lu4WR0/c/oEn0m%[Y1>"-;[/)mme)^b0\6nW7i[tFV@ER<*a[TlHmZnab:a@O^X[o<,L!rbcl1s
%Kbif?&oFjd1L\)na:_I[0,+36ZWh!-`/Pc>F<LY`hb@\K?Idl,+\IaaBX"(q[HI8PM4o</:@HHqqbo+2Hm==b%=pmCWL]\q-aW9!
%[P@`:!i)3kM'3eP"V%D=6cs(6'uMmdWjcH!<\u+O3.:8-:'"s6DU'(8SE:*]UP7n$/SJ[M6T1';87F(*:!Zj^^h?=,6Q(<H:!Wa0
%51)PFlqT^+A;`=Jp#aqZBPuIMA0kY4hV5A":Lc;0fKLKaQ%Q.BX:9lZg@%f!qlY+AML96Q7[FIp7Ca2q.bZ,Bm=7q8G*D`VC?<%5
%#D!:",h]WY[h\Tnk)9Gn*dMot[b#LqiTu*pbN%FLg,l)_Vd(Wq;9A!3c38]mQa=U';g/YKV:!C2SBF\!LtP.HW:>+;mVFoHnr\t+
%kPRk::M>9Bj\2unrG7\+jc+)kc8Pgg/'21\^qh?7814aQ5i.%u2$[VXD`R#Qp"GSb-c4.u4V7oO^?aX*B:7"KrnsW)fFC2l>'4j+
%\]UQjp&r11/trL*U%<P?,6cRi<j_WY^2.(V-7KEWXqO=Xd9lU=U5tL4\:HXL=Xp4\4I[I'T882YP]3h(%Y?[]p$abd(d@2CL"O`t
%k=ORa<Sf;<+27<p&%W4i/jK[;&sISH,6/9'<CMKuSh2k,Y3Hs\7gUVQU_ZqX)HG'P0l!_73p"'?N^7B[$Oa*,Nkr31??.D<Gh99c
%TR<FhN_[P5\[^9Y*CGZ0NM1G/$QNPVL>CMhR%88D[]<8CFtnZi[(RR2OS/$]$D.072M;lZq!lK@*BU[g!u5ZRSo*950(`&n\[4ts
%#/tr#k$o7Xd+>f^JI?D`/M6Q(-&cc!CgOZW)8SBf+r\A_)Dpj)bZ2"pW[i^>/It<.k;]iq'F.VWYEN/'`_Xs!2o8>*Hg@tD64Ig[
%%:7/3dkSN,*(;GEqfe()TtpJ,^KR/pSQ</U&;`T>[cV_)K%S^MM8VACSJEkA_S2u[C=<9FDl*!X_[,+EL5RDtqlF"4$arl0N>S8:
%d`7B*WZ;eJ:SpE0(@M;s<"3>S.<tVo\WHYSNQNLYlE6pKh2UCLkK"]EG4'`"F"C)4S\.i![*5eN0[A*-a-]Q)+SNATRpFP:Lk`?5
%EB2=IXqT\&iVhktC`]/d.#Q_G&Q5DJ/B[SC!R5AbV3PR=/CnBihXs0Nj/91VRGRe!('*#@eE"WiH7e.d]-4ia1A]M<&1qUtU3BRR
%+TZUdUh@k^:hs<lM./6HDt>aJ7`?H)#`'"$Jueqs2>*6G)8LU&+Z);fgO+Lp6eXBP'fNt@8/AJ3_JY)>9S45+$m@q5OM)s\7G@BR
%K<@!mN8VCI#iY3_a\MIZZqDXO=GDoQbOlEU+4OP]]ba#B"6uHKb=,7k,ClF]Bt[+M9/?&'(=qlmnBR5NkFh&,PI:"ZfnqLjJnd&s
%,`X$7eY8R%a/ro6:s3t\=X_cnRN<k\cn!s2!f5]oO+j)/FZ4tt5)\Vt9)T'0EjFqOMMThu/0<e6)8?Q>QkE7CY!g8mNG,R_Z*lmm
%W`Pi!g^sBMARH4EW^GB"%,d[(LnX$3i*,YW-WhN\/af7j4@)31C$7[X$;KZG.FrfCa6bEPTVc_D1r/hhUP?'LHom)W5)gS&>MDuV
%`1W<IYGa%"B3bEF8u<2qNsd\m4Efcs6c^&M@o%lim.<F-oNE'rFpROi<0Om%crMJE10)oG`fdB0Zq7NFU/II6$al3[W6m7Z>kKSP
%jBlb;1*UN232&@C707C_nBP5QDB?qa9W"2hf-0ZjQ0Y6Go,)X(@jl>51e^2H#leHDQI4J8fYg,u]36K+_BW+tl?3I%]o#h>HbI@Z
%8lHLNP<uWflsh;I4iecA&f5<1HVOL)HQQltbbCsA95rDlC0FRXhhKF*(r1LE0LO[gH?Y_<Q;oK=gGPUE=]WP,<-FK8$Sg$\KXS%t
%og);0(f`3dKdrR@:rA[r@0l<b8$#cMal5c.SPZ(k5*6,nmZLqcPc8Ug>m.;-3U?:NN'g\=hjSi@qQ^^or7Q!U?/N44_>?uI=$Q=7
%[7"K;p[!u]M+eND<sh0&!Klq%f*RUojHeD^9..>Mr_K(_5(f\Z:(=/\%'.\Bg/801_R,H9[UY:_mOlnmmaehK$]-PG)1KUa;4iL[
%W,q*XME2g1qtuS51e**V0%>uggbW4j_cCM_dS@;V59`.]r(CSf3gtcp3&d@5W)%KTfnI!m@en)5)P_R?jl=hIC5n?uJD^$[KMskm
%mp>\Xj4@^e/\"0D1@Zm(ho>&eKm,N:G"@-9:VUrI]k`R%--7g+gD?;dD3+3&i5#L_?ide:hDIdWb)g<s+/<)$Tgo3C5dG`Kqg'JO
%Crp/E_+-XB+dTUmU2OB0)H=ZOe6qA/N\8IDL2Dm]]s1/FpjhbFYYlMi!K^@QP>2C_lU4`,nhft.Obkp7o=3h8md9,4.ij*.QL<>m
%/.>]P[#c?,_\4BnPKnVNFeMTI+!6qCI;5a(_UGEHV79BLoM/TSQPLe@iYp[D1]#8:f$9W`L4`A,AfJPck7D]L%Q.'[2uTucl9qU/
%E&H7e@[$Wg/-G]iKtB'kCDhpCTMYGAb"mo0cms6G"L+(55Eq%mD,I;<i#O>%!k0EVfEE2`kdsHMLo7',%h6h<@T;"=7!)71"ZZHW
%;?2mKqCAJc9ElIK&I'N2_52]&QIZADld3DIV[Wr-.;NWP;%&hA,fS7UI\.I5*n_l$0lg*8))-;fm7;O'L$B7.`hUM8=n'eT`Po;H
%'H2M_PMnME/[6Ne(uYlmr"#UE"J"[DCR=96-1_5E[=TU;XOPV/Lq9CC[`AeDPQ[YHJs@U<LS7f.:1#t\d0GNXON?OB=hmEj!gYX"
%Mkm#[7R8Y_7*OFN<3&D>#'b^:g4@3P9L;Q<g1:CDeq:s?W/l61';70Fj7s"Ri.2L;'a8DN=bfgVBX/;eli@DZ1^d1neA^0_@&bDL
%oUI9XiE29h$Y:QC@V>!c1<MWHCr!)+P(o)c'MYC=jBEYq9(egVriC1D8>jA\AU-H:,G>_:4,ctHk.4Fmig<,$nHauoR$"mU8`GLr
%Wm3;&i+G@+)6(Fa,mCo;'EgI]O;t=I.U<:%4R"@p=cjDPGTmc).Qo,a#=Z'gOsBo/T-q`h13b^O`!q1WOHC'A,*<.Xk!1\:FAh&'
%??98#Dc$q5YR:iErQZQd'Vq*uTU=EP:e-\TIR$H0mD`d;k)-taMG,k^#rZ6b3>-@amfML]UD5SW7&aHKC;L3"P!>rZ>`&;,V`Q[l
%A6B'V06"FhIZ$<4rBuF+?BgZthN9tOeW.YQU@#iD>F88_I\[cKKLb>/%+p%Z=e!i)r[XfU/07]7j@Ei(F1C#8KgA%CY`ckJ(=($K
%m=eJJZQBCiVjJ6b#?M86Efb>$(HCL<a*2*bFe[:hjLSDj9tcW&S/]ci9d9g!1RnM]lJ;/CA3+Zr[$..JaEQ0A<M3IJd;^CL3$EVX
%plkrL1sss7/V)k\K!Q3WOMCO9l:UMT,t$j$iRn/Lq]tm6f*;:qQ'C!aVk>Na'l561=>*CPIPm"#cM4Bi@_rFBWT4A;%U_1c8L4dM
%EW/`%-JcQFGglo).Cj1dL?]ko"-J1,@0\4\Pk7-gQ"AhZR1=4,E?]+=-n?#9\lGq0h`1W=pG4ou'p)S'9Vb1l[i;ueo+0gWTbpRZ
%RP<-e]I(NDB)ZD]01+K4aL99&5Mdh<fuAq@+9$olYe";AT]elq^uhAO\O4@p(-0n#Y%WV@:oGr"VkML:Mt892eY:ffh'c75F>hm^
%ZT*:/OII2GY1ro8\ZnCQ(ptS#!C`$/(E'X!XH]+("/KQn0\!fK%KR&BTA(VX5RPbS788<lT_G_8[btnjHu+c0b*r>"eAq:P'u%if
%;-Ed_Za/;URhX>Xj.J/ui3t\Y>SDjiTYI/nTOeepU:r%VRJOhM<`:'0(@ApZ%:8XnO@3;oNr#$"5W*RndCMb"U>56)jLHIj!=AjB
%n$V\#JL)mIFSioqer^g+Pu:)L[R)P]UtX<^_3eeLEJ0,sk,@dWCa+Ube6Mn,OTV'F3W$&rAF@5\7BX8D.DXo5nObmj?0%=FS\)rr
%I/,P<5(*>CI/(JTq`k&T:NE4r\2s?FcrWIt:i=j[][Llc,U78d_)Wc@dmVFDi?E$P+0=.7*t!`>!nroAXNP/05gTaF,h6E6P/F+4
%G"Y1pJs3_'OF>AM#^@tZ:;?lm)</Qd"Lhkd/ca)eXYGuQ1S&StXPFh?U3krN=$D"\.pl&,qI#6[?Apo%1nAA*^5IX\KKGfkg0uf,
%fb6G>UN\X/hD-q8W+VqfgVg?3eLFCS;6s-+V4<W[$JH\"j75\.7G"Kd,P<sjCg9rQ_FWHd"gQH5;>EPOp%bn=*-L2bhAD%k#eQiY
%HWD[T*?kn+T?$&D],2XSM3i5`oLR@1g8.:[b?IVWA8./88AM8?7&%0RAj7!1]&&usoh=#/1LKA_foLp7(-jhW`?i=;B8c9<o@GOG
%5(.Ps5(*?uV0GRhU)kGEM'aR_8Prk,.'m(DU0!&0WjG'/bS6eURiUll17>F6-5j^'\\`7J-pOKT`[4,CPp]PFiF_+]_.Ys<]B#:$
%Vof2<a3u3G-:Jr<e5NH8K]j:@FA'9#,p,=#%9'?F`*:l73n.5aka1l%`g4`&lsbFZidd0jXAlBi%&fVVKTi'g!^I/[O,NbD]3/:h
%aGH^M`#tIC^S=!W?3lf^m.G>uJe6oG+-+>p(O-H*F?D?T7Y@Hlg'D2s/m]jbWb9HVP6G=77A#j7$&\;Kbq=(:iIsT.#fTB_B;,%7
%h#e:25!X/%fs<@gl!L<[LCM4q;nI%8d3[h+X7p6^oT]/D5HnL5jGOD=Qh58(FPgA0"?_*\)/Pl\(IF2FeYRLVL/p&%,&pqOX1c$Y
%Oc-1T"-S@G$8u9GdDJG>aPd)k4$EGFEbt",VOpkQl*/]/)&H:iL1snDPSNNu"X%A1RBnsNW.On7&UGGUlQS0`kiOKbD\o+Fr6Tl`
%-B@<@]>bM3rf(/C*U0U;oZPm-F2P@gD&W[ej?5$$qIHKh9QntaJALC3OTH9F%Z\-tL"&1U^jMYCO1%8Nns^^:+;WTqD#qAj8sgb`
%W#^9r\[SjqOWG7@8-*rnZC`7GQNMY"U;,n@A'1p%1rXH$H`RPnm>?pVSm)pHkcq.`e:o2<,_E5nCs63%^,.q,UAiZS'CMD`b#9W;
%rQ&TI?Y-T]\r3Z0dheFS+25m8eM]$8r$?Vj#jK;qL#BqVD8f*h[oOD(^,E$hl9BE%i;[5%fl#4TmTk*@LtRj4#(B4<&,:.N"L#Ng
%R0>8nLXlp-3fn+&VIRaJ='<$Ph<U48o``s3aV.G%??lW+`icni%6XMGI[lAf<>kRC%(WW71A$]KCEpXkXAmLQ@o0L3YCZ!:fTS>5
%a,enBRXH:^ncnX_DPYd6aZtMpBEp;Af!KLM;u\Z'%60C,]?X`j!073G2Sf6s+,Weq1J-m*BEml0.*Y922+"O]XVL*hZtTPc!08ZI
%.PbN?A.F>&+V/B780Y4:qLY``1^%jHGlje;adWGmVUoI)%(q)G\Wg?aiEt<]BBuDdj,,;alC-u"]t.s'qXV5ViTi"le%WD:YIM?]
%D!>gW3]Q?gO9on'4Y*r$U$p"JFN+M[MVH,c'@$n*'Y=WcaNE*M]%IA=Sq0[9]#c0>o.<JSn^br#SL)@sYau^5qr?oH?^K(fM1KV?
%;a'/rdbhtTHc7k6fLC8k=&)9^Wg*K<[[_6&@fYdsM2+@H+e3ZrpEEU!B->uA2)>ZEoji&:(YAg%HrVP_7kC@]hpO(\&`>i2%kL=6
%UJZ_"g=42X9FiCJq#Nh3pLXnJ&Is6M[<jf<a%)R/Pp*Wjj2ghT\"*`^:*M\GS5SoX?GYfK`[qYi>ih;5q6+g4e**t)lm7W'!'(rW
%&=+0S(9FqUL*9&:'I".f*#*.2AJfnR>K%u5Q:QgO6)VgCTgr/!%i@8qQX=<+iHGkq.iR+H$k[j(U6mnm5n[*g3'^4#OEIO%pjih6
%D*\j+<W6YAei:=[$.(pNT*OVY;sll@)H:@-"Ss((am>NJ$`+nqX%S/EY:l1_\#[]KT&Va]QoTZRZ=Kl6natfQ4(MJW.kt(am>X)H
%!cCW>/1Z]9-b9(G*sjVG,bKSfkO$qK,bO9In+mn214s5Q>&K]3R42!jOd;@s=pQ[6LrPeq$h_/q1rtW_V;V&5q*_^&Z%F33[^%cI
%BHcNe<3tUS5@]tAY;-Ipp!21nqK7P7dpKpHD=Vn5BeO9ZN7jpL;d=bik_MMP>[fal.5%6meh_e\,LCu"dY7is"Bt,gQ*Q))naBrG
%&</lsZs;$T9O[bW#et(UrfeS\[<n#^=K'D:dI4i(/Z0il5#HTqNQS?%3@Z]3`!!k%.P,Clg14Y\KlL'K3HktU,82[^Z*b1.#KMQ`
%KE5MLA/I%5%H`h+WDB=:9j$1Jq7:*"/#UF-:Q-B1//[WUE<HB1O?>&2gEmPl4]'XI*0FVSC[-%!LZHi!Y'>!rC)f4,4MBGZ2%G"E
%l)CUCjh0$FnK-#JEF8J;-2urPZP<K=qASSH='#FO]Y4k/8PeE01<qVpj,m9/8&hq@T/.uF9^<VeGU*[/*!_NR'P*BF,@!U^fbCBG
%Rs7'^c.MD5dD.Qj6@a\_4T7=YD]+U#AVb5\\$-"M]Zq5irgVP\3n3U2O%8J^al[JCipjefdG&5ia!2%#XjI^j7XDi#*\=R$n1tJc
%oFd3L;P/%a\<&XF""(L:d:hp(bd4j.3$+_`W=L'Yj1pK&e`!@R3%u&4'_^L19J/-n[mYd'!KPBfW)6ralL=9piHS2R#cq\JR#!G)
%*+aG4N_DSF17dtWoFpXCq',k3G!<'ZDS(gBJ;:>3Jkbjr3oK8g/+J2o-&uB?"1pt]&_aH/a:WbG>0Y2&MoN)$-J3o(oF)Mc:#q_H
%=<jALM8g3_O7c(;gmQrtIOO%gNB`Hm>=RXKq#TouOX%I/Y42XeIj8#i8,?Mcn[Ri$+W=,d3/bI%d<J>dXgfZJN);6J$'"jL;2B9E
%peeMU/"9m7G^Ac8C4$k@E&HuLnHdBC4Ej2K9-!bi96?OQLQ]UjQ=rBe>uaN8iF,94&MJ%Q0A@dc^KG%9fG3`U["a<dF\D6!2)]hm
%hPm#-jg!6p>ZU\i53nNH`b@P^S_&,_.^rE:?fh#TdP)j_dF&=k0V/iFe_Eh:J0r1?*UtEoNur*_h$?7^PX)W&pT&%7B%I%('TGU'
%BaL9mF+O/?/[R7,nV?X_bAd@s1Mjh=KcTm99+8YCDe$oB358*S*oTl+pSWg0>,f&?e0Q<B%G$KZi%AVCSR(e)gdS2\c:1t=nj*)U
%bnL9im@kA#1UEFpY)mBoQ9;JVj?[Y%:8\;>$VOlE75V<ndV6IWaKtc7.OHCCMhS/LL)k8>aG$Lr]."rMqIF4n@?'QHK:S=R/5b4J
%"2AP<rcGi<IU"V&?X#<KI!sQ7o_!@UDdQd1Q0;<$mQ3ht_,m\?R3M2=Bj*91)1P+QHe5XX.3ahnIGRAa_8TSPFA[ZCkd\58aFi^#
%F/"e0G+0J#RjB2,*8n:7aIfb*p[4Lf@^!;['&BI(@ERh"^ILEcV"jl`2d]^8*jnC^)j!S?[sCqAHoVqk.p13%`g9Uo54<G,O*J>8
%0POd/M(YQ#YEjnrdH0F(ZM``&?'`$MZJZi-b:(-OhG8^aoBQ4:&C)/cP^\lrE;?'p$M;NsdK%WoIUPRp3;1=rGY7pr-E:/9^tm%*
%-m#t#q,Bk;(YT;fQS$($?J0f4!H8)SE!oNN%m=k5:iHNY+K>3%`HDhG9>NA'1q&<_qfVEu-lrIia2SbFc,eOnp;80j:YClFI45)S
%X(6D!Q$#uC^t"]J^[9RZdZ\is[Ii3l=taso^1G897,f`6*nB8!KSk"TWb^Dj,[=biY=C=MjVU7uXDga`6KPQV8UpRO@$1$B9fLHK
%SF]c0Sg^Dq?)8s<eLcHO8):&rZ"j4TZ7/D5hfYIPWMi!lLXN@\"M=OT9CV.FVW^dbaHi/Dph%cdE"kc?&WFhGjU)K+XZECg\.E\W
%TSf3e*UHS0OLTTbgol2$_p3-F`9om9`%<s0'ASW^FHBE<OV>Bi1K9Ohi(I+<P62TC!AqbPh2jM[h#XY$/*'_LBgSB\T-Kh$GO+L.
%k`39d*nWI(=%&[p\gBJ5X/ht@nATNIFo1IH]Q@N]^uc)GVP':?ZYmKn@gLeJ%r2q<FWId&`c83tGKEC:-Ca&XBBXYM=,ulGgDuN3
%k]j&$#TsY#0fEF,U%t9%Lc,Dr5YUriRNX.B-]c[XO%J*g.;8@(iFXuP`"*.k`C]`RI?X`tok:4.<5`A5S5mfN9*,.\T>Ah?f^u2Q
%,-h9`?aK+E<^jLTeTJ,iikiiORfC@7d1^_HFj/"@\3;Ql,eeAGDRojsirt7=8]5>7<W7;='gi_)1CoKcfq>/%oM4e-eeJf\X'HTn
%AF*`$Mdg'O"[ZVU>>b="ROC$Y$9a@f,I#]IW5Ng(Vm>=0AMNYI5GG2*[gS'HJ.?2MQEEbb/3=.Vf5/YJ!!XJJh*ck)NHmoU#1\QR
%kgYNopjo`p*?^"DW+q2`@D7Z9!]jlfd4%piOKHlp=Vfe3)QKV?+t616$J8]CbS8h:eLbC\THY\;dM/?;cBb3sJU"\1Zhr4:HoSgf
%c5'YRqo'l5@sr@Em?5/km-:=[\F?Nl?X.md=reDd,HVcKhm2u/DLg3DI5p)SBsLI-28`Oh=3WX;FK'g0>gB4c[\ek\PZ&-NPaWk/
%^oc<ZQA>PJC8ip]C-5%o_CB#63?+&q2,t=.Op81i$.`kt#>uM%,'2O=gub&bfV@uCp@M?q=;7*7Is3[&qbnQ+*h-)/l'6@U=aIDZ
%A!`W+<uIlB^<3`[DS3R.1?6!Kl/B&8c_sUh"h5;<aAqEj\Bk7q$'IUUbW)inccl91AFZF,b%J;,45*1*6W>BM4-*.?99XXiMjYWG
%hU$CB@hFIG,GZCP+H_unbV^EEn6@7CekISCU16`#.>fU3dW3=t'g9Nq])jWdgg@.`5+#ight91kOO9W0)shKbk*8]+1a#d`Q2drV
%^,)%ENrp;O&Y@XMNJ0@IDo2I4)BERMg'6>>hZiLe^,+DK7FpVre13"b-I+$)Th`9-+MZaVO/aLK6qt$h,rdFo.g9lh&%]Xe&kPWg
%pEq7%C.B:Kei\]RL2B#iUX'S!);RJAjsdal.heINS.R@M('dIt:`EhY[2@CB3iJ-,oObXXqiOC3^Q#^KV?b2Vj`Pe&aZn[E(5Mjk
%"Yj)&r.iU*ZffS)EcK^3&pnKQli$gKSSqQH>P>d;F]We%"m<)VIiILg'4;Wr`A=/+ld@4YM1>%8kc!BZ&mi'L^e=pkBME8D/C;b5
%%]X2h[2CV:7CWd*]`tQ4?qX5N.C:%F()&OO963lWaI<TeaKSY-7jJMFR@M7F3It[@UJ<KqHKemQLh;o/m<9tK^b[GBQ<P*LM)8?R
%'6U7C!4q])I1o.D?#tHA;ZkOFW@3t0d1Gp!BK&2KUXkm='G$XE-GIm#i6%,C?sAIj$rCb`!2;;r;8Epl@_Jk2<DY#NOd[p_<I2fA
%TeUeMc6r%%E8<8!?m0A&Co&K.dj^lnn%J!qVrlM1<,--Y,mnsefqn'KNt"!>V3`!c]/0hEX-[D$rc.jtT&,3H78]H8&pQH7(mqm[
%RFG^n,V_p.fG>>&D>71HG:2/=<8aD:D@Ouuh;;u&>he3eV697V&"gUGQ[ef.2>d<hkOY8DiUc0Ero*J1h6'rTebuXj\#VUI]Zb<I
%oAcb#G.m=/2spL/1jh]t0`\YiB[s=6K^g#aqHjA7H<54\e-d;Q/<HttOf!"7',?@d;*dJ\a2oqTB\l$n3,q)hhma8)L''0=@78)1
%hM9V>hp@*%60GcD4E@V,,e7?$7<lFi`s-J>btOT38O9^R4'bc%[3$V?f+I2<$nYmR#:@(l/i3/6'N+N!.Ti`K6]&]&WG`H`5bjJI
%2W*DJZ5m#ae;&tJn_s)kXG@$T0<U.Ln>iUar4'6h6NgXuR@!OhkY];oCr&!uC]V!bm)Z)r%.QpTO$mB3U7F3<l$Ao!:4)V2]K>tc
%!H(Alc\n`4>,oZM>-7*"k#8Qk,)I<g.U!i(:'.Y!h*=hBd`\AYfQeV=0=%ep\Yl0]XYh^[b_hu_o6==ddd`c06Sa@8>s]pY3+P.K
%GqqcM]Zc?q?;PtNj^$9!+=T/_[B`a-cB'UHAO]V,@oD2GF!"C.="0,t)G96(0\<\an55=PKduuDm$"B]C^AUg""ES-9r#plp+t(h
%\N2DVI']\/M?DJX`/;mtm!>G@fnNtCY33aoQl8)hXN<HgW*;"$j2SF8il/$4VX:e9VoSDgp/A<mg'1M6kNWg>YP5G!W#F^8D5^gU
%\e.Xe\[WCIl)U<D-#n`!/M1(?X$0e9@^Gp(7_X(YZF8i=R6WS5P+i<Da\t\Zj2b]ha)'M6CL82=nO<5BDmegb0PD8g["n"l0bQr4
%^'q2;O*hm%X;D<W;F8.fHdu;?@bDeDFc$I%K+Koie4`n6D&dT7:CCI+T7#%#AN&sq!:X^f;@%TTZ9u0,U1V+(&(/W\C@K3]R-dZ3
%\HSsG2mGq]!OYq>d0&[!\Z$VJ3Za:=e?;eRrY7S"LpXmp8Vu=9C+ApECBGr[9)^$sU[B'EM+k1mrdoOQBNdb3lF^8hXQ>noL329_
%%:1__,4K19:(+Z1%_Lt1'V9/&F-U"bG,BUlgiu0n?eTh+TO$2t+$P1np)=gj[1-de=P(!SBn[?^Tc*56\"WX005e]I@dnSkfsb02
%4At0MKR=gtq&A]:eT/Y^$?X9Fp7bR1QO,i?WG^:$'J^=.R0SPPH9ubj:E6YA(7)$\/RZ8-*!.QDL^A!og_4lFaqGHG3[q`Fq[qgV
%Hk>])1f5>aJu>^k$p"Cs&SOer@JO]hho4.\[lJ.0'cmg)U"CWB@cY@$OIOrTZ*t=.A`#\5Q4RhR,PMXib$%2m'Q0g.]fdj%%2S9c
%M9"TFPkUW:X$,VDh=$+T:hp[E(QeJY1)ged0W1Ba\Q/fKYNBR)WGBm+e=!fL[cF4gV90iW[RBf-i7^[S;NOLf`_p1a4=Wk_d'`D\
%XN4Yo.aT^:[/rq9^^1Sp89I$6K%<Un,uU;5g63s`i#O0Apd,Ygh]b2>Wdcg,bjYN=[Qf$&PdarQY^uZp/\&YM/t8nAeb3N9[MRl$
%Ys":l)g`n7<Er`]k*/Kk%YG`o4%HR;2"jVng)s4E6((40Z3]n6S*V<hU,>[_T-&XJ1r]c8ZkOh2[tFIo's`6Ep>sC9Wm*KgnBr\d
%O('Mg]*LY8W[G,?E?8=2B_<ndB'!0\?"Ds1@7P*W[A6MU#K^edSmC"H:o&#cGq_ic^s=C/TkE>.<`(G-ba\rIT)I`KHnORj`ES)!
%1/9([\^HQ@j4G-EN""=rkf`3i'4.I7;Eq7cbJXRVotXr#ZWod6H_Z7`"V?QRS*uQ66EuYF$^53fBp?Hc_)I67e<=Uog`d]hC:%,u
%ZFsq>AM*b7nqL6mE^;a!:6Xaf1nJI1aWf`,T\o&dO+'9(r_Z9"YpT50aH*Xbkeeqj:dV:d7huD/BUZ?2Ud<sj@K8"n#pk9hUfhT?
%n5)ca-3;.:`Em1KM#+ldpo?bg19JUkXfV&o*?7sLKbB\A@>,K5Fe%kYPuES-;0J*p$f&WNWPGp1b>qNG%&8JY;P?oLNPhf[$MB9j
%0;q]B>Sa@5_OQ[N$7bh?o=2mY5m===O)qLV$3k5%#cc.E6VnMp%EDUJTo*pt$l)aG0`@*,MkG[`R.;f+=EW=UEf/ct6gQCF$LI,Y
%Dgpn7WOlUT;ocj:<n,nuH/7Ygrad&o9[oiX-sR\tLjG*/=-'fD:1UQP`Nau8B-2!d=(!Os`0a?s-*@[s*@arEXaHjh"Af*"]!Q55
%*uiU/8#sX`"TCe;EK'T".e%b9Lc`prm\'CV9U7klA0R#\i/J*Zn#ja_HeM<dDJZlF)u,mmh;p\bL%I@6%UZ/1R.Qd)6='C@^+iL)
%=<:8Kq"2E`s18Bln,N&fs7ta5mdBQCiQm"&dPL@Ts,b"nc[Yf#P<\s\*c4jnq,C7E%dR21Ed2^+Jb)*Brkl>#a1K+`a+*ntUWKlO
%jG=#3M#6^;A&M-ur1DdVJLaPhOe\4N;k<nQXIgp$!/=O6ZcFs]]^gpZV#TbMF$&/dC4$](;++Pqk^<\Rk?N_mE^Ln8C"u2X&WprY
%Dtm2>SSg/>?fs>/8KE-JrOTI^h^Q%%>-CS^DoD$]^UO6lh/=D8ofp/SXP]$[m>pdUs.B>bhqT=@O18$ob_,.us7@D"0E'j:*rkWR
%s8%4-rp0U]J,d^\mu@<Bs.f,iC4cBP:EHM,m1-s/H62u)6"Z4.5tsml(e9Rni#b]o#,hfPamAnmL@[,&LL@lB-NfM`W8e`j@8$:p
%4^nho@"$-+o&_724oabr_#M(EmI0ND\,63<RHF.k@,pj=m^"=&ePgU)h+\uqSJP>Lj)k4J8q,4Q^_EHPA)q@\j!,4ON9>3$Mm9U\
%p2nr$E&K?+)>mVB1anF6_$MXf8Z+c73QMlSa%'a)NT]g95G(]:iIC^M>78C*rU93XPIeC+7K2u[$17c-oBu$r^&(%o06d.tIj9I@
%8,_[:rR]s)LGC\r=MbR88VtOndfUAA=OYpj@R7ja$E+Egmn(OWDud1VhC:^=U<#O!1F'mrX/lha)Aaln#n\k7E6kdt'f+o;Jfg9m
%Aiq6f&<Y6O5m5O^J4!fI&8VTN_XZ6B`3`&#kd',Fi6D<[+FXO1C_X(jDIO)k_,h:2eKE)8_*9`[=P6hK-2`]g6F^(_LOj[p!6Nb7
%_aO30!2J/GO+N21[%,B>c+Z06Vh$X#QqGNtK':aQgHF_SWccs.m)'X%?%f]Z2#8**Y(ml"C8JV(0$VKd*O3UY;eqDe>6E!%E/0V7
%;mO->8V[SaFOUn1iOTkNoLWM3Z:D?%8'Wl1=M`2g,VI`c!8[+'<!6UB[`Jf&Thr<RgEuXt1j#m=S(oZ_^r'7+;jpST(]HW[\7"G\
%'@!-KG<J0KX.CnI3%\YKf+Q,I-?DDGJ%GI1@D]q"M`(`%="QE[DC8"1LF(E`^jl%)CF!(8E]AM=@;:eA*)JrEf#7.*nRtU,'2m^[
%*8X)Ng<:*56k](_RLWKEk(6!kHhI$Q`Q^O`5D;Yk3\n^c$/gPR:4r(r_.m*P2&iPL*%kY>Xkkm\in6khqlhGj%O=2<m/%X:E"9h?
%Ppg_(Uq34kB^d99FhPnqZ]`sdl!Acd?I(oiMkqqO?meVN2nISCM9rPJ'Z@E(bsnW>V)i5@M&77#lN=N>Fo<^8'/^.r)mcfC-k[L!
%@*T!?i5iQCOs>u81[_d?):JiA"Q9\MU[iQ,6>W5JGmECt9aZ%.FEYISLur;K(SClMTbS$RnYKq*8<MNt70#O4SVgBo,ou^BMdEZL
%Lgd[GhHXBu35[SOj.,sD%?4AO+u&':#dOF@U@.E-F0*Jk\KS\?^9%]L+sRF^e45=X529%1O\8qJPuG4TIeNbHkOuM(WhdE%?.`:(
%30OZkAhbOsHBi8;MZL?Pl/!bDN])&LTaHs^N*':'L(:dm"0)RXJ\"oTm0GAS[86%InehJnVRL&*?NHa7>Z_H?gCpi=.\4o)pefmX
%22N(NFS$@99%r)9pNhHkY87qV9ZTgLp$2FAE75NY*W+];+"n9,6n*@]C*QI`V'=?/JLQkbauBp)ge+D.^=ecNm#2T)9'$`u+GcWu
%NNAPniZ7+_?u*'*:nN_+Emk4>)_g.!RmEFr=+U(HZAK4*>SX^;K\QZdocR4l:u_&0rK)RP[QR=n0ZYtkg^CX")Ou-l+[9%fj=G'L
%kkg;kZ*PJ1nfE&c0iBB<M"Bdk8=l"/.`Aup1G9kG0ddBK+%0p28epG@+>Jk5q?.!q&Y"=\bnTe\5nVXMMTu?fR^iHRmSgW4.Vhrg
%_4B7BkYqpV4ubV7o6+fGT0cTfK"Yh*6:,3qFN4#H$=TTjj20f`J0\7774Q7K@(FK`9ZNSIhR_BER<Pl)`.[A?@OdX1Ath#t+,soN
%.$c5!kaA#gVU3&hZq%HU<_]K*W;([>`h]JQL,RKq@]_Q%N[(!T5](*i_KLCTFBK]:G/eAu.K'tM.5;.c!atQdjKn;:3=97R)M#8V
%)kS;mf^9F?6"r0dW/i:48RJM?GXA0K2\0KuDc=DT;8G/>K[AY%:K)C`2i-'<[?_u3h`f5+4t4(Q>XQ\)8U[ff<ceKbi9b[^o]9R[
%d&Bhhl"8B(DuRYuN9,gFbOE)Dmg^Rfhhf)Am9P.E_2_p\L?M.RYKD68P.Y)W4`-OLl:mr"Ze8>T!UG!&kD]u"joZ`Z0ohV:D975A
%*K#hIaS,U8/_ak8A;Z\^W2%PVKjSI)9@oo-Ffs-"4UF5rm5TRJqX%a9;Zbi`n3;Br(NigYT)\-+%'qMDMh[T6aBUO?o\ljjfS@d[
%@uff_0,eAU)L0LPe&o.87[ZSY]P<bs-f/C$IJE^tVO?Fs>Vsa-FS__WAtHg4&RB?0s*cZ^@&,5ja]1,kbP!P,C@=:.pD!@*4*WU6
%P^_"f_o()#2L5.97b`^ED`6?6I/Y&%c"]$fRVqT-qO?6te:^cs73h6<kH?T"5(%g[+fEBN9r=HZoV+)7iUbZgEsR]:d@eB0H)!s/
%VsC?[Vs3PLc+4FX^V[5PnG-in47(/V`n`Sb.o&f$A^X!l&(A1/k.U@CcV6R)@G`#N9"e^%WJ%opn@^U70@Q`+o,:*USdRp_[ps[)
%n=*8T^=;e%k:+0\5&`1UpZ*t^!DR\t(kG/k@Kqi_Y8DjPQ(odA;nQ]N^@R6]QaM,dM?*T@Z8tE/&e2"J*Z\f>.Olf\5j=G:Mo&BA
%7\USH5S&uu-e=PR9^mEQ$/6Xb0XJgp6@BIr>*0FIFJ4TGNa=4,7jcY$%GnTk!WOYg:t@QX<)NYUh@Fhr7m_lH-h;L&bsIRPXs7;P
%:RLgBi^-ogZ$^(+NR9k[o'pWVY>^ZUKg(p2Z,FFHc.mNh2#QlbhnCkL1SR<!i3Rmop34UD4QSKuPdp?9\)09No2LnN@_)I!H(DQW
%]ZKJ5$)Lt9rucTXbA]YbLouc8KLa\@>%;I2LFkO%'L^*u_tG[kkaU2:P1_iY2&Q/%UPlF?S+gr=-TL_KpFf`hTfd5<s$D0410hPl
%OW<Frio:skBaj0E`sgeXj/!DPLcO2;h>3[r5O4+@dc9KVXE;1!RH[&0Qp/5?PAEdN2`U[&-F`SH<>_Z+?;AncTZ2PZjQ6<XcA(_f
%*/%oBflA+_5^rdGEI*B^7W$es<c8]_q$=3f9ONQ?K&56jUpBDoWU`-S&Vp1!5fe%mqWp?d7J5l;Jg2*i?Kd4o`Fb!H%YBr/h?9gQ
%F"Be?nis68LH?=N[3(VO[)l_Y5)`TDOo5A!-YW#7aO`^U<#+?2dTRnf)_(kP%]p<<3i4qJllM3X=,PXpn5%AkG"'iq$S1rg;'J+R
%a?*5JR0uVVSuO?M0NA-$,%(hkNhsP$XG/'a>1Kl':^oQ4!M)-S00(a)*4C%,ps?B>$*H:X)uaNS@oJYJ5qHG@AR%@;/fHFEQXqmL
%=@ejgCh.&?D"+qP/dN<uKQGe-1.kX&r`S//2PUIAlsMYh>^HYKW/0E^]:"?Mj,i^$=iK@`@d5@H73m[Q-5%:\L<>jO#6n="hq88?
%$X6sh`ngT0A1c;dfuR@aa>7W'E#(=D5$;6[+Z:/IWGgKESq'E6:>c7/?E9;[G<,J#!lD)JE?'jD7g2VH[6,Ppoe%j%]G[Y$I!r=@
%LftYnLXY3E*6&lS,]"r(i/L80c5+f33=Sp!h@=IWlteL*jdBYM/#0,3OOd*<FKm9d;lg<JJUZaCIYhBID*MU-7t!4=mGGDN&;R#u
%?cSafIK*Hc,&9tTeC,b0IuZ4+;5kERq`s_dfFJp3`_7!oV*gYBEpVfAr%<f7g@+0b_Mak"6NJj9`B/]r'M4mX,d"3';8\EelcaXi
%)QQ+c=c^He+o2a,<//*02VN19U'mOW.4Loe+rLm>^Zt>]Y/jI=1!Mt!*n98@EO4\Ii)<2N5K#@44V%p<7W"$%18]hhhJHSl<t`-M
%Kq*bh+KQ,(\"B/q">1*83i:,CpXn,ffu-_5RKS[7;m[.-]YVXnmYCO#]Nh=?kpLhYRg`f#[gqaq,$]6BnEjch%eJOI*B'#5gjg8`
%g4DB:d0L2"BXle=c<gD-W1bIOs7Wn3;,LX/<a&79dU<sgTln6VY6.(g&_i!K1A4!UO,Al!r+Zg5K=ZEo3tE8#Sr-tZG.[I[O18a'
%0jbLeWcgN,/R'Ab3nqdpPtf1k9<`hco%J:/2S@:fb%Qadl->#me9R=fMCkQ4JTB,,6,[@o(lRB&ID,_?p>PYGmlP8P^On><_</*D
%-BuE8<QtSmJo+ql,%t?(L*3j@S.9sJTaK1_UR+:&^%S"P/\>!:`^2u^\uuFS&<*YR\iQ(n'&0-9)IJQjjhobehcGUVK7Etb/nQa`
%r"/edm/_#Y>`uO$>I"&MN2)/-&q[+bH-pu.b2KHUNr%e&%NCa@%`tq\*:AjMS*J*mPp'.VOcmOK\[LAF]D'&6_!:u%Un+79R;Q8f
%k?$mCFaJN)q[Yf5DnO?&A0#pFW^]lJ#(X8FlM?OZmd]VLO'?JC'UP`"[PV\X-[O,Ig<ucqSS2=k(!W?+WH0t^KALgH*Ss[=:\;oF
%;L2/G+-i`eqkA,(_>`G%RcY2Y%X8tm/ZHjk][LMY,[89T0]'<D];NDI^]euq&`A8?M[c-(43(P*.#@:>)_WXjU7d!1`7qJ?MjG,s
%=$HG;_I>7lcFfsIC81lfCVe8hccJfuCX'^']P-b'I4q5b/'P^FDRgW&fY!hH*N&_"fbr_brr&5?MVKRcDKH#`CH;A:p=_kc5"A[X
%s/Q;'?=EQPTZU"/s+/id`;S!,n;ifXh:]J#;7+]cf!k7A>t+E$3ugK\6(-PHn[-&6N7;,+b\l.:r#Ku>\gUQeFR20bZ^op((FpjJ
%R:\R,6Uu3oKWZHF28A=k=g/(-'=J5N:R-^Y=g02cGN!uhD"238>LSoA>J<A[fZ%J<H*0DB`EE$Qe2R'B%<:tn*>7ttQEGBH?5%j+
%7isB#Yn-]ioq]><9GoB`)>1XY)c[F,FTm@L8?TN`PL*R.`\p!Y39J^+jAMuq:P1:cT1i5o%_>(-Ul_aX"t60_.:gNjc@nsM[/"Q(
%+fA[ar@f5_F[S3^Q4Ej;!DVurOJ=/>'10?5C3V%;ZVip$IcdI\P.agO<Ga%nrY5<;kd+Q%=LEZerV#:0I&_9'Yh)J?2C>)=P\sTV
%-&MITP<,]^_OWk2$pLlEd1,8L4eGKX_(h1\Ml`F.bb)Z(@IBo,3BLW_5H*1\k6le7iI'UC\Zj<`\o3gLL+c1TXFFeN;`QXh6XWiR
%d3Sp=ZS+KQP#i8,c17e:2i+gJU?i81AYA97FmhlfQ@,SE,$92$c1jAKdL`A)?Kkdk/00X<,j84XIO(2=BMsJO<hLcThQZ#G$>q&P
%CUSkVF9j'mL"[+3A4+O$66b9e.jB?-FUPi[BAOct;FQa;CF=1-SAnsncN0\&;E3#q8;:hb6W=<B/j/fG)P28d*hG^V%N*ZWi<XfK
%^>C;\9m-M7En1tR)rQh&7D&RO,hWKhaO0&$a4%T3`3F5qmC]:ugpD62qSSPK,AU-7'ADM/!?ri)Q]gp.55,gM8!K6=]Bc1f<ABlT
%NCN]s3,[H2D_iph].<`deHk-m7HM]'_sHifI\W:6LddU[N!3;V7bQDUnKAm35lI#%W%%!"BZ7R`fc/iNQiD=bdb42f\lMHk+EC4$
%s.PhY[:t$Xm/pR-.mtr3ir*[6J9Hk9i'Yi4f+TT1d?q:!1%Tg1#Kr=Tp:*A<"X[`+03`'60/o3B::u$[95"(Q(sqkDm&[LI"q#K"
%9k>3_iaK0\<(fi,j7iG[^W"Fm_BDqAd<MJm2p;HF5VcWJLbYTsgIsppKP1thdh,l@XO%""IW&^)brJ/f_aNT"f!J/8jO&RAV2l9=
%,MB%k:HuR]*NuL?VE5giLRq"`J\b\j&"PVh,dD^^9%e5C5;Stn'FS6eNTMoN.=l.2DLN?rkc/>mLIA/?^J6!'j/k_L^J2\*I@Lh>
%c[t/jre"ne@b<_%V/jDKrQXlU:q[G'kigU-@5c=1Ll`^:fe<9]*OUG,5Boo5eE6I2_lm%Qkai)bpH:=Oau_?tW`NmtPjUjjrYQ`N
%l6W_uk7H`uE!LOE#@[=#ea$hQ^Yan\<19.qE&1R`qE(`aXs:oh(3bqjO-H[nhfL;mZ//8.3&jA=XDIHs2lL%-IH"fso2]=<Q*7<G
%IA?@e`!J]+I];lq5.1scGp@W9Gsb:,?JVIf;Y4W>lEW!T;1GVs/e@g;rGPTL^3!JMX*58"=535sG4b4153&W-GW1c3%g^;Ie'k^^
%ZIH!_*bc@l/u)PH^p+":7/O4(lU.3E5NkT-aCq,I@O-:N]O`f+\pP=CD5E!3$W3s3Vb]O+!C'rAi-tEe<Js3cMrkg!O['R9Ft#()
%Xsl@`NKfssc]S8q>LR(?YC/tiqXV9-!b"ojle_K=dKfSahi@%RL2Y[S,HBHVKmTU6!&O8bW."$["tmGtVRuT:3;P;SR0(`&*L\XM
%06,bfXfJScCNa!s`'Q'0:(7aShL*@!8#Lc4.a];,qU+`=mlYE.MHAn',6+L<`fDI.)V-A$\)^%KOhA@W25P&H"V?f>!s@aSXb433
%n%4VWKgPTTMgQ+!?j^q])rh;D[nO&Si0=Yj/!r,D[L77[L3".#W\ocm,dkioLhKC`#?;Nt"W#\BgX$SU."1qC+!&*h,2)#qRm3#8
%QI:S!4UmH:bkU.**^@@)A,e;r?0t?3>**CW,BO3L)=8d><-;rS$Bh0Bp_Rc6MXG,5>ZE0B(cfm?)!HuHC2-$k;$UVilNl!T)u/'a
%,DZZ16?<MY,b`2qCt5Kg&Sf"CBB3tsgdX_WcgsXRdaWk^V9UZK-L,7T[!ZBN+g_YiDF(W>Hu;6Wc>]J[Hl1b.-rUMJ'.uKIXd5tW
%%h/HKeO=uT5kJnCeH7Lkp1\9V2B_iSL$E<prjDdQ2l]e@'-k9#+&^[CrlLl+m]TQd^3kCaDC@mQ*O_qacbl']kps-Tj9GEQg'pbP
%D;#Fno[*sn"rJc\6JD`eUX;Rq[i;Wj54p4JdcklGm[e#Nc$S\h[$!?7L*g5Cg'u=!d0XL^cI+=Y):58:coV)!]:jA=K04.$Ht4SK
%m=nC2q/inN2bMN%/">:F\hC0T%uD#F^lE7[L$)N(5Z;t&WJp+`D`.#Z^VA<='kQ"oU#WSak]qorbN`<8n7Rc,K1bYA7FRnL;bVd0
%+?G1==>._;!2:QYYp!69jg+t67Za:dU@=1[IXOPl?*W5DCT1So%Y4j8-4*5g>3hh^<g0@N<B+5]UHFIsg^<q4]L4K$5uID[P*1!W
%LJd<(3s?<bSpK%L`=Yp#!J+._MU&QYmmgWM'5:Cgi,Sg".1r6B6Yn"b7%*_$K_,\AWu+_:Ju4+pH%9.OeCi*8&A;@[PhK2T5t$N6
%:F;8D3=gWmB4(=eNT1,20l#1a$4%DT-3>\Q-dasK!E@`"KM:25"$B,/kSUo_-`5m<142b@Nsc7ZR9U7J*Atgo!jsb*&J0\ki+'l7
%X0Y+aa4[heqc97*:M2$*_2>`eh7X>oEqNP@MP?4MftFAL:DpmOB3iClB\FS/&>5S%L\f/V5tZ<q&i<PGCOsc9kZnIIXJQht?-&>J
%TQ^@7(;o[c$S`$U'dXN=Y'pq-<(W;dk^pV7V^SK/4`K$_8B,E"1LlQ0A0?1hSObkskgnSP+$LN!;Ug<`)br7qYOE3F-UBj`9s(f^
%B'af3Kd'@!_.gB54@Ul]-X(2W6W@SG]UtaAB\M^4'9O/jbDGEt`QDUQ2E)n5b`3iJ:TQEUX[%$r]F$Co)70%L6C5!ZVf)G%G[c1!
%iD+3/7]J]^3'"p%(,2IhEQctQ7&dVnTC[!+^O7lQe-=FnP9$j:#$?GXd-PG(#$1hc65TH&mC[WnqSYScOeC6Y+9c3?H.g[MjDCM%
%!-dgX\/aid'ss@k=fO`N22'GCX&6d4i/&FYi+05STOP#T)cHX#Td\b)M!/$o0NZbU.X&!%Z&)8/FT6rsPB0E+-Sc"g%*690h4!9t
%-G0BRMApNT$+lBV^WBjhM;+KmiT!Y-/Aa;7Cgbto_Gi6'F=@5uT?I/ENoB*EgH'KYJa]M_,0;%IQ>Cs4I>;(]&60RBZFB**'U:Rp
%Gq]P]R0alVZ>I;qYUsT1JA%>ta[WgjQY,3ni!:&gY1XSiY/COSARr1O,Z4n:c7tT`.%;h%CF9oPD$us<OkO*qU??cc15>!?+A"6Q
%6LVW'-tH.40Tq(`1o!SOiedfJHse7[JS[%d$]&4!+mD'BUt^PFl&f2u-N$CZCsXDdp,'[U(i>_P]mE(gYTZ-#EU@\q(O$5[L6`"!
%Nr@D1hL9QRgaS9BYK[!;TTMW.Lqb_B]3n,-6CIf6^:<PJrfIa:=6r0_M^=>3g'-SWO<8Z,#T`X>"F5nf^Z<Z7OFq>pqj5DpI%9+<
%a6QfK`Bi1n6OpC_\/*`:6(V_+hcNH[1ja=8gVclLrZF_Hc.J,12:H5tZ9s?dAA3&SUJWC&fI&"J8/ob43?Q#O"8B3Ljk'=e\l^d,
%D\UYA(ejL[P0jsOmPkGn5^;6CRZ=&#M0qH!*g-W">'j(@T/YK\csb67h7[R4JbB]qX-Np(/h$f].S+0.=u%Hp6EWpoR]uq#J/1O_
%Ih&=[I*/5:%O#Ch]U0,6Z-gj.qSf@A\40*?ZkI!@PiZTZOFcV2)*^f.R.W1im9\QL7?gs(#M1PrRt/p$"OY-F/V(hcZ+s0:Yn$[^
%"1\1ED+i.6No<q.C&)c[XL1HgX.[G$5a2U,Q]kb\bFq41+_pO2AlqN[KS*GiVJO'MDsGk=<M#*s^I?2EC+*P)"Hq\J.4E0bS1?_h
%fOl1li827*nMjf6a;@]RTSbonljctP]W_p'.5'2PN2Qg7e@l"i4Y5#[)B+>J<#Ifh5\BnLN2sdgMXjTR%<b.[VJ(U<H@nO+)-X,W
%eM:"KCT4?6B-tbBdKaPXBd3H`"dQ]E3SO4TA1&M;Jdh.`8((q#Fd=6$N*V7Y7V<;7S7/HBD]\8PJl^Kc'fUpZ=p(2qFqJ7W[/s>&
%KBY(oA+aea!$>Ob_F#YU@[ApI4W)`cL'jP/(0]"1^V+hdGM2t\%kf6XG[O@jb.]a$jtD)N>GSEu`3NUK6T1#^fd6h+M^Z<"l(u:=
%4Cs:L4q,3B43_7"EHjNnOABJ=b*D!,5WtOSfrI^De%8=amF"kli[$V+@*;!?)QXSchn[uaaP_]PhS8NK0#hntRb#(mrNm9fpiS%Z
%1H9[K2dZi'#Cb50Nd$`H!G4C<U/QS=3rtU4,e9&3eTcWS4qktp%EfN[jJ^];9r(b\?Z\TJX'G/CPS`S7K"-]<F1++<C#I`W%M(N-
%`MWS,47D[aDn.+=-33VY'MrUi1's%<VK)=tmiik#3/W"^o=bZ,'2Iqn,EZd/Mq*X>/&1>#*/>'iaTQECp/B?23)&>me_ajsM#NPL
%',]HBo1bM16odgKQ:':<p[<Jh38P,6B)cGl[[qm$l:CYVa%K1AJ+i<Hb9I[LpQor@$!<Q'bYBRWZ$Iqe6u[et.jBqcZSJjC],;b&
%GQQGN!I,FVbkEogjQO/UNkZ4=9Y)f"[09+^F5m&k6prE?J`*$Fc.@#!*NH-]X9`c_&B1[8"OsA,bh-\dcNMInW^=90;3Et:GgQm7
%d?d#D3@0P8!X0Ceo*>Otr#fT:>RsrWK6"`SfT!DkfU$4u<P5"MmqWj=U=^QQs1OD25;5Se[`NJjV_F]JVjYrO6)V84_nd"jk8T6g
%)rb\QS=2>`2GcaO/I:lF>/WZ%N[WL5gMHqV"VL6X!,uS+E;H6_cb!m&+11I1iiWM@!"K[HQ%:VL2$)u%.AdepGn>q8)ZNiS;#)FW
%<YK'PR2.b0EX@Fl9!gin7MI`5F3')d)31kiJ.:&?#TOJ#N+>ctMEQhpS1f:)6\g]^$L\Kdgd6pM3sc$-?=_<e6_XQ/5..3f6t(Sr
%"K5)&6U2%LN[-0L"=VWM7qQU`C@DZ\Fq&;6/::p1E.+sq+YOC2,G9g&#Unj4QkI2>Fi2Bf1ZS[pS^C85XDe;-l)IoX<H?M(A[M>`
%<+1n+]p8':$qtbGMS_!M#j*B"M]se5mN@^l.RQ?+76'N99Mg8&Ti![toW^;pruWQC,NZ=5(H!J^7?_Y,`S+<9:'c+q?\Sl=U7K)?
%Y53tekWsICd[Ue@U%Ln])IbM)mo_(43IB&-!R1Vmh=@Edq3K>9Ji,+;R+<?2_d;3+T:J`J?\F@'@fhCK1DK,.Lt9gBCXs-6O[/H-
%0-%"`TNG>[Z#HV5$)^p>^V4HVfGEp@,;q^7e#ODJ@%=uF'\d.VYiTN@i0RO4kGWGlU!Ql\aK]_)+`Q+/-3o=tjH)Zi6Y.<IXE9DV
%<^KfIV?6ttdW&k<.7\)KF1lHYjmXm'3%J&h,Q8NK1p"ua6.pq6#OuL<Pn2jmm9Vt1OiBpMZ#W1+aX"@3nsHEm'MV:Bjc9GFb-h&?
%;)[t86%%DY!AWT`@:O[m,)q^IT(;@7hc8#C]PFAD)T_k0;=e/*rB8'\OiDeGQ.t1BDZ5RUp6Q$0m25^B3c^f)*%c:T3?R=;/K+:n
%Dsl7FnHOF5RQ&:4(WJW,knU&7C[?G]IZ6Q&at@j$aA5DL@I6@Pk&$`X.5mQ!m+aMi+a>&:DtPeScPQ"C]cIDm(I)9jI-]KREf_Z7
%O7,c<0r2i/r-UP.L)WGNYLY_K/rJLJ96=Qm`fM%1%q74.[X'KY0lmkI!//fg6!4Zrd4p`lWOtbn0:JHU2H^K40W8I.al50g<CHDg
%Tp-shPQBr5;Eu5c?@DH+0G5sq95Nh5-8gVL!BN1b6Q<amN$]c"Bje#'U>N+<`4=H3@>i!4Z]Y["&[XF89T>t[aQc%lmb(*<-$OI2
%Jub[Z!*2eCL:h#;WcTZLV"PXJHnHlTm?e),+h=5@33iMsqHA$<"p@'P'B>j@)g5YeG[RVP>@\lYb17[t(q=GlEXL9G13a%2Y84;$
%O,03SU<R]Q%Nm=[Rp2B@H>jH*?K_mm*#n`Y+j0l1"GriHd@+9RHhYDLDN4lA"1UZ)!$ic&g>N+u'*YP'g(`XpVH0r1#rrHf'!NB/
%!lUu+ITFN8:Xg/.:mgGq:f+GufYe=JAZ]]$.AS'&?>d'L2I-asnR4=f(.7K5RQI$jqqJM5aTLWLgED+EM1#kr.M=^J,a^[/J'/'9
%NBd%]bT`96g7`N=_!-BEhV,fa^h&-CaBMcYTrtGl'5@o``!s54:P29o%Wu1`CWt$j-tnheT`#Np^=GK1bfc23@!EIPK6kL)'pts;
%An-</"s8Bo4d0CYf<WV5:g)4j2n][r)lSR^5!):^,]&9hqP7)[bFhTd#+eZOQ<77APMs-i1G<PaB5Garfl"L?H.NDWpeWBc72'9A
%1e<[RZ=DZdf-@oAmDY:FPLePQD2;>'Wpp,Y#q.F%Al@#<hN143Ke##U5C65iS#CU(2eT<t3XQ+^L]Hj)"HPpJ:Ti&MK<?]&#"rXm
%l#T[!Z9A;^euImMSRp2Ua`H3\-+W0'<'3cCkaN$M6$GF>Il1j=l=W_-E-BD(a9Ui#COH4)AP%/OL<fK$i>qf>j8qHNJmOmdc^s'l
%Gr1%F+u87TFD%^k\m.B!GY^JrT'NS4cZmnPE:XT%a?V`[b8)!8hUmS(f+3M[Lic,>BVNJs+BR+p#Oa`/qkeT!NG]P%3P5=-R>j.u
%M59?<B[IL.)7'E[2L?&g\sF!%j7lf]$SM9ZG.^:JmX$i*PC^a[b["0g\!(E5U=Hj7`@;5OQU?rY_D<N9MoDRW.+7"JBthUQrI8)-
%fJe422ug+G,#J@I2p>n-D>Smq)18QAl^aDkduX/k#8]Gu!!HfTm##hr+&%Ri!6i119^Lm`hQjID?ug]QYir8up,e,tRgn*L9pP3j
%R8#'F<fDEslW,Q=O\7EOhaDrUBp7_1V^m61Z(8he4dXjTFj]KF:PUlV04aM*d+iOBNB:-1O=K[:$gfSdj1D7=%U-=,*o;UtDZCW(
%CH:BmlI36BZK8OIh%eV\>Ag2NhDSL+bEaFB`U936p$KN\fNlip/:Z(0rl&mSboJa4pT;IWI;:9r]p@o$pPaN9*ua4,q7&<8iDTci
%bkl,/n;>bd=pV6qP<Lh[Kc6.n3M>j;?`V$-X./uE_YdX2mA-];>BU7j./mXu2iA6ZloQ#39^Q4/]c5>56W1"(!UXfPhsUr&]1MI.
%Kk9_7b/j/-3i#U?Qeo!N6E?iFa9k85n7N6/<,,!Fe<'&6_Vka*?o=7'U<_E0ke(?5?O/*-@<#!(`Rl4S;bOUU0*j#)J:N2`^qp*]
%40@mYl&o4U,7b`9jc!Lbj!nY\53R>eF[+68@9^lB?VDr(M)oZmB9JZ`CL:):,6YlUXtMWL@/dTsme:3KqL3=*730IJ.d1&gl9*PE
%L@29Z(+[KF-(tq5m\b4Y:+r,.qW[n%rOL(9LQ1NNdlk:o1V_J<:Y:4f5HZd+YBK0<D7+8qkOH,KfHQhMLMC=\f_4t_e,.Nk&l8D#
%c>j%'F':ZjIehQ(cVo.MQD/NMX&ll"W=G,NffjZ6<Pt8..??^a^9jRPH(!i_PgQD.,?#UU0l`&tgX50B8)D\D9L`X67/'<oGM%t#
%g#T$h9U*SaNruC#ZL)!U>9CP=bGXV,pM]uj4[Q)4+%0-j8YK-[Ou@G0agX0S*B3V-%JFmUO(u$8_%P]og43u^0p*1)Z:0ddlKR@X
%^>:;aMW@btd[J34V%jF(S1TiL.5no3<j:^.S7F(=V_b\U3N#U."0g$blLX=BdeqpX\dWP'h)^P5I.'kAn=[nd/W;^l'QTt'iRo\[
%!`sYDYrT.KhElN/qedT$NZG2PAl)@O!QW18qDu'%$)ugahd&d6^TfC>IIk(*m"[F4D'<a[4&O&n`nT'9*+sVJb(IMMPW"%5TXH-u
%l)_rB6.+=OSMD6K;Wd#?R1X3=`A,Ws4<F[E8[TEnTIc$^+06diWB6p/,=pZ//Og@F[FB2\5YqkT#Qk$g]o[f18bjk`MQUkd0,]q!
%%<^/[0l_qW55:o_QQq#l&UX4b*kbCYEudYE>nA)PT6Tll5t1Xeb2,Fh?(P3J^]"`9(7JXi&^B]H9-FA5C!K05UFlc\XdD,p*]ZJR
%"\^&n,;M3Ontm")R*C-M.h=X#;DHhs"k6Z-VC5nn\pbp"&.H>=RamJR\^`GBM-SWBAT0*&G+s)nfd2F0FFUa<*o7&[n>gWZ#W(e.
%\1o-3Y/CK?"k^/l&N.st+94Q/1>tc*j?W@K-u>M3+U>;!#(*fi,5Pn25\dGD=@j0Hi(BN$"/gqA:74;=!.`NP(?E8F]F/c<1b5Cs
%1UhS3PR0A>aL.q\eKP:'XeiDtUAP@1pMFXfHq_&;IV&5BR/N;dpetf);Sh^KoEpCQ1%ItKp:DLRi[u[a^A^1d&'O.FaFWpB:HdmH
%"9"_11IU0nOrNI85Rq%kg)pXG0/HQl>i2[05_6Ag-B,a\l)7B;Leg&NH"A-1\WQ&hgIG;m#!-]LDkI31(Ds=4oF^-.1n#:CE#ST^
%*B6dAa:frf)_5KP*I-Z+gMH2jIbBA*Eo4('I<\2o7:1\K/SBY_gq==nX*5U&`0mKiiKJgj.W$ASE&nZ$6'R]jd23flIO.VuR)k>Y
%o0bppjCU[G4*s[#m:`UFkuOkr:ZORN8.6/W5UgC.#YJb;DW,$C('EpgJF*=_nauq&5McO1%TjZ)BKK(idV'['pBgnf10gDe:D(2_
%#:;?BJT7(@hiQaj8=os>E[`7HM5,SJ&-3V(*s8PAAUo:uDt%d!'L!q'PJd#K@5HUr,k`S;&Hb&#]ML#:XotG?T$3Ht:g645iC*#f
%8-LU!&??W##>/W/96@s&@fqa6,_NTEaWRa)".Brir\p)('S9a;_OIMgoSJrGpLSbW%%`_\kk`YK,\"9]XS?rc-1O>EP0r&%?,Aqm
%qG_"(P6ep3k@hFCRR`bUTGPW5s!0hOfRqu'.$9WtRc,ZsoMD5;LMR3?W]Y\0^qS<(R[KJE]@97QN^:.87YF5Sb3>*!O_).D=C$A.
%_N/'BIa`<D1bXjdQ2Hb6YjB/ck5Yuh=^(Nu=cirFM:cK.ll9cX`"[qnIa2OX+Nh;)MPGH&H20c,i!CHIBZHgKD<RWYM\90D5KM.`
%q@A4fpmLK14#FAXmO1+c8$`KF+GnHeN"X2D:H7'b*`tkO88s=D<M<pfWM<\!mKNNR-$UG!-]+U3li`I0j,?Upn2,N'VjX?m)&OPK
%Eau#9W,#/8"VaX@k.o,W:<_nQ:SQQt;o3]Up_")YZ_7USJCk,o:AI]^X3@=ile8)G_\4*pF%"+c]Wup3`0t4E[^`%f.bL,Z`/I/"
%kRL"VbQ;==cFtNn[t92t!%C;Fqi(_FZ@ElcLDJg4`le@`_smtK:F&/>*cmR2iJB-PHP:Dok'%"T<c+A'll2Il6LU$!]+n!G<F/[0
%I"9l%nGu'bJD+F)-$I<oI1f:*.4e>LX?]ih5$1%Cl^JHtm(?Yk#uOGbJ=o445@^r9Iaq]bYiMOe&)r2T[je%_'[Wci2=\f+d@9s+
%'"'"nLk0dtB[bHb,8%@P_P)<]"U9ED:DqpW[)R;e^]6b.X_I-%ScrjDgGXEXW\L:nPRd10]\Ola[A&DWBR^d1i>ElF5mW'/Y:J=D
%i(OJD::c&PGdJ;/cN/T_a?F;.K+INC.-c@+QN%-n0YpmI\stn:3'.6t>b3,'PhGX1AT,(WD9g#c9Xq*]i^/&2Z)Uoo[BP_[4k9t:
%b$S/uR<Id&2<j*S>QZ79jE9OF5B%`fJBeN%g!p:LKCi:]$42folB^_T]&.at<eSs9BA&\CD6KC%'ktEI.ndcSS/(=UTbtWi:II3M
%7J0Jj!2WQq!#-5m4Gpckj)4QA\CK5IWMk&3JAJQIM;![]T$$>t14^eFMD%(E*Akcj.^`MU5N?Aa&TOXNF_jf!LV,:6XNRq*P;>bf
%Zu01a9gr!L)G2IKZOjMe$l)V/m`5n@)61>D<5.Ooja5@;>[pK,7^F0"AJsqcr)pf9k',2XL*_QuZ[ojrQF,lK?L0'@qH5iAl%9rl
%j--Kp.;Iq`/k1L&CC]*gZ(j0_d!O+?=,l$R4QFqQA$0g^>2r>@dA8EI>XoY[&:P7<CeZ]S6gUO@hp;:9cP>+]H#Nr.;(0k&8%Ais
%[A1@,_>M@ek`Fi7=:;-\$\qsu'u5q,L7a`Vllrjm[bscuWUA5H$P9EO[s'FijdZB_Z#C1X''2@BaD_5hXHE63Y",Db2W./KfM3<X
%(Ar!:B4c/PSgcSn4]=*Ch.ffa\,ceg`pnTuHsnHK5VTO$=26/.hRS_kE'nj!Tjrl#SX[0Ki#=SQ%*h5,H.;"l.XIfON9^PidCSU%
%*H7!&/&uF$dk+?rir4N1Z<ZuAi<b=Lq3hQ`(Y'uLfcrcM<NIXX-a,Ubc4^?;TTGLrX[1K>I^ZNeO_3AF#G1=.3?C+cb!+3gcf9uD
%P^)nM.PQF:?T)"QE4HN^%_Eu8kTB=J\ZdKS$p^YPpZJ^L*"mP[!!=jcc3FHu!2siZW(M5"^`iVl3X<2%].QiNLChfUI\Uu"EXoGk
%7@&cq;dMAP6E9ET5=SpeVi?Vi2Pt-OF/_t\rPZpsI?M(`*)&/#6:`qc!UC:HA7e2?3#0l%IX+^=M,Z^Xd7d_a$6E90gFHh=$[b!^
%V1"4K^8]iN(;Wh06_Lr-U6=7M&16I5c"QuS`qbA9`X[sH2X97dqC)DSJtq#NZ78Aj[MFiaFD+1_kj*Al*VGF\O"dP'!+`-=dZ8jc
%T,$61rMW*_[_1"K3ZD<R,,G,tnn"Cc9/T58/mef#Xu)pVi4kD^]';!0>qD$W3Xj$Irc:G^Yue>`AQa*l^8u-M(_!!)m_Cr>-G$o!
%XELpTOhDgLQIW>7g^'QqU_c=)edBk;?0e0=iY(n5j+/ob[F055WeU<UoDmV>]R47F-c!`>2_)HWVIkY6-@T?VWCD/d<bXsL1s/TT
%mG'Y8@^j2!ZN6uq325/Un[(Ue:1*1!k]*QJ.eoI8#uXR!%lqA91AM4D$G][ZWddDLfM=QmWZ)!t20a3;`6WTh,+o?dS(+U6X^G\A
%9`Zq:!.3Q7JSmLs)Nj"^W$D'H['=.NTbFks[(oKd":XB3G%&C8+bftnar+`43._G/*5cV2Mi6'k<QVM^\1ur)d2DbSNUk_?&!npj
%6UVrJKT$:dNe5_q!so'!29\a?[@.O3p)u(r)U]?sO[]4K>J?KuKk.4#BfDOmYNK-NDo\-#r!bg!r'F6J!:la<8cW%3;!ab0n"!31
%AXMf1a#`-N+RtR(&[NM_o^B_tME0D/QVh95!qj`^f"#:[LX9!$KUI]&X%%qG-*DWsi2(\B-(\7"]T-WJ5JbB/A@G0$E<L'"UYmgA
%UW)LYbCZlJ3.`$)$:!8semX;!l[_pmM5TXH])u'4T6+'gdN*;"6`%4<HCm]Z"Q2&^\V-DcDMIgg[3t>e$/e/7H3k6<)WO.Z_f><,
%.r807=:ID0a/ps,6CC4d)g`_SW,Jm^J=5C3%TA?J;(R^;6dsZ<O'R0qm&Gtb"D%S2[H=>gZb7iAjE-&:9LJ/:"EWL@`.pBVYoi1e
%4\:9`)MKD<0%0\jeb'67QSqUPh38X9"G4Uf$0p!@O]<f.XXS8ic>e9UO*sl,L$QPbJM9=!]Xd?B,*]1?=Yn,)N68Ic#2m.F$2eo=
%c>e>H733J\NEtFu*B0Vm2A_/1<?8/Z1lFe\(6b)*kk_<S5+T@W]73E5<T)+7Tp$oR\n?@*YE$YXCaO=<-9A7UI*b`p\=JUK+"<jf
%h2Wfe;'"o]D*gN[o_MFT3E^o*6YDd9k\cm&R@SAKeb?Ha]-:&@'>/:O&1=mfCgF!KSXGUP?N-aq.nnEDY6#`E8RW.#i@<YWC_6+C
%?p$@lY3q)K%U*1pb>!u!l+=gn*dX<1#:+-1+1,2?]*m$Kqk0g7NbN+K@EEt%bQ9T5-Yn+#M\0fk!kSX)LlUmAW!+jsd7K^@Y$J%"
%3euUa*nI#:Y$W$15:U._1WS(=+]m"Wh?N=^_H)Y7*p2r^SJs-ao9h6QR?]aWA7U%R0X_3+12%`cBBKGhjr%7Dm#]?13l8`c%[k"W
%+7eq5"#r[UIf@S35+(+[0Rg>!P<T83?VL`pr%T)6M9OqPrg4,AmF('V3H2m=&8_3[gtufNctZ<qo#G:6J%(t5#-N#1)oEb]o9+")
%qI:"d$;TujJI:<5jGb<2\@FNI)^CPZ9Akdg#!Af1Fn*JQo3As`LUfY:GqsYTA/817D%(>Vk"UuIhAA!I>W8$hou:P'Lo6e&jq.Ci
%:Ym/i#RO8o`?19Um_opUpg[_2_rR6A0a0QCX\J5NAYQLmjtQZq=(ZXbFso!'iJdlnT6EA8$s`Hg:!OT//D-/5EQ4fSMTs-["5gfK
%5JnFmcK:-OS(oaqQj['mesK):\@!,c$pkE]oBKqMhfjf!B5\1sI!?%(kg*;t9\u-=bP&$-]eO3[NVdC/`defRSS)RD(mS$iS2%<,
%#[t.9@LtJ5Tl,95+QciT?];56d@EDs@eT=6o(%e1+0gahjGRFdVmOP^PEB'He(,<[K4HRSiegm,1V$s)*&C>V5VOlQ]4,<uA#Ni%
%Mo!!FP.&(AZrb9q2SPQr43+i"BmL18?OY4XYQb;i0.$]>O:fFQ(PCO;D.%P,*8W\9@hLi&EN.1qa7l5aYg(!nYbN-;7,5e`c[b:j
%,DYfqQ%S?Hq"ZjI%"(#JSlAB?*fAos^fIBcY)Wh#%5XKi/cH.!*r;QH+3/E#B33.e5[#-SL^W1m>+I/?k`J<.p+`Fm.-g!QS-?"f
%@4_jUA]UpkEJ0\sj4L\^$1CL;dR9X&2aVfeJDVt1B^aZo%Sn=.LH+?Y>5@dC`gFFoM!m)14$5"=WW<@ebV+tmH.9/o@JFKDVee,u
%ckhf5N/KXWn-RPj+b0g4kcK*\_296O-`7/$C5dI]Hr)da^NGUYe0F(qi^??_Tmq'h,XOTTXZH`]Lq`)lCI9tVprTk+R!t4,rh#-]
%4)&jOU&AE@BlYN]@MOHXB*F'AWE#u$"s#^OMj'@e^`6:gTNSOrRQ3F#Q0+iWP</o\8KnW-iA/7.U?4[e<e0Xs4hg\uY^b"@@!0kI
%XjfjR:C_G$qW.+]4lG&T&m>OE3`[r[^cQ?%^JIM)Z]A]_^G5-R8R8R_$*e2'\p,$HM+C'4](4o]J[AqaMrB"#Q^`o>M[#9beb-$l
%-NQ<7qoRfL7A2AO3*(K+OmYl7r@b4U1De;boL#&?8/<\UJ)jahJK7r22p.l50<UV":io95O%d"58#tYs2_DpOSNB[?fq<G-XPh$S
%4jbVVbBdWQO6/.G]gi9A7AmnKo#O'`jZ$lR!Bm^`[.VKKV/1=r*+!?"$bt5jc/atK[s#2\S/j@]"Cq%-LCCb2?mBS015C';/]Xt?
%-7l9:'%eCmNjG4..5<Dkh'@[u5&K+$qcA7@0.emZV"t*?q:X!V!!-H#?q'2YMC,E+OFr%128][\;0@JZr;8A'mu:Y#Hde]IN:/p0
%0;*?pU>H_!Ys=/*1/Q8=U$H670Z/M]`Wll5((%65BqNDann[i=5Z%4"c^&;"gO@RbGG"a(;2cl*]-A?KJR=HG+!"">.Q1'5>AqS*
%N`<r/pZY@n_,$,=lEjMHOKJeS_+I!A`,a9A@Y;PV_XOZY`!cg(BnpL<L9qJgn-C>lg/c?C[;um$P^AZ3fnLnI:S-I!_qL*Ehjc,8
%g:]\J`%d+(%<9UWC^tUIa+;)$`qY[j3\icUN8N`II]LE6T`)S`M4l(/h="h0'+b+A<jpVQN<\n0)l>.-=Is4GDb.S6jZUdN>e[RC
%Cd@adnK(&IfF`7\Pt<fTikg8KHZkI7h@7*3:I]:'Eq)=<R#8c'DK_VJ8N7PN.,,GJ,Arm_,BdkdX7'8[[sW7oE+g31O%F.)^W^h/
%r/3#U)ZdhlAM.j<5DU6ZZQlK#)8o*;_#5>>QI9'qad9$+e6D_MD'[He"ZJ\BZZn4I<kK8h.pciI&23'lX"^eSXoo]r7_74\*d0B2
%k9=.H?6#?E10pO>ep$,!7ng>7dL+&9--akQ:c?cE`6E&aLq6d5$Q#*^+.Xi#gLduWlm#.\?ASr>[Q(Bj7uBruds;JGG/-T&XOi2?
%la=BDA^^A99!P)GT/$-"a/GV"JnJ[c^^,&TW\(G&C-Y`2-Q!-bNR%'EPTiug&NaMer'E\`ECToRr%j*,TP)NaoWnK207N`465]l6
%4gkq)bSMOB5L%+P.>WkAnUC9UE1b+]AJbeDhR3i;+l[@^`"qW!rUgOKBoM-CP^?2UX+f&4kXAT()sfe^TAUXaV,]e[k_7M0Wb_0,
%Aq,S&l8*#WGWf=.Q.bV38:;gSI^.,rnj;Wt+l60rHWQ<iq:FmW[sVKj.q&*>X/#qP:.Qo.@7(L/LpgGUIJ*/k>P-0E?E'`lSf2El
%hU)FaA=+lBoGcA5gAAoS>6p;];.$7tHlk-0=K?,bFjB=M#A&kTEQ\RB_W->#)6KbJJK1:app(<>TfgW`@jTkKD12k<@eK;SM.FML
%]YVXdIqOJb7pYe5<rH(4oM"j>.!bQnl5(#5!*n*-;A3P;TE`p>Oi6DR,bZEO,XCQBBg`;5[C5.hZD\DMn*"IC,Np8MWDG(U,E\,u
%CTo"C5S!uaZp*7[pu4H%eV9.g925k8WJEtgS&5?h0V_Z>SJ3W_bFf!Vfn@3dDH`P!YuBIJKHB!q%&[[2)[$6p&LEMe^Las$J?KaW
%K)`TLd#_u-mgud%rL5+<NJs)4A`WFO3S3?AAAX#YK>hPKH3TJC&dX_tUWT,KO<QS:i\(gUB+7@&4:hn$7mu&=LP:XWj^@UqBE5)s
%(S['O78gc6C#TeZXiH(X6ALMeK\Rk5g]O9G!#SC39)aJInN=dHT(?JOHEB>Z'MG?J"a,U"h;N`20GH!lZBhI:p42m,6lHInY)Of[
%XpCnd_@.qmN/%T0!niAR4\-]I)[Z@C.H<i\O+h0(Se-HA=3)s=8nf/#Tu.cimHS.K5UC"p2Tj'B;\.:(jnrQ%3)/?]W59ukE`7`<
%K'?I#bs3)M663*<GWd1Tl%jfQ_&`2o+U*LY"WYe@1*&,@5%j>g(MqG_]MaH>XV\JRl%IT#,-%m"1%!N9K^:9RP2gO,;E,nCPQr.1
%Rh62n67Fk1=2`8a-$M$KIGs+A!(HlOpV:cnl7#!(K&0AA\`D<@Hd4Vs`%fGW+sJMfde'opZj&F_6kl'T+<m8T.uP=9cE5!C:D0n2
%0U0dZ9N"Ki]sJa9_n$D@s2!b\:V$<NO[7V;oDt)'Q-b@l(2XFYqi4%m]m9nq<]qlC=A$[B6NPt)6OlBpQQca1`>l&L9Y<H*q\?dT
%DsYd##mgps%_5Wun6uoR9GQMuA-ir]7tf?B_:=,g&0e/9LEQu=30shghL9[=o)6E%,K@kDA!D@KNMtf;RDVNJYt)fSPsOug$S;/D
%q+o?;If&khqX^?I]UVd`.D*tTO?UV,@#3lK'+`)7ak"tj&*X7k=9/V&Penh,ds0Nq(LT.$HTpSh#fsX_jCX<n:($mr"p16Lo"u-%
%68f7jj.")_h;:1*,/m[0cU[*Ni#E<IYBhEZS%@oVp#S._;SPX5[tHU(U0"ZS>4d=pgW59iM%+M&s74\@B!Lq#B@cCJ3e2m:iq9jB
%]do=b5mU/Zi-W<&f3',9ce[V:De>jKbAP;kR+d8'#F*SJ38Tio06P6EJ7atD#\9b#M5A1U6n/QEVnfusN9j*U,.%`g3q4=JXI*K8
%!63u.5I).]?E`Q&nIE)lNj4bI#U5?aE*MAVa4_ogG]D$I9(/c3(:49XN[!A6Nh`a5d33!1E1%Z<_W>FSLo#(mAJ04VW=FQ8R*ekK
%=27T[r[N^ZC9S&a"p&E?arcOrq*5AL9IH,0*W=&VWP&-i'9sau.HY4M"a0@P39DsE6t.1JRTRX>-+7MQ`@pe1OfcfYgq`2<bkl@*
%*m_djfbkIo`DcKho,H#DLq]o;9h+lSZc:m.3c4HK`Uh(sYFIRtnD]krc#rF'IJA3[grVLYSih&Wdb4Neq=<bpGE:o_aB)014F6Z/
%hRL>82X#jFUP!%acA)h3JDB/R%`%Is$_!/=6;GuAQ@P)pWVXM%OHiQ[1prUY5b$-mDf,XSL#jCTS$5g&l9_Wh+kJ'F?posl[#YlD
%$GoE:Am2H<(=E=$]FlTri9B2$kdu;Z0Rq\_/7?<CGSdUBBi[iqAo@'D.2,hQO_]HQ0s6=ekct*o?i)uQ>kF2D?[;T5,$ZM.rhY4u
%roaBc1E#aVjn64e"il-Ulr=!WiN966?lI<+3&j;k!OT)Kr11nb6LaW1)rrXP%UPd]!!gh'1JH[C`(48Chfup(3[F33J:m7I:C+j6
%3h).?]kNZ$Zj/Y^6J;DEYN-.3nFV;5lFVLU!<93sR=U!gZ-U5%dj0o8EPfGp;Du>,7o"M!]^)kL\b537=e#lM#`'ff1s0foXjmj@
%@giUq_[(hPg\??c@\@1X]$HE\[T-f>$qg/3X67p=Y%aNU@k,U98t.@@*++t2=KuRk8K^o(eKeY039\>5("1TN##paf6SLHHopS54
%;0iC=_^BR:IR9;4SqEH5J>6H<[0I7?913<gT\(Y0X9)u6N>Tt_kG5gK)Q>:$/GNE00o#Xt4i(];""EXg%)54!-"-]4bCR(-:@"-b
%'"\@o'gqR@;#uRmhF$ZA(&A2G%A\kB`^Roa,Fj^n"*)_M']GPkXO>"k&gOI6*=&[Rplh-U;cPX>@J?7T_.iF?5`[Ol*CUZ=Jq?>!
%Up1rJa>%H+,(_D$=F#^21hWf'\mQp\[:"rpCSh!.*9\rlNX4P]j-3?<$dUQ_XfOq\2'A`\j2=,p,,I.L#n(#)HA0bh5_=`=S6F:&
%)He1Cdgj0aDDIsS2s/<%bG/'\B"IAhQ2<Ag0!P`]J%o3ib<rojZ6s3&HV)fmTp7mp3qnfAQ,/cN]PXMoZ3eeJP1<2@e83"C>7M<.
%mkbfcJ=+C[5QN%k'Z[7dVQur_Su3.M\'24=!6S-%&OiGtj8oqH[5`476@_H*Ut2]HYd84>LN-G!VtkkEX*S%Hh>Y45%N>^-45"P-
%/\0cKO([g.akH[[7oWPHRJN_<r51bsrSupFT)\?,s7Xe6nQs:HR@.)@a%nXUM&s#>1U-M<kK>[AiD(grLY3">NX*8W<?tQ55MCs0
%p+qJ\,2Cs@$V'YYOh]E%K1W]Cg&!"Dk'aQjT__S/A17V8WmIkqI5b]cL`7-tJE)NOd*g`iMN@5Kbu!@<$49YXoqDcC6Zst6%BAWW
%TWR7)<!*IKF,JhFP'0h-Yu9]l0uuiFca%_u_iC]AKOd:jL&C6=g&j_u*oL]pg7-0=DUkleT_>Mk1%GlhL-XqJ!W`@4elH>q"W/4C
%NX(2SGQ8/nC"??'BKkbVons2j6ImFb:eadq=?(Rd_j\VqkIUg`hg<%I?<&Xc'4l,u=p%-^i]I'^W7hkY.q1CNN;c\H17H\-hYJ:$
%\_qeQ\$W?0_TG(-pXr:Q`;e]N]Co?mA(Q:h"n[;#0*/H#kRub`)"YQRfmj=lO^K+t$cX=:'<713A9J>,fnTM)E36Nn%aVht*l3_k
%QAt<FjiU4;EZZ?CF$J6!#hKBJ$rlJKA7jQ$Td2fUfBlWKL@PM!7T$M";q8m+N3ld%=4%CEYSAf9!0W&;13mep_q+:pPgI"FP'NBE
%'"2J@BON%/g`2008M`+Jf4+-S@%!$KetKA:TWKe:-HX?W$t`u;eIDoY7].->$NMIF0(p4Pfoncc>+LJ0#uj;l)-DFALu@r>W@V>G
%'>tQ,o3`]Z,`NX"e\Ies94P,O[6KRa_Ae!@q&:"YFa@5!%83q!i,di*RW6BTB$0>.N'G#E4)@HcXJ/=$E5UTSJrbuS<"YT'FrhbM
%JK78gI#0,Y&`T"sn1>dVqt@DhA0F*^TQ.Ien*DW<,\a9LF'LRn#)>)_U_68#KoCc3F:K'h[%B4JeBj:3d`R]H@6UQe'B\YRM*Ht%
%b:KC!,$3I1oCmlXU+qQJL.&;.4_Qm?'88++3);q1TT]sGKA4Go&1Q0+YQ:JY4UFTh^9`jbS'_f65G6Bc/V":1ZOrkRr#,>AC1mm\
%\%Xc=:m8?c`e6CR:]TYba++PVODl);c1/JYR!&0[-/;U*TQEX_C&jF'@R2!4!pe=`&>>X`]+B"T8FAs^+&u"q&\E3TOskS+L<7O5
%fmcOg6B3d&ZT&2Y,sh0p]6K<&meKF!?o(c&$0g]'L@6WYguB*R;F%Z<&lls)d$t+d5(!GtJnG5nggBqHOq8/$b?$P04=`]#"Hiq2
%`MEG@!j!b5&=<%HOFo4-'B='/-hVQ_+TX4O?ma!@,+/_?+\On)6^\N.>ch;HEhoT<SI)IUC1fqT,X6WQ_aZ7c:tqg$H4>Em#Eir"
%(X]n)kWqi%O%aj54]n\P1?i']`rH3b8H+S_4cgL8b_P;SM-0"KQc7roTRKp59$XS3-.4hg84[6&%?$X=OCXEh0FW&F?L.\)bcF-_
%&D(]b%1NGSd!07t=0O9MhY-b5#Nh.h%$gbI<,c-o*4`WbOIM1d-6'>`edaMQ-*Q.bL-aK46NC##TW2M,r9BZqd1b]uT'ft*bG.#g
%^;hmc<)aHK[Iss`"u]G6IUKNnna;$_H`5ph>"bUfD-hPjY*X]5M"'QE@nhUWNg!%#%7rfMQMIJ6kb#$j"LV)k@jlL(L&3ja2,=%*
%9A*W9pA^YLT>BURF'*a/TNH3>9Z?@ZL5q`+a2LcIT@<iI":e'l6r5;(GNjTLiZ,ibXG]L(q7Ilm#d7qOFr]2rYX=Q&*5%%L8.i^8
%6,^oI]-$3D/<*Y:*cJsLkrq+LPXo"Z;L%)N35..)CnXV96kf;?3&m$8$;3fDf$=W6RLlNV<d[Mp6"BnqF^0gLY)lNI]KNOD3@[?a
%"!`dMW;VJMX21!Y@6q'5H#MYo8hSMc)l"eeGp-dBC"S#V5*OBolPA!=h3eeL\9-Mf%kpJNMlq@m>RH]s(&u_TW@3[Y\)ASrfRb5k
%!)D&B+O,GN<\.)05hN6-Ajd23:LoI6W-ial!m%Ig>FcNX<6MP`*=`gY!boED"r]cp-H&EDT]sr/Xd2N\Hg&nCR:l32dS>Y5BW-ag
%WsJ\s?BXhh7i#!ombYm/h^i2EF5kb%TN(l)(M-nQ!.oe9#bMSP,>4IAAPfr<)6sS?L0[Be"H+DH8jF;XH#P,O>%tPl\K<d%",lr)
%QCc18B[9=p4YriL7qMESK[a_oXKI:[2AfpR#ciqp0V_+bX!TDcfE?b%.o];HUL:\c3F/6nkVQQL'lYPgF50J\Y!On"bcKXjZW;,0
%cPh(=:I3rb/X\`%%.G)L;_UtOA*>JdDXZoj%DK=.57Zg&[UA56Ho5c0m''UUpd-T(R*'c>DTF;;;g3/r'Ll.cmE-kOQHb7Gch]/*
%kY::P83fbQGBCSB2?G]dk;]Ge7cUQRpJD<)QN^VH0$%UQmk$^;QCn;9G:>k+Wl-#Q,F'D\8OC"ME<ZfUL8^%e/cQ*",i'8/cLGP?
%pujYm@neO4e.V,D[?,]gc2^f[<?<F$"XkW%aYAP'mJn3Ss4EO5U'C0n8e@gZ>dPq0.$Wb$0HUSDYraRJ#NG'u]ki,uXhRth[K&L>
%e+t#o(FuQB"_ko^rBcVa>/et=&:$YA</F6]R))<!`0&7a\l=<BKO@OOM3/e[9A.st8?<-9[luk\\1@b"&oO<Xo_JQ2`9RIR1f5FV
%%jY"=aGGb"Q*nqmV=duU6J^+Aa]`l?Sb0^8Jrs-""*IrJH)1XLLE%L5%>dmT&q/rH"h>;/.T/cZ6Q$aQI2oR1X'+R_825f(^(<0o
%d]K7qAHW%J2)Jgb`g%Hu4,E5d/<@>TC=Z4^T%Q][<&!et$L)[R"!bFq3Rej.;;C7>\YMU0k88k7h,!RS<B%-"GBqeT2%^UCI+E2j
%fN$XD^o\#/3+'?B=U6\WYGR6CB+]DniG%N_C+A%3`rhI<QVVfH.>XZ2@As9IoL:1'AjWB6UMQUf7*^/]1u`'+$HLEo,UTSR<j=92
%ORF8YD0\$%5ar@&;X:.K5W;,A%PS;AMq3:".m5IO#D-$#-dqa<AOCg;]+QGmCnP,=Q5kO.cu)I@'*n`r#V(E)W.IcP=[eXme:50Z
%F@VQ8&s>qZldj@Naq,,M1::43h57S4m<;f#9l"/k%S]ndc?AooJujU5oR6cW!+3[lcGo[SG)^W524LZPG,kYaYNT:HmsR0Z`Q\7u
%:<_#aCUL05*Qd&pT2.b5HKP`7$"G)Qq]N\5PV%HrMS`TCM[d:M>"S_B>4%1/Ht;3FU7X.V1GFHR#==T-9Lq(9ku*Or#?\R(q@o)5
%W<lRJou&,%h[lPI'Iot9j&cgKk(3#/[P0--P`3elQ"_=ZWuD.a_0<@2aO7k5]+aGP,<<NFDZp<-=:kuc?*R/RFCi0CrFAYQO,MLd
%`es)lc?3[RgM]..o;;*>7[j_"A1A*']?sWRGa^*5n;5D-0c^Q^8RR-9N1#Ol$'Pi7e-eU;<VF7/^`"9P\-')cF_0_e4`G]k[Ps_h
%_&Yn>8WC:i=F_8-;QZPFJOh\42d\f7XXA&C48gXnCkr&Cj/r[:UTIrQ>gSj7kd's7i,-nK81rG^Cb4$#jorH)EK=7s=f%HW<E^12
%)89ubp<"'U`2gs`_-+N07/a2`&,h>9Lrd_lD@Od8k?5PD3?'@BfoSW6r7XA6Zb29KB!e>l(hs_jS,2<`1?o[C@M`9)`!1^^j*Rh5
%4TDEA;nMC5fdQ-1;[/^K'd4>@'9]0tV./g+J-2n#_NS!Z)aL;:$r1p]%6-Jap?<.t!^1?hlH"k"i]B5oQ5%"meMW<mj`ef$G)R@G
%9MFXAeqU90=fm#jWQ7hHa[_?kHN]JtD4p-,G^pO>B'LjFRrYe>[OG"YptQ2OSN"D@CS9$U4>dEb?ZP=1'P%cJ6ab<$KiV?1:.jo%
%l;L!HF'pC'JkW+)!=2+KLul'F`X0D%IK%n@:!2gE%Zm[jqY!Q>=?YGHJa:82>6RB6G<QV\J>GpSbc,\9C=45pR7NQHQ^:i5AGcsO
%.4kIW.M)trOgpt!6A[Ae)06#diq%$!KTP$&G/#.W1AhOIni>&5$QGl:$9=Wd(hs3#1KNQt_fqCh8k@I3Hg]N1bD^?^3<3$QE>IW5
%$fZ-_=;o$u2rbS`#h2QL68^,[%F!N0#NB%"D$URq=SGp;"JUmk\$[*2`H3[tp?q;tO-jI<TS<ckVu$e7Iulu)9bbsZa[JW%b@R^u
%JC$"T.3KO72&:e\(<6/d[0N_"_4f3"EZCoZ_d833Z9bEtZ'-);0W(#R3)Uad+B2jPJI?Yb;cu@hKLkOS&Qf)dX.,-fOJm`W6-n_Z
%$",>Dec9Nmh#T8`EWDY[U'4iK;RJpES=0$i)7Cdk$e*1m\2gC-/'RaKL1m1=K)RP@:<,b65_[p3JU61/"Q]8S%q7(@.V]_\9VA_'
%X#X#o"OcHnfFUj,'gJ<hOWoqNQ&Y_I<Mi#I'FhmZ$Kr%s,(>;0\e%^-bhrkDYNsMd(l2&8$*1a<mjRnF&uPc><,61-!`Gi)'I73B
%%ET^AB;C$U-8'?2EX]%R!+GPu>CjMtEeD.aHB[9/a9ho6Uf=:MTOWD\"Y&q!KI8X!.WFO&fdII?1g.fnar%8!1<L9H!^p`H76Rtc
%S.X54)>3>\k\%uOZ8#H;56kq)jYW0/:hL*958li::#%HWqJM&VY9!o%)A%WVEp#]*&f!VMB8qC%!JEW-O260)m&+2)8"7O6!\*(V
%?j5)[OuZZfmLkXM[M/q8\NY-ghc$"/_jhr<Sn;&?(mP\_I3OR@Adp!%mK"T\U54A$g@lAYbof*"77Et6U,pd=#=`#"Y9tO0<-%N?
%mU2um.Di4I/kLcEZ/GS3g^*Pc'cJ@/'nqV.TfGZ;6#7Z!%RBrB)J0Ao8k<8,>&U8c3*-TtXttkE`W)A@4&:@]M8307O=iAsXTjIt
%"$GB*T*EmLWN)Pq1pisjk_Yll.9RY#RP4q^/E1fV/==U#hckigMT$BNp/oDu&Kb@Fj.4bWGo.M=M0h-KBT0!IEnBdq6fqW8%,,>c
%3?j0C`iAmmBK0MNl)r558X)WL/;nGN\kFT."GO#SWPJ[HpfDuS9u"!*O<`l!4g=$hMD#_r5uhoT*QE)Y*@f'cgrecm*Ri:`<>VNn
%=B5D7lC>Z2E5N$;GIe/j4H+PSi'9-2`<p3:ZIK[9L*1Rb7H'(3s+=XV!#gSAYg.B"0s)i?]s@cfV-4^&-.a7YRV;uo6l(>)FSd?_
%/Ae`KTm@EN@7.'%F,ho"UA$s-qDns'EX^TrKV5A-iOlYh&bQpN\H4?2!&<rdWPN3!B,#_nR@saAF1"Xjpu3h/Q*1&/L(:AP)0Xo4
%+[p;9_J4+-326Q7&0[$t#V\_'+H[o</p;#tgG.+m$X[;E%;OB<Y@%DEkoIRar8.<#KZGPp,?t^j<b?HfKhnDnWW6%98JXG7rIjp'
%4GDCHK-!$^[$&mkQ=eMckl7m"H2A$_CZqPDNiNM@BF('AF@C92nO*bFTHCh=j#R4ZH$O>qEjYW_iUa30R3K7PlmifOqt$@PhHT,=
%>ZHZ^H.Af$1pQ.W+F$\T\$DT-d$Mer+<k`+_TQ-j!JBI.I`?;3#gDR)4\[W2SdggUBARZp?K9@.1l_GY,%Vs\YFY[^Rs+:NpU#*>
%O*Fud5d0uDckj**<e[^9Q5!H;XIAAd<(2"OH#Ks_W"dLE`j,/9?mEY=!)'N,e?Sd^6PtF7hP4B[J1tnnV-7nWUYc5V_<BL"\s!o4
%a-dTo=j4bHIftoO4Oi<+Wk&\/jgQ@_bKknJaMN_t.bch7d5?;Z(#n4nB4\%J>^?HY.QEj%!#18qjFVQsE[]j&k;u)I1noGTYU:Dt
%:aW=He[KZKjS*hi7/039:R[`?IL"O#!Q/!gWWMQN.h&/H-uqG<3]]omWgX)EKEWubogbPeW9d';pR^!7q)H!MNcuX#oW/u[X0_n9
%S@Kdo;HWNI=26<O"K'>_QD5fsaN*t)*i3>+Zrc*%IR@$7;pEcM[$[N!MPp=Ue$G:r3eIbf"]s<J5uKmM:G[P[*=oLtRBAOc^-Q@,
%M<:o2OqmFKCtIj.W-JS%?/Ns)^4#)oF8r,R&B/mfYC+l'OIF_j9po3M\Doo]A1C7*bDBA0f\#ScMk#H(<1_h<B%ag&?KRLRM$&]m
%`N@5F"FO0H/;`\k&XSoj7XbB+iZ*P.^'O)!=f#,#r0YJ>/SHNK@7>XPIT.nYef3%#/07;Y\C`s.'q8b;EO2T<(;--qTm4akA1jY[
%n4L:3P$oNeBTA*JH;c9BFMB+pY(OlVS`KI+YhqB()9!nO&jb6TJ&?B]f\93hH6GXD_E0/CrW<,o0Z+q#Arcc[kD*4.K"(=+d<%1n
%*?6I<EnpcbA\4"hO7M*-mq'-rH3*C%p[>Skn?,3t2pUJ>=2EtJnQH/.oAK^gB#LajXdjVmh91[WbH8GP&!6R]I!MB3)>!-3-YFJu
%g<?!ee#g9.2;QEF[fO6(GQ'tdl!7%I^n%QQ[G/d'f-ketld9`+[pCXFZKja9SNP!)(VGlS58nEOhP91Em_)*%Q$oj5DpQ1"]:BB.
%7hYjo0lQncDEd"'m!L\Haj8R@[PIL&F>HEo9t.G#5N;&mb2*B9RD5pH[kd_%W6H<22;QF7rt$&4aR5D#]p7KY*k*p&V5J7mpoE@S
%QN%1\pgNk\i6D1L2;M[@crbHN!$L5p('$5JiW8h9Qh,_L5k#OV!1IeG"JG!+97WIKnH@Kp2jaXlV&c]=[G54!GkB!>7TF]O,9V)`
%8O1o$/M7&eFGEQj_V=,b:t%!c!B&]k'_mL5mh+0%)$+p5#0cYB_`&^]ckbYl)3oA)#@r)5@NG6*f5o8-+EWC"5V4o3$-[(f_+B0C
%S#ca+]#dU<VH_7I)Xn4q_2$gh+)i!_$"A[t5YZHI$e03L\NgUJ\-k.l*VKQAguC%ab:No#%<m`Ji'VBFpY5srMg.=qJ_aORp^PSl
%O5U'jpG`XH7(a&?&*tLE_gZ"FNue3%1u2Y,:s1F#">nqF627B?cRh51i%9B\]*Q'?+TW$23>0\\P9iLh2g>sO\3!@j+7[T=@SdWK
%`M%gZRk+n[]#g_?VsZ5fI#'i[J71b5%`a1chE*7rVXa-E/>25Sdt4$+E%Pb5>AOZhnld->0F6Oo@5+7%K8IG:p'iVYq:TuE(t<Sa
%O5WG?M$H-PK"%*cUi1*i2+Z][@V\fh/\VEf&Dt^a+;o$92E[0!#C5>NYW3!FicC1_\&IPR"`B7I5u"gj*Al[p?3bQ(lnCN"kmk2?
%K,=5IVV"D?&#Pobn334/\AS5PI[hGH#;t=HJ+sRtnc:7oi#Q,0WIu57&8J_k%:Mlm%Qaf^DXp/nkmg)!,E[K&[ekkB_Gms&ZU^t+
%\+<*tqAThUGha?q`.nWl!Om`H]Ie:5e+,El-01EF@@48QbT2_#%uK1h^c`icMg`H/Is1T7'M>^J5[fd>)]TP6'S:DH9ju3+%QfB5
%DXgZX;r>ks@0&>,*#35a<gF(aD25%KKAq;spa`/\D)#.kkn]&.WN7$i()CAd_daigr>(TNT)*%OM[r\8*cP?ihI=#49m:k8Sj.-K
%?0I\\>SeKX%,Z)5#^nK:L72uL?q@c^@_tCZ9eHi3h.":+!H7I9I#)h:J1!_R(/or:YWH)-ZI3ZrAa$*tHl4"Mis.[bVGZb8Bp]gN
%_keMdq[T*MRH\qj1b9V[LJd)adY[CZ2?[r<D5c\7gP,n)m-nl5gqLb;Tr2dJDL>8mcn-'SoB0sK%L[I5iT%.ENX\Gf$dO#R-c_!I
%*?T6C#_"j>a7JJ2^(*$V@dHA//^=hho?F?W+7`J#ffXrUn9N[:HABncY4EU&*b`+)lCjL_]H/0c@NP#e#_"kqL[N\SS0,=HDm=bi
%kn``Cf`=!u59upCmZ0j^s!Th]"',uL)n[;:jkaALd>`L.)al9efKh@L*I\R-ggUPW^?)hFKKOQb+1"SPV>id@&(/M+`?:o@_&\;e
%i#NRFS`t>\,(d:k7*p%:9>nQ=>;d)j7c)E<njr[#_uB.T]Hah?^[(p7o0;.N&^(<<k`/(qe(0N?X#'P(+jreL@qCZ=!l_Cko<9d3
%&5V@emJIAH$WM;(bQCRBm"k_uhb+FSL;9mb^)O_B6E3oe14knD/3GB+h+Bg!!&'5YM@Ldm(hGe7gkjqjLbF*5Hnd6/hVulL%tpqU
%rTRW>Y<PQ*K1)nH>BpT4[:_bp,ZFJQZs0aaS=BsH=6\I&GSsQ#:M*"H+YGkfB34/G:fh[sOu1$XEuNLslbZT:j4LpU;$Bj9WR_['
%#<0'RV/h/I;`ft5B32S\qT4^oNKO\daC5i%d$bF6-d0N_%^JZS[d24P,o@N.$j#nSL*Wdp6KUOM5/K-fbO\S$GOOPQd0oeZMQ"!;
%!:F-%3q5@:&NbM4f?t8]`j<&unZnCLFkViX0H)Uf/7OqW?.b+MV.A$tR(!2D.Fu2Z<O37J!6c_/@K010ld.,fNM5DJ_,/$P-\pH#
%oU:TIJjEuk2*.;LeN#kI>RloN)qZEaiS_7IJJ;$dkUN)Z0J>n.-;f#TlV(lX1/-5pVgGDWpLifS)lAUn's"!#[E!&I8YrRbW>4s&
%p9W^_Rji(W@p"_P+Jcn_]JPQQP"P=mO-V)VkH>6[2[QKXe3;:DQCZ*t&^b54BuePm'NmqboZ%)mSq\a6"Wrhc=DUfklZ9n-A__KM
%H#L5(`PtnN$#Hb?G51".\+IG`VUoKU&]@9CGKS=[Q=,ahD!f^`3Cgok!IM?W`E6N$`Fc*"6,2]ARflUiF0k%PbNFMsiRLtHA3sdY
%]2%cFV?-cI9E^$$MjC2r]P<1mMA\]?&!O=*o:3+6Jq\L59HYle*,<^@ojCpg_#jLIBP!K@M,3jiIIC5Q5pWj+n/;C<:`rYk+1bQV
%Vd`c&9/Fl".`BpBUNnu<EAjU1jOk7/97E)dGr/\Gou"j^5XuWC^)<c9VDAYD&&MJ_H1Q?Se8u,HW@,d.=Iue=c>kNhiM#bY9m5qL
%'GMc<ZcIuFZY6[R9I?32YmRb69cb]iGgms%[J1KIQ0HI:6,3.ceIV`IO0J5Z^TtFUc!,"1/f(^[Wl;1))8hlC"hJ>nOY_S&naMt"
%>Ni)3Mja<VM&T`Y(c&bRIPqtI,#`Q`g8gb(^4__4leFLM'_E;n)(&IX'_Z;;RVmH!9DA.qerF[PbR=OpeBSV1(j`W@;*RKjPb&`*
%/(VF9YK0fn75ZTd;F.]+ZKEcc9_7eK\T<`[>8>hD\k4cSf!5FY;9dn0T_Em7MNbD1-[IL].@`/H1LEQoQe@uk/W.g>okaCa$[U&3
%R;<!FH-'AqR[lGel9.]\pP@_Y#UmRmM7C7EL/R^[W/?>rTBleJ/?u(,<1iSkptf4`<u;c<jG_RKlNEco5U0r4A.>:JLPf7Q[XkO[
%-tM+LCeqs_89b'#;4Z+_[.Bmq>V+G!K]\:jLlq8\:)[1IJ1.&a4=/K.qelsm%7aVZ^8#6'JP<jh'Hk^S,Y#:!OkFP%#BSS]/67r7
%[u,<=Hmk\Sj)H`@h,mdr8C[i'+_6ksME5lu`VI6O$[H>!VJpp=j+\1YNT9;^8A>3WcX\eNoBR*i9S-gAlg223.::E\@#]L;RTrcf
%D1o0Y3H8T8@RI+j9V!Ce<$J)8d?7R_o,'hip(8PXm*3p"<K>2s8PZOq]f[lP+mc'0HX[U#MLqXiJK]TG1eTa6GhN6kIVnkS3>V'r
%s$aJELCA/q]bfs\^GJ?_7E#nTc1Z9h7G'S3'DE844X,M.ZZjjX%!>*3E7)fkj+^OU_FTA<fCMD#OP'MJ(lh&BRK>O.dTV4[bTIqV
%g8`#1f&midSWc%K5:ls;d^"k]/Ic&D6(:W'Hh_<CE>=V`SQt#Ulla0H$:?8.)bGW$T)8[aSU3DVH!Xo2@hVB`iXqYt]DM^GEi9\q
%gqfT@ae=:k(*ULq4&cbuL-%OVNPG[$0T=[sBBN3JgFaA,NfS7OYhd*nY<#b>PISj=M9U4Qi,rtXVp]?\.!,b]LBpFe`U2g"[0udE
%NBOLDaWjYSIhJ^mDL<t_;I2cfnjq'pI)pXn;q7mqc$5:W&Z3sAS@h3f+sS^g!oRVmWR-5>3)Nfm(U,#-6X:uo>4W2o:FoT\H6;)&
%8X9M<E+K(`>L^C7EI<Db`m$_LgFE(Z/_"TE&q`q37fB!?*6q%:m<PhXL;$.;Nso/UF#1k2[+_]S0<*6O#*NUL4=si=fKmCN`%!j)
%2&nY\[;/0l+;-JoLnlJgP0TEao&pOrmg:3%1lV!^r4BJZLKQ<Lni)aQR1H/0LR'E1-n!iX)kr0aRcT0=RXE=OD*")aEVNtUHkMgI
%AWO4'ppj]L"%@37+J/d-kLFdhL?RuC"j!0U@cY9>>%))(Kq:a4jQZ4_cZJJObn.L,mP7.YH8PL@(@bV2nK5jr5.RF1RJ5foh_FW$
%jdT!BEkh&[q<`_pApt+bfJ3$uTU4iD+4eES;qLO=3sU<3i-/E+k(DQ2!ltV]jT\Q1/Ot?(n2mcQ[G5a+b\2X<])s+fYTNH@^Xket
%i$au^L9!Q\d4K!^I&pQ?!]AeS(ejDuL<IBl*-RhV+7a"c3"lF5\J&e%ml2"tj4SB#=ROP*SI3]8GMNTJnn&rQ)[((>*%^aDm4JW$
%gi>I.g>?m3BVmkOLZd"<Y(mO5XUeYL(*U'DPd!;f__%S$^ZCiemq0Ttnbd[e3FU$`477qq@fNBjoA4KWr-@%>nbd[eH(iPnbC*f+
%e:n(C^>]S<`q/A1-cYc@D)]Ie(\TTLjIq39108;%3$r^cS"1O_[pm8"0f_9Q*$$-l,sH9u9R+GYU8D-i&6kfGG(XINDE'u4E5r]f
%=me7:53/Jai$=`[L7:S*[i?^6=LdB@Z*/Pq=e[Qeb?\R.p_s^,%sbGSNg,B<\5H9D@E4dF+3rWs.CQMJ3)h`^%@>4m]U/r,(+X7+
%j(qTA*I!F]ZK6$[1=R>2Ma"WkVi,Cb)fD!4;Z@l9jH2f![10QL102Y=a!kM0&`2rAZ)S'kNYs_1Em7]PKcT?8RVoZK*keh>=Xe5l
%qB*4bFSWLjhO$`Ka*hGJnCE.8Gftf9VHZe8D=i$iS4Bm[YugHrJ'6kRnI)12eD&I^3d3hP0Jo82KmfI8aH<%rWe[p&d#"F.OHD(r
%6e3DYW+fiELT"rVA0qKY!VrIDGk!%eQW6DLs-*'lDc[+*!e6K84g;mL`eDpDHBIr&1jB2'm]!,<XDUt>p:toHZ-JJXE6_V6U\M3T
%I3Nm@H$S;'/hh&TWufc"?j\p0KG%-3ZkJE6YEYk#cNS=E6EEon\SP&77kjjanXkIIKg`//Yo-/TOV7^4dc:a,piah`?\n%ljJTLE
%N8J0.EZb7d<(T8DE;]O5Kd>$1FZ)`[<a'0^*ko;DB#EJr1>3aIn1[Zo))9/pL]oJf5-s*e3bCo<X9k'LV3J?1Fo*Xp*ke1iNet`/
%Q,gfoa7E;=WEGYMM&F9#C3Vf)%P8.9&jQG&m4&+S>!4(nl*JH-'p;E;A1]kG0U1?g&;YC9FqmFYeAU1(-X+@ub`g&=<bXlIOCuh6
%fWAFX,$qTd)YTbe]C%f9@0C"N`?XpI*2k%3d,m-6`]4tc^:Ln>krXC$`Qpr%Ul8C006'MdJZ]ofTh6XRV$U0J8(DIgJ0?;&2Hhsf
%r)FMbGL<ud.kZoNYo/6`,Y\AaBHCV5'"mTW7mlW`hQ!:R]S-aA6nWpF`#L?CoB^tX8)P6>XJ%>)*&#0SmgTquWT(rEli1$pNLWYC
%%04CU0\""sY4;T=lN)%U)490q!X9@g<**3/V]AA7&9<H0[Xl<^a8hG-YlKB#9YGkZN?SOg-q.l^'5W.N7mXDW4XYqGHh,0I'tQQ2
%olG`qZh,#?/.j+ZON[N;GSW0p"(N,.E%+9@+$)n!`&M$U&q05P"Z5KL;mf/d7(/[7cSZSk%Kt'A@p`$?!%h3Ch!:R#_@")BQ8>GE
%,-WSBCM10lcsb"?Fte2/=,>[u1,QWO6G:>V7_6YNp2G3*6pA]oM;i?Trg]W=Pc5QiLd9HB`qCkh&a*=O`cb!>G"/0M;VDekL0^#h
%+@#V^l!C/=O6$5a-P`T[_(7M/V8!@qg(6eA/TR^[q`UaIXfOk>H6[jaX4eSeGd#eae*9Zapm]8-DtQ91gap8fde$h+ZUE?p>k,WA
%<dd>X"'>TNd$s15)@13RcZS5eMV4mN8tlJ,QbYd(`b[cl!Q5<2C/S;oG+;@P;`$Y_L+PK<NC:dZdW3@H/ZNmQM77:dNH9tg;LOH`
%*@t/5)S:;WA7IabV5s%Dh$\OI9a)7pN!lpJDji-_Q*b-cgA!jfe7Mt?L0-g)E_fE+_I@G*0k>+<?<gDmft:=5AFb7HSXn?XHr>4t
%8bo.r5MM;jo%`L*XbjGi'hcJV!l2n3XqQ3ONNe&rZ5M>12miYj`mbd8;J=iJ\k$I;%58jQR-_,cK!$@LPG^d0"KFf\5Z4t459"q9
%s-'+@jmQY4,RX'&8ks8*m_*$a^a:c[:I$21BGN&WP>.?*?h?jMB[qt&/+X<7LfRB>YN1!Q>#e-U08?'#=Y?J%2mb0,X`kt;moMEL
%lQT;.[O=[!k^sP>Wi5FrR=qDL6SP!5MKFCU^\WXYQ":qnZ)Q.R5<e*&3Hb3u##nh9o1(9*)&Y!"NeDW[AutX,gajbf@orilL3!iq
%'H#Y<)#AV(,=N)O=`EWu3lu$8[WQSl)m?9dcQd,ai*,5qZaYsBJ%?H[423JRLQJ@%S5!>T+dB)/?'`]0."FZ1B4HG.L%fEI<M]g3
%!\#s?Ak48fL'cJj39d8s.L<>GcD;[D22tnoqPS0-A='TBLU;GMW:=P'8]F>F.4gU\)k=QE"!KDu8hVKF\X_j/,(J/Fq4H>?I(C->
%HOJ`#1YsOC^'[Lo+NR1]ij8fUA4pPs=E:;bS>m$U]ZKGhp.FUYn2iM.EER++\Muei`1M-'Yn3?RNS9d$:+<55H6BU:m/jia8Pqnk
%'UIQ_/644Qo=4!E_*$IPP.m"l.uTD6KsVJ*<>[oH3"_Wg-53/ZD?4Dp3?u4<HFf5P'7I^!R,;,oU[+eK*(F:0J^2Z!N`]D6PX3.,
%OA%BP$24^&2;'=:J6]anK;aV`U51EE!>FjXA:;TJ@LX>.TUe;W=@li2RdQcj'B-Fj`AjZnIMQ[c4B!gK_Tk_D<G+Z$-Z.De'r\64
%>G"G1VdnJ^0Rap=QCS9.:GOM%!/PS#+7r_p`JgErIb'[%F4!Euo.moJ[-uku09O$Njk1O3h@O1db959/h<hZDabE0k70Km#![k+]
%!cj3B*6t0e,@n_)dU?6)(m@_"JD1s'&82EehIV9hE6u;>k#C]U?_D.C&?-T@3Ni+8:o@YNMVGBRan8bnG!U_bnO4c60Ci'%K)5+Q
%mf2UND`k>q)jTuSQ!^?,>BYHm.IUC8eT/jaD^<Ogf)C^9CO5%F&A7*0:t#kL_"6`+?bl9r9lGP#DYXCaFNYn:1YqR-4F1?V'SuV,
%>9J16?_F9#*eWY%gHL8Qc^S5C4`eebnGIRdF79e1ooVa1n<Qj99t.bBC:`M.YVT_.ZX>0.Nc3lD5.c06K?u3R_t3%c^Or,gja#4E
%[GuV<NH3):?k;)_5CCO2pV8HPr-?aInbd[a2t?fkgH2++>Q0KBceBLukKhmHMFUSETTetupHn)(s5NkG[Kkjgo<o1iq=D$26VY&f
%(j6=)GVV,+/RQMM(\U]EecRR\h,nju*89_&4<</BGC1ES^2/$U53,(Yhus_*is/H)/Ph1kDYZV8[su"K6lY'M5K&;git;*KfD<9]
%o)*df=/$`p]Hu8l[eqG[2=Gc`lmR.kcU@B[nX=jD97>kq&\R4$H2bJD;0i/Rm8Hm2/[*=gkA@uVLV04*IuDZ*O3@.XD4ca[VB)ju
%>42/km*+,P]P+0(^6]'ks![j=JQKjo%NBj7mEAe+);EYbHo'LC[_+D2]&fP]diAsYVRklaH1]*?2N-UXs$icpoAJ8/2gdSGpU7^o
%Z3&nZEIdJ&Eb%MJoAr)t`;^<-*'_PpFR'WM`WqBD^s,_a9m8!RMW.kNrs!N\NcCk*V)UjR?P%G_Ieu4:"nAY@jQX/R3;RX9J&8`:
%O:i?MGGGC2jpehO7d!-/K*F3IpMn-3di#eCW8)D;N6nliC^9`Ho[f?BG_/,rEdW/JJ]r\(h@=L@?_H^nc'8qNm2I<o+5Qf*OVNNg
%QAslh7VBbd%hP9Po/b6>p;[81A<,^CU$TMkJ:mC<msoo`h06V\nB^Oeci;N;rpW?,a00t0J+IT.rsoY>in$AEJ>22"%B&aALO+9L
%ah+FZ%s\!gQTpSaA:/cSrpRW#SO$c:r$'#ch@=`Ii],Djs10*,YE=<=E'YQ";p5c%0Q(?08Z/hMol1Mf[m0@Hnq_dhs80ch*PP=H
%nL"W)@)I-G,D83T!*"muVs3p]HQ4)P.#JO]pno>&oR/L>gVWZhTd4:Je&oB>G54=if'R>8(D?Ep^U!mYe$!,nqe&,WXC'9qh1!;W
%rr;ucn(_:)?[=!T_\K]Zh/E>HnYH3WmH["7iOf-ZqV?Z"J%tr?(W1b"InDo)&*HJg3A-,JHr38*j.lq[PDd528hdEc@-R;NBc-m.
%3pG4g'VH+<*iKi*_thRP3kdUHh';_5okY02dfoCF=,eo]fu<^$QTfY3rq;uEJ"M2g(GGg_b?nO%\[7elr-F!B0T8sq:@"VK^sk=?
%T<%A[?Io_f5ejP<JssgO7*caCrD-sajRk!U\Y-^m^naF:4jHPkYoG!V_!Cj!*2n!mPFLb[jl6@LA4(Y@*Z9EP+SpTZ=1<`kJ,(.c
%VL/0S`]sF2Jc3nL_P_nXoUl.*p[gDZ)LqSOp!_gtc*.,J9HBH#:LLD`i$WQTjQ\b!d7HEcn$o'#)<\Q%a8H.-<tK`*h2WZVR""?/
%8]u@H!'3$r+>i9,PuA5oi=X([`rU^'LBqB2`gp[GLH<Rn'-opRm^=Ms5*5V8_>PDKB,!?iOjO`>nJN.9"!#2YM,u?A!KjaL-l"oZ
%72J8e=CL+ZLibn,"ZiE@=d\Z/0"D*c+;hWh7bY\n+U>$n&Uif>s+K;j_\fdMB:/cSAKnV_YCH4X-tglr+"I2d7AF2*#<.?lpPHKu
%UG1gTV4ADBXod@F4TBg^XLVKA5+WB9N<V9`&tpja8);8c`+limVZM^(>k#iRMZTRW1-QB%1%u&8^6&J+QQ-dFJ.Sh6h4K3,ig%as
%$Rh!L4WR?!gZ['Cbb*q_/gE&\FL@(X^b;5=S<AHH[&s?9P'#TrQe3DIi^2@\Qs@_WNAJ2RpV"&C$MpD7K`h>%+j'ucrXOC7^<ol]
%.CGJ]`t21^s+0ba'PbJ7Yu4j,,:Rh$-L.4KCOn&I9KU"jW3JWK?i/K7?,+obd6eE(SFGR&**ZOJs$T<S1[ck*7?+69YYY43=hj9f
%jl$^?rj)NjFoD"aMg`G@d?UP.=k1!"/@,F.>]^l]Vh^+tcCP.;FG2NLn=7=--f5#53r+nR`mW#lrUgYT'*)>``!`*KcZO7PYNr*4
%_I%+3N@_+8]M)Li\,[Mkl\uTp&Uq8(:.(iEq1pJdF"@uM?!$e-IkfTQ38odkq2>K^_7Vsti_R1!gt`"89R%4aPJE6J:9%75S"L#<
%4E\<Ri*[ZpW?dXsUgT#NZB?h)P@g+OS9]X]Laqu^ImIlfl>;,Y:9ZB1@!7YNj6WCH=[_C+%$>Ec#Ag%I]f@_JQap?#(PK\NI3^ac
%HLP[Z;oPnIQ4EVnOM(*6_4`1O"_80b[1>((0ao15?DNaN&#YMn]J&1jK"8M#Ziu&_K<p%MA5>B#;okG86%h@D3WKN^CWG=<OP3*I
%]RYec."(%@.]`!VnjGi%rYt@U777rrPd4[!kS`nXa"nOm*81SW%*kG>=l6lT=2$\C'F;L1D4U1J)c44W't1bu$VIgQ,@\YQa1hN]
%JVdVj7oq3]bi8ihFO.+e8BrS$JqiI(k0M>hc`Z]u-j_"s$Ol9d\R.T3\A@5@QT65IKT,$Ye/O_G.X)#O<"4%pZm'Q2$Y[F@Ha4M@
%cT<M'Nb\RY*;JmaDLOM4nb5JH?08hP)D5d^jRo'&Gf((fF.)g5L^&)!=[dScA`bL`bkqV,JBtC\Us:>?;a1LFIs)<NG',`6c!>\H
%nkC5R>F^Gk2J(gP9iXUB`c[aP,3Ss29c833VQB0j9j.M>ra<fiS!lQ'pE)*3L9r/b_a0g8Fdk_%@d32:e\ArMQ3Rc,DGn?SHdmr+
%`Zf*LHL,VZEfOl8D=D1.VjMDZL>LHp^?Gr2!1#o<1/Fc*Fb8F"m0r\E16m2S1W6X;b7&W$D.SH]K+*H#(5*GWrPX"GOZ@qn1R&W\
%T(R(WZE"'qDA'hLBBP$bm`no>TCSOUmu-O`Ra5F@46AYP5ERs^f15E.@XJ)6UN(+UPQYfH%O%`W.=oKr:?]4)%f0lCa-YJMVs93&
%,ac=MYC1lZ"&T4G3n(04T'P\GKTF+H-e*s/2@!='pGI[G)$P7-VJUHi1^692b,@Re(D,8s^@e?""gLpt[f]%499Tg3!>0M'gXFi*
%71GL&O3`P8&a;eDi!JEAc"To=SGDN#6#77=O/2J>1TQMuO&m<UW]70M#^^oBZPm(b2j`NWJme%l-]Sp*dH3\_gi$hU*_J#u7@.9$
%q2a^3rXi$->dN.ofHIcd(D\l#TSt+7lrsuG#uLr?E8P^geWkWYUAh]8[7?soLr=N1:WrUjc"cu7a=e\%%p@L'Ai5%RWBE)=Fa/jp
%:*>'r7qY'!q\OMLA6hR@W,E(AkmAXe`VbL,-f5#53r(Mrg=aWGs7HSV6V27uT"1#^[u9'X]p&[\XC5Q9SW$th;=8.LQV#pV(<"5`
%H52&Jj#!s1dW)R0S^3[T3Q<h*f5mXP"dX;uR,N]78_YIbA<,dEYnT.!CDXn7\A#P#A+q_E]MAQA13;)r$:li?HCpYajZYQVT(a]"
%rk->iE4J]f+!%hdL>_++?E[O#'u]ED$;!T5e?sBd7Z>mY1QfjtC4_f<e.pIjBO^.!Bg-T(Nfbo\NW8A/ORi'E*7g,iH'LSN&24pt
%M%(TX[RqDCdmr"KKYVBS[TVK!5_$H7-<!TT\Lg/N^I,[ED.(J>l]8\3lN@aVPemGq;4YBoELtK;?dCn1kouN'fNO+>aDg[V5'0)N
%OY)q0J*H2/o(>`0$Xt5L^V1g)fW*-c"lS24$"3p$'`6tqN=jV$E-X_Lj5o+&W_d#JB@W2b)&\T3RI.ceB\[A!3l;Ukj`"[->%^?(
%U?CR^=*+t%]#\Ia40$fl[6mp\am1=]+Qq*HCeipTknNaN?+_60mNnN:0eAd0j(^]1_.*auYu+8Sa(`[Y/KThhF8kO5MU&A"A21?Z
%i3^Fm?(%t[I%Z"jl-t0(NdUPA2o.T!krJ8;[*bI'8t41:aZSa7g,nK$:6Xo.kX<^9/>*IHlq%jo*d>j)*0^?`*;/[[DK9r5dq-rT
%36->K-g,kP,N^cIe(-O/G1o;r=!t:IqZQ)4c`V(Zk6'%UT>RrVSKjd*geCTY5?@l1B946a=lq\^OR@@r-]l,opZGe('=f[cj(HF/
%4h<ZdHfAV)&$Y0#74_`\i&.lojb\^s(AdR-F[kZ]DN;1VI@9s6g455a2<T'6]k-KLqE04L/E*A!'04*Q!BJrA-_&NS]Q<)qW91;7
%fr1[Xq;![sFl"K*LO6,&@nOeq>:4m$d,ScZ.R(F)O_*Z*Vu`Mrbt4I%>c)r[D#S7AOh/,nj6@k>3ZVp9lltW?MeClqUE1!N%CHG5
%;^5D,I3/n,jB&!=gQhS-T:1&\UMQ_.F#("`ToBPgb-XV<'uXZcpGt5\ntN=d`4CJk#`9)TCl<%OfaDL"rWGPrAYf)iBgpqsido1f
%F&&8@<&:$sH*=/^kYEi,.2<_MOZ^m_P7ic\<.TS>eQ]:$(#S['Ys`-keZ2dr/gOj;b=p8IVoB.hGU!u#\&E;2(;rMK93VpE^g^b=
%!OmVjYkq\e!fiLm,8LN-S9uOs0Sc3.$*oDON$2G-$cj@((NL)qfQ,-^Vhnu86Z)0+YlOAMSRO%u\;60EiLU+?pI-V=(9P'HjT:%r
%71V@^T@g^RJ<B7iInVOpj3QFH_"s;=]En2a/<1u$V/p,>AP+sa'1l9N1@Ee;>d@(sSe\7KV?Rqp'7DCrd<d0WiY<131n_.aU2uFS
%mO%-/c>"JX6mMjKm)340><+'S=ZlblU<[=^'#AaRo@bl:2;'.:MS.WnY;5)-n+eFHYSQk['hMte9tuesL0`i(M0\2P,OI:F9Y`";
%%[lB7_+4g[.[-m$d>L[0XQ046[<87412/ZtiY/TF/i%.uFFTP^#`.9<9KFZqp)BEm\mN&]$;NB!DhLIBP8:>0"oJn1V5mRglUP<b
%.g9=o&INb&/8X$ndSLdk06>%mVPeeR$8,7;q28(b0B,W.)NH%tAS)IHODr.WX&*c-WOG237p7CFh$=1;?Sh!E&.02g4Hei!).5<n
%/OF0E'IhY1dTG3dh+4AnKV>JF_8Xm*P@Fpr)l[q`VHlEY$T<4(9B-+j#]fYIfKdM6--?=lJHGQ?fPTfk]U79aDV^C>T>I4)2k66]
%VsB2j84qL;-Q;+(XueRK<&qOsS\$1&jfU[(0R%mc;RR7K;O4;a$Y\t`Q^)`M-%a6\4ls\PmHtMn%Q*C.\YU7M"D"(A)mP@*V9Fqh
%&Bh3LoBF7@J!VH:e0?Y(Q=+$,AqbV9_3kJtBk`Qf%1E]<*p9(6g6b"SB3,C^7Jk=s1\Rt^I?j)063F`Q0-H319i&:fo@%^0^W@S6
%!:)]0Y=m0a1:b$PQqpB026#`H^Uje"<d,(tLqg+N1:I615o6\%35K0DpO.Ko,5K5G;0KLpW#,5Gn5(fu`F(u_#t/X*'fM69/P'aF
%/c<19%lmsgR6T=4N4N/d;J/XWWU)VHLB8t"_T3e@$mgN%Srs$e/U/k_4[)oOb5T\B>kO.]WlY<2477d'oBn2HbC`G'KWfAb"37?<
%T;_"GP/R`]E>>4(`jV'FC[8A!""YYGA(4A9g(dV+PTLTs\Eep3ob%1&@^9OG%dn&RY6<7&,U@pi,023T<hN3[JulBMCrDB6C*c,1
%iKt0ij\<[mfh;U;H^J4.f-Odkc;kFZgJ^bR8<;D]2%Ep4#Ti>bJ^KOr.Zr3,";?D8JlH8(pkc<(`,j&F,?A_\6.G^XP9stIdfeE(
%km.h+VkmEoDVBJ,*,OAO1eE[l(oo6]Oq4d]q3FCrc@o?'gB3a3o_o/2Ciq@t$7?-\<GM5sL:]:.)A^tQ"S,g.fYTSX=SSL1><"rU
%6F3mU]H=6AU@//2d#h5BG>Y8o>ug8o*:Ime^q$*A1qpB&<%P("HY)g-bV/f=esrZ95]&,`Q@jmAY7c+kdYP_pPD_A=I+&i<fI]KC
%PI`1K/0O/raEk)Cb`&Y31q][1hr(O)U-5jV),LWk-/1u>m&bUt(X;",Yh:>B+jk-2ZAp@_'\P[;L1:H5b;GbkU_@/gAS30\h58^6
%(6p30P1gW-c2OOK/n3MsBo]:M9-YH"1\qsqY1PY;Y)_/WkZ%bY62R+o,A@Mnj-!oQ+%L@>@*LUC"@#oeED<Tji$'"W/MDk>UB&@o
%_1t"(&#($hn@A?NI&`ltn4cI%W?0+sCLFFFkeP?qp<73H)/ohJrC*qR$1oiD0S3>G+=8N-Tgk(:Lu4/tAf%NXL'8+s&"o^9N'*>N
%,%h04;P%5@8B%H7`FS@#TcZAM=L:gb/m]$5eF4J$>D41LZr9]72XD+k*Wml$=A!2ndVU6$phW#Xo@dFRfOS)La;XjH+tdqSI_@_1
%#*PDbVQj>j.3?Be@pBAD":LJ(0Th5lX,ht\OiOKHRiH48Li+&`Kr1X<ea$I5IXGepN.p:DXIgJb!("qqD6IXrScd''Na2dFkEcb%
%7Va)Q=&=015Jd%*gG'?3Sb%69h%p]GP%*TG`O@XbUiQta4mmI:!,ctC6kC&9Wj$oLA4f)Z\7AtsANlglB91-U:.iIFom,-)fR]0l
%.DJ(G$%S7=IWe0K@[uh^R,D3"[Y!1Y*c'D(U,GApV0%V>O)n`[j%U?3W\u3g5.@_3k7capS0(`8JNe8s;K0\2o.eqpa<6h.-mqj6
%*+\28LpH\n?$37QI-YpH-;dqh<iOYkTn@ab#'JeU2a2<sItL.;>S.3L8TUqPZaZ$R8_"QH-[31r2T^%3,en=k=66X6],@co+4qWm
%5-Io\K3&u7I9$8Sl0C:>+8Dmh1d0=dC-i'&?Z\MQ>`/pdeGTSR[3_?c+.;*.QZFX+pslD@U%8ie<V7TsFhVU>0Fe92o[NeH4SAM>
%o7K7R9c_825;Gp$$?g*3YZ:L<U\V_cfh/egIU^J2Mrk8f'GsP?bmt)-6l4*dJeuZBi&K%8RU>.X]M\V-ei"b&:%_G-J?Yu$.#-\Q
%=B%MJr]>V[r@4<J^0YqH]Ld&m>]d^^99CZ<L[GDF9sr1"U&0CWd:j7VQ+r3I\^[\Na(7+_e,:aRR(DL10Jh<Lo>:VeTq7\pQ4Q77
%<V(hN!HsZ*ou"!&]q)_VmFoflF[(])U8q)G&!jnK#%)L;0NGtjIaS,6!piWr`hE:'cpJ+<bqn/d*2H\Z(YoTsY'd#@Tb'^dX6PJm
%$>dDRlA+8)T=_%NLq#E^ctW2RSG&IOn\ahBnO<%Z\AgK2:=TlnWfYf2qCu$gQ`KOUM_+T=jU]A^(oR:Lp9.]^%h9@g*>e+HH=bc8
%Zp.S0dBcU8YEIK+Wr-<*#Wc<'jUY724tk&#&D56&jUXn_2p*5]h\Y)Z9XHu7WZM5rPqK'YhN8WSaJ&I(X!"sCWa@&Vk6+NPUC.;8
%b(o7P7bl]6eITm:ZZP;.rQ*P_^=9.Y!=:cVWZS[dW7Q9oIY_H*=t-B72]gYaf$p\q_%RCH*'7+a(7ke1b;7ZZn$#D;5?0pK4UD"d
%qSD5&;Ti#3@pOeuBRTs@7IQF5b$Xd)/A,uF/UCbMa+%4`4r-0k$1Oqg!K?j(1$2N+6G1_C`.%'VHJd@06dLOBPO3E/Vc:;YI\=W%
%E@P1iq;L:(kO>JH<KMNW''@R=Yg6Ae(<m?q'W[/SLBAa0H+]O,LGL<IM<*%]E3)KFF/S.*&/6sVjp)3ElfHXoprW?4i^Z])l;R5j
%!?8nL%nlGFj's^"6h-pi0&.k(po^VgohbQgqC,1d'L,-m*O!d'5<+3j!od2W365DB`K/1lV5rU2_^'n\OYOfc#8f)OVjbXHAK5Sh
%,fh<U.XhB6"*7?;i5Ni"9^[*km>sQ!6*t3N-Y(nT*oSCT<@+;>P&^QR4k0;t:t]f_BTO[cJe`sYJW"02(>j4hKb?PII@W"S-Q8Xp
%#=sN%J2/73AK"bn>"#sQ%g]dH_V'Z"r'8"*1bt(:/ni%L!Q+'l+U^+sK,tO;I>=Pml3/2V8(_q0L[Zt=Cj_3(J6qb(k/\)*$YDQ"
%GbCrWNe]14*6me:3I^e]Ptc@j/'P5$KE%_8fGZrDi:<L(kMjg!'-54U:?"JEq]j`]*s`f3lOrW>IhMJPjq']07fJ_hp=jYEDEd&Q
%%T*YU1J[V(`$Tdmr\kG39V3%PTr@:i2u(i:%MAHR@[-=o0AhOl](qKLUSZKTgt*K-0UES6\d4pO4!1,l#'7^N?C0!oTC<Xk#T%fr
%b]B3JI)lB6n\!^L6YlM]oYb/u)S5J7S3oR)L^rYAr)PM&"95+Kc`%u\,51i*'s]R-IZI1;r1mSn^O-RBo1B,\2La&YWe6@C'Wp6P
%VMlG'\M]Bl36^)"Zj('<?l]]T(,@LF)A"d`HgUL,l@F;J#<L4-<aD5,K_YO^<VZ_5\O`695?Kb9F-ScT9P/QV^rsiEkqM?+4pgVh
%57r%7*%8]hKq_NkWrG(WG9X<JZXt2oEF<GhLu7IYW+>?672SSR'NIr*0H`81(qZ60>e,q-*+QIP)q;u_7?lcD5YEh1$fVsB+!+C'
%,2gIpRU606&6!"cSjWq9TH\Y22NGj0<5&/<MohVA:.Mi.r0]j$r@,>*YWDZ/3bicqSjbJ1E!T*-SB)Pd?fPdXXCL:F6:0^JnF2p_
%8.]HG*qG/:>Zb",!*75p'0"99M3=.SASV'%n?X;4eds)C"gdq',qh"hU(td>7.FCkC3BM0a1P^u$7Dh9hHq6drJV-:b7@i=m.:2E
%#>=AG2(RPdbFh/:/NKjkmpS%!MDD+]22I%l`&L-JA@Fmjf`^?iJ=;'!nBU!J^qDaSgn9ipPD2]8r(I_3ObD3s@B$[`mm!^G+8@j]
%B&$Ua240A&9ZaQ^$D:Y:MBW4m[fDEfVYMYV<i69Q]@:N@S$e:OKctd7O8CBCm)Pd]!:+g%hn-\8'El8-$D`u"5@V;`I`7-!+@A)n
%#dC<#W%pm@Nb]-bW?'YKO<1,F*"U*R*%F?b,RBaRTeX8KR'?t6FZ!d@^B=D/m/SsqEX.-d)`n%:?%a,rJ)FQ*$muSF?-sC9/5XZm
%Qn7$P^a_U7naor'XB^IfN5as"Wm;U>GZ[C>+_s1a-;_V??Gq0`0Msil\F=p_<KD5`LpK#K#,4FhH%6WubDW\lp&[i420dVYU;Hg%
%<S@Z(nVL;?>T[2W9]X*WmncFf:_(te&5:d$R#J,(@&HG0[#d3aTD9MW@LGGt\G<OC'mh:M8q'0$[3Z11KhoEKrUIE5'H]bY#ke;r
%!a0u4Fu6Dk[.Ir8>#=$DU0SMo`[gW869B%T/.gAF8ZYeJant*#Clt#'/krBNM5YKc3/CK4COG+D9>s/WLf.:2V%FN%[BlCVrKd4G
%S*WmQTtc\ZWd"/g6],sd"!(`P&=VO?k*O_)^O]kSk;V/L(GjQfaGTYjjV7t<*OchED;[Xh64QugCYLE32o"6\bXef`NK4THU#4u6
%V53O\mE9X$nXDX"0HRGi@*M8Sr$DQEAl0;\)pu=ti!Tf!^fn9/IeX(SiFd*hnT/JH2\Tjn&S5jV/u+j\nqNr#XH9p9d+Z3IVlTY\
%`qD?7&OhF^8We+FF^MC^Y#%PiXnoE5X[nL7p<LnK#GBFZq8:TM]7Cs%>b5e>DW`tHKaRe[4]9Y;J5Ump1fpUu9B1S>hHBV59aYO\
%Jg)].,=KIKdH9+5)A-@h/iDtE,Pac)0IV*hL"<-]![<9#K86BE$F4+.`_(FdPWGM$\8BHu0,gNoXLjJB,1@M]hKGSUESEZ#A.#%2
%pX7W)B.%AcCBA1cEX+GnK6.4O8EP[dT!sRuZ,])Ns7#`bO$91#6d\"(i]YdE<S_t&_aL?_>ohBDh;)e5<grPRcP1i3Bc=^bCT8NI
%Y-r$j6T=\_=bcNKj#$[7k>^in?*.&%>W;?$d<JaaI/a%bFAK:C8_PP@\?CD!b-S4$imIWakRd-q(5hjlYD8kF[O/"0aS39EiHO"S
%n4e<FNOLcCI83#0P?KF.9s+&S/#_^pG4'!Sdms87n6M#Rhq>]g.XY<57I,B8ofCPhEtu?g]Dg`(HL"H*pbb4cBnc"j[G"(<oig=d
%R]Tc^lF+/XS_C48?2aIA?I2'Q(W(Eiq$Q!.IFWRDqpe7+oj@+@],Io"h:7'@i:["Eh;Gb+_;FqcP9YK>rMotsbC?!Gs6JSBc)9It
%j1!qEju3Beri=rTmC3,c]ANS=0Ah6QX$?L9^]3-iq"Err^]-G<rpAU&^O#b2n%SbtJ,$p*h`h#;J,."^"G0*5KBMEIrKmQH=+BrD
%""K@.5l~>
%AI9_PrivateDataEnd
